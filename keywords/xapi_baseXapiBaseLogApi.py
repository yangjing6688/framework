
#	=========================================
#	WARNING: This file is generated code by the file: /tools/xapi/GenerateXApiBaseKeywords.py
#	DO NOT EDIT THIS FILE
#	=========================================



from tools.xapi.XapiHelper import XapiHelper


class XapiBaseLogApi(XapiHelper):

    def __init__(self):
        super().__init__()

    def xapi_base_list_accounting_logs(self, **kwargs):

        """
			List accounting logs  # noqa: E501
			
			List a page of accounting logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_accounting_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list accounting logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_accounting_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param str username: The user login name
			:param str calling_station_id: The calling station ID
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqAccountingLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_accounting_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1

    def xapi_base_list_audit_logs(self, **kwargs):

        """
			List audit logs  # noqa: E501
			
			List a page of audit logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_audit_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list audit logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_audit_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param list[XiqAuditLogCategory] categories: Audit category
			:param str username: The user login name
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqAuditLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_audit_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1

    def xapi_base_list_auth_logs(self, **kwargs):

        """
			List auth logs  # noqa: E501
			
			List a page of auth logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_auth_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list auth logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_auth_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param str username: The user login name
			:param str calling_station_id: The calling station ID
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqAuthLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_auth_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1

    def xapi_base_list_credential_logs(self, **kwargs):

        """
			List credential logs  # noqa: E501
			
			List a page of credential logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_credential_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list credential logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_credential_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param str username: The user login name
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqCredentialLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_credential_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1

    def xapi_base_list_email_logs(self, **kwargs):

        """
			List Email logs  # noqa: E501
			
			List a page of Email logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_email_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list email logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_email_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param str username: The user login name
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqEmailLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_email_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1

    def xapi_base_list_sms_logs(self, **kwargs):

        """
			List SMS logs  # noqa: E501
			
			List a page of SMS logs.  # noqa: E501
			This method makes a synchronous HTTP request by default. To make an
			asynchronous HTTP request, please pass async_req=True
			>>> thread = api.list_sms_logs(async_req=True)
			>>> result = thread.get()
			
			**Note - The kwargs options are explained in the :param section below.
			These can be placed in the kwargs dict as key / values pairs or 
			passed into the function as key / value pairs as separate arguments.
			
			Robot ->
			
			    Library    keywords/xapi_base/XapiBaseLogApi.py
			
			    list sms logs    **kwargs
			
			Pytest ->
			
			    from keywords.xapi_base.XapiBaseLogApi import XapiBaseLogApi
			
			    xapiBaseLogApi = XapiBaseLogApi()
			    xapiBaseLogApi.list_sms_logs(**kwargs)
			
			:param async_req bool: execute request asynchronously
			:param int page: Page number, min = 1
			:param int limit: Page Size, min = 1, max = 100
			:param str phone_number: The phone number
			:param int start_time: The start time to query, epoch time in milliseconds since 1/1/1970, default is 0 if not specified or is negative
			:param int end_time: The end time to query, epoch time in milliseconds since 1/1/1970, default is now if not specified or is negative
			:param _preload_content: if False, the urllib3.HTTPResponse object will
			                         be returned without reading/decoding response
			                         data. Default is True.
			:param _request_timeout: timeout setting for this request. If one
			                         number provided, it will be total request
			                         timeout. It can also be a pair (tuple) of
			                         (connection, read) timeouts.
			:return: PagedXiqSmsLog
			         If the method is called asynchronously,
			         returns the request thread.

					 -1 if there is a error (fault)
        """


        # Get the configuration from the Global variables
        configuration = self.get_xapi_configuration()
        api_response = None

        # Check that the access_token is in
        if configuration.access_token == None:
            raise Exception("Error: access_token is None in the configuration")

        # Enter a context with an instance of the API client
        with self.extremecloudiq.ApiClient(configuration) as api_client:
            # Create an instance of the API class
            api_instance = self.extremecloudiq.LogApi(api_client)
            try:
                api_response = api_instance.list_sms_logs(**kwargs)
                # If the _async is True, we will use the Long Running Operation methods
                if kwargs.get('_async', False):
                    # Get the ID
                    operation_id = self.getLongRunningOperationId(api_response)
                    # Query the ID until completed
                    returnValue = self.getAsyncLongRunningOperation(operation_id)
                    if returnValue:
                        kwargs['pass_msg'] = "returned: {returnValue}"
                        self.common_validation.passed(**kwargs)
                        return returnValue
                    else:
                        kwargs['fail_msg'] = "getAsyncLongRunningOperation failed to return SUCCESS"
                        self.common_validation.fault(**kwargs)
                        return -1
                else:
                    # Make sure this is not a async call because the thread will be returned and the
                    # api_response is not None
                    if not kwargs.get('async_req', False) and api_response:
                        # Non async call, check the http return
                        self.valid_http_response(api_response)
                    self.common_validation.passed(**kwargs)
                    return api_response

            except self.ApiException as e:
                kwargs['fail_msg'] = f"ApiException : {e}"
                self.common_validation.fault(**kwargs)
                return -1


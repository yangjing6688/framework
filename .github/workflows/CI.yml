name: CI Workflow
on:
  pull_request:
    branches: [main, RELEASE-**]

jobs:

  framework_sanity:
    name: Validate Framework Functionality
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-output.outputs.status }}

    steps:
    - name: Run sanity test
      shell: python
      run: |
        print("${{ github.ref }}, ${{ github.ref_name }}, ${{ github.ref_type }}, ${{ github.head_ref }}, ${{ github.base_ref }}, ${{ github.event_name }}, ${{ github.event.pull_request.head.ref }}, ${{ github.event.pull_request.base.ref }}")
        from sys import exit
        import requests

        headers = {
          "accept": "application/json",
          "authorization": "PAT ${{ secrets.AUTOIQ_PAT }}",
          "Content-Type": "application/json"
        }
        payload = {
          "savedJobName": "pytest_framework_sanity",
          "testRepoBranch": "main",
          "frameworkRepoBranch": "${{ github.ref_name }}"
        }

        # response = requests.post(url="https://autoiq.extremenetworks.com/tbedmgr/jobmgr/saved_job/executeSavedJobFromName", headers=headers, json=payload)

        # if response.status_code != requests.codes.created:
        #   print(f"Error: got a bad response code <{reponse.status_code}>. Response text: {response.texts}")
        #   response.raise_for_status()

        # try:
        #   job_uuid = response.json()["result"][0]["job_uuid"]
        # except:
        #   print(f"Error: Unable to find Job Id in response. {response.text}")
        #   exit(1)

        print(f"Job UUID: {job_uuid}")


    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

  code_checks:
    name: Run code quality tools
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-output.outputs.status }}
    env:
      EXTAUTO_DIR: ./extauto
      SETUP_CFG: ./setup.cfg

    steps:
    - name: Setup environment
      run: |
        pip3 install flake8

    - name: Checkout local repo
      uses: actions/checkout@v3

    - name: Python syntax checking
      run: |
        printf '\n%s\n\n' "======== Running flake8 in /extauto ========"
        python3 -m flake8 --config=${SETUP_CFG} $EXTAUTO_DIR

        printf '\n%s\n\n' "======== Running flake8 in /ExtremeAutomation/Imports ========"
        python3 -m flake8 --config=${SETUP_CFG} ./ExtremeAutomation/Imports

        printf '\n%s\n\n' "======== Running flake8 in /ExtremeAutomation/Keywords ========"
        python3 -m flake8 --config=${SETUP_CFG} ./ExtremeAutomation/Keywords

        printf '\n%s\n\n' "======== Running flake8 in /keywords ========"
        # python3 -m flake8 --config=${SETUP_CFG} ./keywords

    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

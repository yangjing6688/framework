name: CI Workflow
on:
  pull_request:
    branches: [main]

jobs:
  check_tests_functionality:
    name: Test functionality validation
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-output.outputs.status }}

    steps:

    - name: Pre-job-submission prep
      run: |
        # TODO: get this function working
        ################################
        # run_curl () {
        #   echo $1
        #   echo "$1"
        #   curl_output=$( curl $1 )
        #   curl_return_code=$?

        #   if (( $curl_return_code != 0 )); then
        #     echo "Error contacting to AutoIQ. Message: ${curl_output}"
        #     exit 1
        #   fi
        # }

        # # Get a session token for this run
        # curl_command="-X GET --no-progress-meter \"http://autoiq.extremenetworks.com/auth/getSessionTokenFromPAT\" -H \"accept: application/json\" -H \"authorization: PAT ${{ secrets.AUTOIQ_PAT }}\""
        # echo $curl_command
        # run_curl "$curl_command"
        # session_token=$( echo "$curl_command" | jq -r '.result.sessionToken' )
        # echo $curl_output
        ################################

        ### Get Session token
        curl_return_code=0
        curl_output=$( curl -X GET  --no-progress-meter \
                        "http://autoiq.extremenetworks.com/auth/getSessionTokenFromPAT" \
                        -H "accept: application/json" \
                        -H "authorization: PAT ${{ secrets.AUTOIQ_PAT }}" )
        curl_return_code=$?

        if (( $curl_return_code != 0 )); then
          echo "Error getting session token. Message: ${curl_output}"
          exit 1
        else
          session_token=$( echo "${curl_output}" |  jq -r '.result.sessionToken' )
        fi

        ### Get list of available testbeds for each harness
        # harnesses: econ_auto(pytest), xiq_auto(robot), tcl
        # 11111111-2222-2222-2222-111111111111 (pytest), 11111111-6666-6666-6666-111111111111 (robot), 11111111-5555-5555-5555-111111111111 (tcl)
        curl_return_code=0
        curl_output=$( curl -X GET --no-progress-meter \
                                    "http://autoiq.extremenetworks.com/tbedmgr/jobmgr/cicdPlatforms/pytest" \
                                    -H "accept: application/json" \
                                    -H "authorization: Bearer ${session_token}" )
        curl_return_code=$?

        if (( $curl_return_code != 0 )); then
          echo "Error getting session token. Message: ${curl_output}"
          exit 1
        else
          available_testbeds_pytest=$( echo "${curl_output}" | jq '.result[]' )
        fi

        curl_return_code=0
        curl_output=$( curl -X GET --no-progress-meter \
                                    "http://autoiq.extremenetworks.com/tbedmgr/jobmgr/cicdPlatforms/robot" \
                                    -H "accept: application/json" \
                                    -H "authorization: Bearer ${session_token}" )
        curl_return_code=$?

        if (( $curl_return_code != 0 )); then
          echo "Error getting session token. Message: ${curl_output}"
          exit 1
        else
          available_testbeds_robot=$( echo "${curl_output}" | jq '.result[]' )
        fi

        echo "pytest testbeds: $available_testbeds_pytest"
        echo "robot testbeds: $available_testbeds_robot"

    # Submit job for each platform on each NOS that runs all the tests

    - name: Run Modified TestCases
      run: |
        # CreateJob body template
        job_template='{
                "jsonString":{
                    "description": "CI Verification Run",
                    "priority": 3,
                    "rerun": 0,
                    "postResults": 1,
                    "notifyOnStart": 0,
                    "username": "CI_Service",
                    "group": "CICD",
                    "jobType": "private",
                    "auxInfoList" : [
                      {"cicd_pr":1},
                      {"context": "econ-cron/test-context"},
                      {"repo":"extremenetworks/econ-cron"},
                      {"sha":"a964180c2aae2fd5c72d1137d9e20b6678217a82"}
                    ],
                    "jobPlatforms": [
                      {
                        "platform": "i386",
                        "hardwareConfiguration": "Standalone",
                        "priority": 3,
                        "auxInfoList": [],
                        "jobPlatformTestModules" :
                        [
                            {
                                "testModule_uuid": "11111111-2222-2222-2222-111111111111",
                                "auxInfoList" : [
                                                  {"nodeCount": 4},
                                                  {"universalTestBedOs": "EXOS"},
                                                  {"test_name": ["blah.py","Tests\\whatever\\blah.py", "Tests\\"] }
                                                  ]
                            }
                        ]
                      }
                    ]
                }
              }'

        echo "$job_template"

        CURL_BODY=$(jq --null-input \
                  --arg test "PINK" \
                  --arg password "$PASSWORD" \
                  "$job_template")
        echo $CURL_BODY
        # # Generate JSON body
        # CURL_BODY=$(jq --null-input \
        #   --arg user "$USERNAME" \
        #   --arg password "$PASSWORD" \
        #   '$job_template')

        curl -X POST --no-progress-meter \
        "https://autoiq.extremenetworks.com/tbedmgr/jobmgr/createJob" \
        -H "accept: application/json" \
        -H "authorization: Bearer ${session_token}" \
        -d "${CURL_BODY}"


    # robot testbeds: {
    #   "hardwareConfiguration": "Standalone",
    #   "nodeCount": 4,
    #   "platform": "i386",
    #   "universalTestBedOs": ["blah","test"]
    # }

    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "::set-output name=status::${{ job.status }}"

name: CI Workflow
on:
  pull_request:
    branches: [main]

jobs:
  check_tests_functionality:
    name: Test functionality validation
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-output.outputs.status }}

    steps:

    - name: Pre-job-submission prep
      run: |
        # TODO: get this function working
        ################################
        # run_curl () {
        #   echo $1
        #   echo "$1"
        #   curl_output=$( curl $1 )
        #   curl_return_code=$?

        #   if (( $curl_return_code != 0 )); then
        #     echo "Error contacting to AutoIQ. Message: ${curl_output}"
        #     exit 1
        #   fi
        # }

        # # Get a session token for this run
        # curl_command="-X GET --no-progress-meter \"http://autoiq.extremenetworks.com/auth/getSessionTokenFromPAT\" -H \"accept: application/json\" -H \"authorization: PAT ${{ secrets.AUTOIQ_PAT }}\""
        # echo $curl_command
        # run_curl "$curl_command"
        # session_token=$( echo "$curl_command" | jq -r '.result.sessionToken' )
        # echo $curl_output
        ################################

        ### Get Session token
        curl_return_code=0
        curl_output=$( curl -X GET  --no-progress-meter \
                        "http://autoiq.extremenetworks.com/auth/getSessionTokenFromPAT" \
                        -H "accept: application/json" \
                        -H "authorization: PAT ${{ secrets.AUTOIQ_PAT }}" )
        curl_return_code=$?

        if (( $curl_return_code != 0 )); then
          echo "Error getting session token. Message: ${curl_output}"
          exit 1
        else
          session_token=$( echo "${curl_output}" |  jq -r '.result.sessionToken' )
        fi

        # Commented on 4/28/22 by petersadej
        # This is not currently needed here because we are deafulting to the DT testbed. May be needed in the future
        #
        # ### Get list of available testbeds for each harness
        # # harnesses: pytest, robot, tcl
        # # 11111111-2222-2222-2222-111111111111 (pytest), 11111111-6666-6666-6666-111111111111 (robot), 11111111-5555-5555-5555-111111111111 (tcl)
        # curl_return_code=0
        # curl_output=$( curl -X GET --no-progress-meter \
        #                             "http://autoiq.extremenetworks.com/tbedmgr/jobmgr/cicdPlatforms/pytest" \
        #                             -H "accept: application/json" \
        #                             -H "authorization: Bearer ${session_token}" )
        # curl_return_code=$?

        # if (( $curl_return_code != 0 )); then
        #   echo "Error getting session token. Message: ${curl_output}"
        #   exit 1
        # else
        #   available_testbeds_pytest=$( echo "${curl_output}" | jq '.result[]' )
        # fi

        # curl_return_code=0
        # curl_output=$( curl -X GET --no-progress-meter \
        #                             "http://autoiq.extremenetworks.com/tbedmgr/jobmgr/cicdPlatforms/robot" \
        #                             -H "accept: application/json" \
        #                             -H "authorization: Bearer ${session_token}" )
        # curl_return_code=$?

        # if (( $curl_return_code != 0 )); then
        #   echo "Error getting session token. Message: ${curl_output}"
        #   exit 1
        # else
        #   available_testbeds_robot=$( echo "${curl_output}" | jq '.result[]' )
        # fi

        # echo "pytest testbeds: $available_testbeds_pytest"
        # echo "robot testbeds: $available_testbeds_robot"

        echo "SESSION_TOKEN=${session_token}" >> $GITHUB_ENV

    # Submit job for each platform on each NOS that runs all the tests

    - name: Run Modified TestCases
      run: |
        # CreateJob body template
        job_template='{
                "jsonString":{
                    "description": "CI Verification Run",
                    "priority": 3,
                    "version": 1,
                    "rerun": 0,
                    "postResults": 1,
                    "notifyOnStart": 0,
                    "username": "CI_Service",
                    "group": "CICD",
                    "jobType": "private",
                    "auxInfoList" : [
                      {"cicd_pr":1},
                      {"context": "${{ github.event.repository.name }}/test-context"},
                      {"repo":"${{ github.repository }}"},
                      {"sha":"${{ github.sha }}"},
                      {"state":"pending"}
                    ],
                    "jobPlatforms": [
                      {
                        "platform": "EXOS-DT",
                        "hardwareConfiguration": "Standalone",
                        "priority": 3,
                        "auxInfoList": [],
                        "jobPlatformTestModules" :
                        [
                            {
                                "testModule_uuid": $harness_uuid,
                                "auxInfoList" : [
                                                  {"nodeCount": 4},
                                                  {"universalTestBedOs": "EXOS"},
                                                  {"test_name": $tests }
                                                  ]
                            }
                        ]
                      }
                    ]
                }
              }'

        # Format Test Lists
        pytest_tests=$( echo "Tests/Pytest/Demos/DefaultTemplateUI/TestCases,Tests/Pytest/Demos/VLAN/TestCases" | jq -ncR 'inputs | split(",")' )
        robot_tests=$( echo "Tests/Robot/Demos/XiQ/TestCases" | jq -ncR 'inputs | split(",")' )

        pytest_harness_uuid="11111111-2222-2222-2222-111111111111"
        robot_harness_uuid="11111111-6666-6666-6666-111111111111"

        printf 'Pytest tests to run: %s\nRobot tests to run: %s\n' "$pytest_tests" "$robot_tests"

        # Generate robot JSON body
        CURL_BODY=$(jq --null-input \
                  --argjson tests "$robot_tests" \
                  --arg harness_uuid "$robot_harness_uuid" \
                  "$job_template")

        echo "[*] Robot Job Submit JSON: $CURL_BODY"

        # curl -X POST --no-progress-meter \
        # "https://autoiq.extremenetworks.com/tbedmgr/jobmgr/createJob" \
        # -H "accept: application/json" \
        # -H "Content-Type: application/json" \
        # -H "authorization: Bearer ${SESSION_TOKEN}" \
        # -d "${CURL_BODY}"

        # Generate pytest JSON body
        CURL_BODY=$(jq --null-input \
                  --argjson tests "$pytest_tests" \
                  --arg harness_uuid "$pytest_harness_uuid" \
                  "$job_template")

        echo "[*] Pytest Job Submit JSON: $CURL_BODY"

        # curl -X POST --no-progress-meter \
        # "https://autoiq.extremenetworks.com/tbedmgr/jobmgr/createJob" \
        # -H "accept: application/json" \
        # -H "Content-Type: application/json" \
        # -H "authorization: Bearer ${SESSION_TOKEN}" \
        # -d "${CURL_BODY}"


    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "::set-output name=status::${{ job.status }}"

name: CI Workflow
on:
  pull_request:
    branches: [main]

jobs:
  framework_sanity:
    name: Validate Framework Functionality
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-output.outputs.status }}

    steps:
    - name: Run "sanity" tests to ensure basic framework functionality
      run: |
        ### Get Session token
        curl_return_code=0
        curl_output=$( curl -X GET  --no-progress-meter \
                        "http://autoiq.extremenetworks.com/auth/getSessionTokenFromPAT" \
                        -H "accept: application/json" \
                        -H "authorization: PAT ${{ secrets.AUTOIQ_PAT }}" )
        curl_return_code=$?

        if (( $curl_return_code != 0 )); then
          echo "Error getting session token. Message: ${curl_output}"
          exit 1
        else
          SESSION_TOKEN=$( echo "${curl_output}" |  jq -r '.result.sessionToken' )
        fi

        # CreateJob body template
        job_template='{
                "jsonString":{
                    "description": "  [Username]: CI_Service [JobType]: private  [Group]: CICD [Harness]:  [RDC]: None",
                    "priority": 3,
                    "version": 1,
                    "rerun": 0,
                    "postResults": 1,
                    "notifyOnStart": 0,
                    "username": "CI_Service",
                    "group": "CICD",
                    "jobType": "private",
                    "auxInfoList" : [
                      {"cicd_pr":1},
                      {"context": "${{ github.event.repository.name }}/test-context"},
                      {"repo":"${{ github.repository }}"},
                      {"sha":"${{ github.sha }}"},
                      {"state":"pending"}
                    ],
                    "jobPlatforms": [
                      {
                        "platform": "EXOS-DT",
                        "hardwareConfiguration": "Standalone",
                        "priority": 3,
                        "auxInfoList": [],
                        "jobPlatformTestModules" :
                        [
                            {
                                "testModule_uuid": $harness_uuid,
                                "auxInfoList" : [
                                                  {"nodeCount": 4},
                                                  {"universalTestBedOs": "EXOS"},
                                                  {"test_name": $tests }
                                                  ]
                            }
                        ]
                      }
                    ]
                }
              }'

        # Format Test Lists
        pytest_tests=$( echo "extreme_automation_tests/Tests/Pytest/Demos/DefaultTemplateUI/TestCases,extreme_automation_tests/Tests/Pytest/Demos/VLAN/TestCases" | jq -ncR 'inputs | split(",")' )
        robot_tests=$( echo "extreme_automation_tests/Tests/Robot/Demos/XiQ/TestCases" | jq -ncR 'inputs | split(",")' )

        pytest_harness_uuid="11111111-2222-2222-2222-111111111111"
        robot_harness_uuid="11111111-6666-6666-6666-111111111111"

        printf 'Pytest tests to run: %s\nRobot tests to run: %s\n' "$pytest_tests" "$robot_tests"

        # Generate robot JSON body
        CURL_BODY=$(jq --null-input \
                  --argjson tests "$robot_tests" \
                  --arg harness_uuid "$robot_harness_uuid" \
                  "$job_template")

        printf '%s\n\n' "[*] Robot Job Submit JSON: $CURL_BODY"

        curl -X POST --no-progress-meter \
        "https://autoiq.extremenetworks.com/tbedmgr/jobmgr/createJob" \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -H "authorization: Bearer ${SESSION_TOKEN}" \
        -d "${CURL_BODY}"

        # Generate pytest JSON body
        CURL_BODY=$(jq --null-input \
                  --argjson tests "$pytest_tests" \
                  --arg harness_uuid "$pytest_harness_uuid" \
                  "$job_template")

        printf '%s\n\n' "[*] Pytest Job Submit JSON: $CURL_BODY"

        curl -X POST --no-progress-meter \
        "https://autoiq.extremenetworks.com/tbedmgr/jobmgr/createJob" \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -H "authorization: Bearer ${SESSION_TOKEN}" \
        -d "${CURL_BODY}"


    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "::set-output name=status::${{ job.status }}"

  code_checks:
    name: Run code quality tools
    # runs-on: ubuntu-latest
    runs-on: Ubuntu-20.04
    outputs:
      status: ${{ steps.set-output.outputs.status }}
    env:
      EXTAUTO_DIR: ./extauto

    steps:
    - name: Setup environment
      run: |
        pip3 install flake8

    - name: Checkout local repo
      uses: actions/checkout@v3

    - name: Python syntax checking
      run: |
        printf '\n%s\n\n' "======== Running flake8 ========"
        python3 -m flake8 --extend-ignore E101,E111,E114,E116,E117,E122,E124,E125,E127,E128,E129,E131,E201,E202,E203,E211,E221,E222,E225,E228,E231,E251,E261,E265,E266,E271,E272,E275,E301,E302,E303,E305,E306,E501,E502,E701,E703,E711,E712,E713,E731,W191,W291,W292,W293,W391,W605 --statistics $EXTAUTO_DIR

    - name: Set job status output
      if: ${{ always() }}
      id: set-output
      run: |
        echo "::set-output name=status::${{ job.status }}"

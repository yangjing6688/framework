from ExtremeAutomation.Library.Device.TrafficGeneration.Apis.HltApi.HltapiSessionInfoApi import SessionInfoApi, SessionInfoConstants

"""
    This is the API class for the command: session_info

    Class is auto-generated. If you update anything here,
        it will be over written.
"""


class IxiaSessionInfoApi(SessionInfoApi):

    """
    init function
    """
    def __init__(self, device):
        super(IxiaSessionInfoApi, self).__init__(device)

    """
    This is the "One Large Method" for the command: session_info
    use this by passing in a dict() of all the commands

        api = device.getApi(SessionInfoConstants.SESSION_INFO_API)
        api.session_info(dummyDict)
    """
    def session_info(self, argdictionary):
        return super(IxiaSessionInfoApi, self).session_info(argdictionary, self.supportedIxiaHltapiCommands)

    """
    Individual commands for each option. Typically, the "One Large Method"
    is the one that you want to be using so look at that example above
    """
    def session_info_mode(self):
        """
        This is the method the command: session_info option mode
        Constants Available: MODE_CMD
        Keyword arguments:
        return -- pass/fail
        """
        return self.session_info({SessionInfoConstants.MODE_CMD : ""})

    def session_info_port_handle(self, port):
        """
        This is the method the command: session_info option port_handle
        Description:Specifies a list of port handles. If this parameter exists, only the keys related to the given ports are returned.
        Constants Available: PORT_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        port --
        return -- pass/fail
        """
        return self.session_info({SessionInfoConstants.PORT_HANDLE_CMD : port})

    def session_info_session_keys_include_filter(self, any):
        """
        This is the method the command: session_info option session_keys_include_filter
        Description:May contains a list of value that specify an inclusion filter for the returned session keys. The keys that have items in <typepath> are dependent on the command that generated that kind of typepath. Generally the procedure that generated those objects has the same name as the first part in the key.
            Eg.: in emulation_bgp_route_config.bgp_sites.<vport/protocols/bgp/neighborRange/l2Site> objects of type vport/protocols/bgp/neighborRange/l2Site are generated by the emulation_bgp_route_config command.
        Constants Available: SESSION_KEYS_INCLUDE_FILTER_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.session_info({SessionInfoConstants.SESSION_KEYS_INCLUDE_FILTER_CMD : any})

    def session_info_traffic_handle(self, any):
        """
        This is the method the command: session_info option traffic_handle
        Description:Specifies which traffic elements should be used. Is a list. For modes get_traffic_ce/get_traffic_hls this needs to be a traffic item name (stream id). Because this parameter is a list, the traffic item names should be properly formatted (in case of containing spaces). For mode get_traffic_headers this needs to be a configElement/highLevelStream IxNetwork handle.
        Constants Available: TRAFFIC_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.session_info({SessionInfoConstants.TRAFFIC_HANDLE_CMD : any})


    supportedIxiaHltapiCommands = {SessionInfoConstants.MODE_CMD, SessionInfoConstants.PORT_HANDLE_CMD, SessionInfoConstants.SESSION_KEYS_INCLUDE_FILTER_CMD, SessionInfoConstants.TRAFFIC_HANDLE_CMD}

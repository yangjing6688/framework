from ExtremeAutomation.Library.Device.TrafficGeneration.Apis.HltApi.HltapiTrafficConfigApi import TrafficConfigApi, TrafficConfigConstants

"""
    This is the API class for the command: traffic_config

    Class is auto-generated. If you update anything here,
        it will be over written.
"""


class IxiaTrafficConfigApi(TrafficConfigApi):

    """
    init function
    """
    def __init__(self, device):
        super(IxiaTrafficConfigApi, self).__init__(device)

    """
    This is the "One Large Method" for the command: traffic_config
    use this by passing in a dict() of all the commands

        api = device.getApi(TrafficConfigConstants.TRAFFIC_CONFIG_API)
        api.traffic_config(dummyDict)
    """
    def traffic_config(self, argdictionary):
        return super(IxiaTrafficConfigApi, self).traffic_config(argdictionary, self.supportedIxiaHltapiCommands)

    """
    Individual commands for each option. Typically, the "One Large Method"
    is the one that you want to be using so look at that example above
    """
    def traffic_config_adjust_rate(self):
        """
        This is the method the command: traffic_config option adjust_rate
        Description:Specialty code meant for limited use. Some hardware (because of the
            nature of the input data) will not set the stream rate at the exact rate
            specified, and could be off slightly due to gaps, etc. This will
            compensate for that by creating two streams in the advanced stream mode
            that total the exact value required. This is a very focused feature, not
            meant to be used widely. It will be removed when the new hardware
            support this capability.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ADJUST_RATE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ADJUST_RATE_CMD : ""})

    def traffic_config_allow_self_destined(self, bool_opt):
        """
        This is the method the command: traffic_config option allow_self_destined
        Description:This argument can be used to specify if it is allowed to send traffic
            from routes on an Ixia port to other routes on the same Ixia port. When
            using traffic_generator ixnetwork_540, mode create and -port_handle
            parameter but without -port_handle2 this parameter will be forced to
            '1'. and the source
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: ALLOW_SELF_DESTINED_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ALLOW_SELF_DESTINED_CMD : bool_opt})

    def traffic_config_arp_dst_hw_step(self, mac):
        """
        This is the method the command: traffic_config option arp_dst_hw_step
        Description:Step value used to modify arp_dst_hw when arp_dst_hw_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_DST_HW_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        mac --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_DST_HW_STEP_CMD : mac})

    def traffic_config_arp_dst_hw_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_dst_hw_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_dst_hw_addr
            1

            enable tracking by arp_dst_hw_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_DST_HW_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_DST_HW_TRACKING_CMD : bool_opt})

    def traffic_config_arp_hw_address_length(self, any):
        """
        This is the method the command: traffic_config option arp_hw_address_length
        Description:Configure 1 byte HEX value for ARP Hardware Address Length.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_ADDRESS_LENGTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_CMD : any})

    def traffic_config_arp_hw_address_length_count(self, numeric):
        """
        This is the method the command: traffic_config option arp_hw_address_length_count
        Description:Numeric value which configures the number of times the
            arp_hw_address_length is incremeneted or decremented when
            arp_hw_address_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_ADDRESS_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_COUNT_CMD : numeric})

    def traffic_config_arp_hw_address_length_mode(self, opt):
        """
        This is the method the command: traffic_config option arp_hw_address_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with arp_hw_address_length_step
            and arp_hw_address_length_count.
            decr

            the value is decremented as specified with arp_hw_address_length_step
            and arp_hw_address_length_count.
            list

            Parameter -arp_hw_address_length contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_ADDRESS_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_MODE_CMD : opt})

    def traffic_config_arp_hw_address_length_step(self, any):
        """
        This is the method the command: traffic_config option arp_hw_address_length_step
        Description:Step value used to modify arp_hw_address_length when
            arp_hw_address_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_ADDRESS_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_STEP_CMD : any})

    def traffic_config_arp_hw_address_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_hw_address_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_hw_address_length
            1

            enable tracking by arp_hw_address_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_ADDRESS_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_arp_hw_type(self, any):
        """
        This is the method the command: traffic_config option arp_hw_type
        Description:Configure 2 bytes HEX value for ARP Hardware Type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_TYPE_CMD : any})

    def traffic_config_arp_hw_type_count(self, numeric):
        """
        This is the method the command: traffic_config option arp_hw_type_count
        Description:Numeric value which configures the number of times the arp_hw_type is
            incremeneted or decremented when arp_hw_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_TYPE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_TYPE_COUNT_CMD : numeric})

    def traffic_config_arp_hw_type_mode(self, opt):
        """
        This is the method the command: traffic_config option arp_hw_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with arp_hw_type_step and
            arp_hw_type_count.
            decr

            the value is decremented as specified with arp_hw_type_step and
            arp_hw_type_count.
            list

            Parameter -arp_hw_type contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_TYPE_MODE_CMD : opt})

    def traffic_config_arp_hw_type_step(self, any):
        """
        This is the method the command: traffic_config option arp_hw_type_step
        Description:Step value used to modify arp_hw_type when arp_hw_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_TYPE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_TYPE_STEP_CMD : any})

    def traffic_config_arp_hw_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_hw_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_hw_type
            1

            enable tracking by arp_hw_type
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_HW_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_HW_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_arp_operation_mode(self, opt):
        """
        This is the method the command: traffic_config option arp_operation_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -arp_operation contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_OPERATION_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_OPERATION_MODE_CMD : opt})

    def traffic_config_arp_operation_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_operation_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_operation
            1

            enable tracking by arp_operation
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_OPERATION_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_OPERATION_TRACKING_CMD : bool_opt})

    def traffic_config_arp_protocol_addr_length(self, any):
        """
        This is the method the command: traffic_config option arp_protocol_addr_length
        Description:Configure 1 byte HEX value for ARP Protocol Address Length.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_ADDR_LENGTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_CMD : any})

    def traffic_config_arp_protocol_addr_length_count(self, numeric):
        """
        This is the method the command: traffic_config option arp_protocol_addr_length_count
        Description:Numeric value which configures the number of times the
            arp_protocol_addr_length is incremeneted or decremented when
            arp_protocol_addr_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_ADDR_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_COUNT_CMD : numeric})

    def traffic_config_arp_protocol_addr_length_mode(self, opt):
        """
        This is the method the command: traffic_config option arp_protocol_addr_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with arp_protocol_addr_length_step
            and arp_protocol_addr_length_count.
            decr

            the value is decremented as specified with arp_protocol_addr_length_step
            and arp_protocol_addr_length_count.
            list

            Parameter -arp_protocol_addr_length contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_ADDR_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_MODE_CMD : opt})

    def traffic_config_arp_protocol_addr_length_step(self, any):
        """
        This is the method the command: traffic_config option arp_protocol_addr_length_step
        Description:Step value used to modify arp_protocol_addr_length when
            arp_protocol_addr_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_ADDR_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_STEP_CMD : any})

    def traffic_config_arp_protocol_addr_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_protocol_addr_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_protocol_addr_length
            1

            enable tracking by arp_protocol_addr_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_ADDR_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_arp_protocol_type(self, any):
        """
        This is the method the command: traffic_config option arp_protocol_type
        Description:Configure 2 bytes HEX value for ARP Protocol Type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_TYPE_CMD : any})

    def traffic_config_arp_protocol_type_count(self, numeric):
        """
        This is the method the command: traffic_config option arp_protocol_type_count
        Description:Numeric value which configures the number of times the arp_protocol_type
            is incremeneted or decremented when arp_protocol_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_TYPE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_TYPE_COUNT_CMD : numeric})

    def traffic_config_arp_protocol_type_mode(self, opt):
        """
        This is the method the command: traffic_config option arp_protocol_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with arp_protocol_type_step and
            arp_protocol_type_count.
            decr

            the value is decremented as specified with arp_protocol_type_step and
            arp_protocol_type_count.
            list

            Parameter -arp_protocol_type contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_TYPE_MODE_CMD : opt})

    def traffic_config_arp_protocol_type_step(self, any):
        """
        This is the method the command: traffic_config option arp_protocol_type_step
        Description:Step value used to modify arp_protocol_type when arp_protocol_type_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_TYPE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_TYPE_STEP_CMD : any})

    def traffic_config_arp_protocol_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_protocol_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_protocol_type
            1

            enable tracking by arp_protocol_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_PROTOCOL_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_PROTOCOL_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_arp_src_hw_step(self, mac):
        """
        This is the method the command: traffic_config option arp_src_hw_step
        Description:Step value used to modify arp_src_hw_addr when arp_src_hw_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_SRC_HW_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        mac --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_SRC_HW_STEP_CMD : mac})

    def traffic_config_arp_src_hw_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option arp_src_hw_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by arp_src_hw_addr
            1

            enable tracking by arp_src_hw_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ARP_SRC_HW_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ARP_SRC_HW_TRACKING_CMD : bool_opt})

    def traffic_config_atm_counter_vci_data_item_list(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vci_data_item_list
        Description:If the -atm_counter_vci_type option is set to table, this list is used
            used for the set of values.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VCI_DATA_ITEM_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VCI_DATA_ITEM_LIST_CMD : any})

    def traffic_config_atm_counter_vci_mask_select(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vci_mask_select
        Description:If the -atm_counter_vci_type option is set to random, this 16-bit mask
            indicates which bits are held constant The constant values are indicated
            in the -atm_counter_vci_mask_value option.
            DEFAULT

            00 00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_COUNTER_VCI_MASK_SELECT_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VCI_MASK_SELECT_CMD : any})

    def traffic_config_atm_counter_vci_mask_value(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vci_mask_value
        Description:If the -atm_counter_vci_type option is set to random, this 16-bit value
            indicates the values that the bits indicated in the
            atm_counter_vci_mask_select option should have.
            DEFAULT

            00 00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VCI_MASK_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VCI_MASK_VALUE_CMD : any})

    def traffic_config_atm_counter_vci_mode(self, opt):
        """
        This is the method the command: traffic_config option atm_counter_vci_mode
        Description:If the -atm_counter_vci_type option is set to counter, this indicates
            what counter mode should be used. Currently only the incr and decr mode
            are supported.
            DEFAULT

            incr
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VCI_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VCI_MODE_CMD : opt})

    def traffic_config_atm_counter_vci_type(self, opt):
        """
        This is the method the command: traffic_config option atm_counter_vci_type
        Description:The type of counter to use on the vci. fixed - DEFAULTrandom - not
            supported with traffic_generator ixnetwork_540. Parameters
            atm_counter_vci_mask_select and atm_counter_vci_mask_value are also
            involved when setting this type.counter - parameter vci_count is also
            involved when setting this type.table - parameter
            atm_counter_vci_data_item_list is also involved when setting this type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VCI_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VCI_TYPE_CMD : opt})

    def traffic_config_atm_counter_vpi_data_item_list(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vpi_data_item_list
        Description:If the -atm_counter_vpi_type option is set to table, this list is used
            used for the set of values.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VPI_DATA_ITEM_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VPI_DATA_ITEM_LIST_CMD : any})

    def traffic_config_atm_counter_vpi_mask_select(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vpi_mask_select
        Description:If the -atm_counter_vpi_type option is set to random, this 16-bit mask
            indicates which bits are held constant The constant values are indicated
            in the -atm_counter_vpi_mask_value option.
            DEFAULT

            00 00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_COUNTER_VPI_MASK_SELECT_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VPI_MASK_SELECT_CMD : any})

    def traffic_config_atm_counter_vpi_mask_value(self, any):
        """
        This is the method the command: traffic_config option atm_counter_vpi_mask_value
        Description:If the -atm_counter_vpi_type option is set to random, this 16-bit value
            indicates the values that the bits indicated in the
            atm_counter_vpi_mask_select option should have.
            DEFAULT

            00 00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VPI_MASK_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VPI_MASK_VALUE_CMD : any})

    def traffic_config_atm_counter_vpi_mode(self, opt):
        """
        This is the method the command: traffic_config option atm_counter_vpi_mode
        Description:If the -atm_counter_vpi_type option is set to counter, this indicates
            what counter mode should be used. Currently only the incr and decr mode
            are supported.
            DEFAULT

            incr
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VPI_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VPI_MODE_CMD : opt})

    def traffic_config_atm_counter_vpi_type(self, opt):
        """
        This is the method the command: traffic_config option atm_counter_vpi_type
        Description:The type of counter to use on the vpi. Currently only fixed, counter,
            and table are supported.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ATM_COUNTER_VPI_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_COUNTER_VPI_TYPE_CMD : opt})

    def traffic_config_atm_header_aal5error(self, opt):
        """
        This is the method the command: traffic_config option atm_header_aal5error
        Description:May be used to insert a bad AAL5 CRC.
            DEFAULT

            no_error
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_AAL5ERROR_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_AAL5ERROR_CMD : opt})

    def traffic_config_atm_header_cell_loss_priority(self, bool_opt):
        """
        This is the method the command: traffic_config option atm_header_cell_loss_priority
        Description:Sets the Cell Loss Priority (CLP) used to set the discard priority level
            of the cell. It indicates whether the cell should be discarded if it
            encounters extreme congestion as it moves through the network. Value 0
            has a higher priority than 1 (DEFAULT 0).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_CELL_LOSS_PRIORITY_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_CELL_LOSS_PRIORITY_CMD : bool_opt})

    def traffic_config_atm_header_cpcs_length(self, range):
        """
        This is the method the command: traffic_config option atm_header_cpcs_length
        Description:If -atm_header_enable_cpcs_length is 1, then this is used as the length
            of the CPCS PDU (DEFAULT 28).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_CPCS_LENGTH_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_CPCS_LENGTH_CMD : range})

    def traffic_config_atm_header_enable_auto_vpi_vci(self, bool_opt):
        """
        This is the method the command: traffic_config option atm_header_enable_auto_vpi_vci
        Description:If set to 1, the vpi/vci values are forced to 0 and 32.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_ENABLE_AUTO_VPI_VCI_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_ENABLE_AUTO_VPI_VCI_CMD : bool_opt})

    def traffic_config_atm_header_enable_cl(self, bool_opt):
        """
        This is the method the command: traffic_config option atm_header_enable_cl
        Description:Indicates whether congestion has been experienced.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_ENABLE_CL_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_ENABLE_CL_CMD : bool_opt})

    def traffic_config_atm_header_enable_cpcs_length(self, bool_opt):
        """
        This is the method the command: traffic_config option atm_header_enable_cpcs_length
        Description:If set to 1, -atm_header_cpcs_length is used as the length of the CPCS
            PDU (default 0).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_ENABLE_CPCS_LENGTH_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_ENABLE_CPCS_LENGTH_CMD : bool_opt})

    def traffic_config_atm_header_encapsulation(self, opt):
        """
        This is the method the command: traffic_config option atm_header_encapsulation
        Description:The type of header encapsulation. Depending on the traffic_generator
            value, this option has different value choices. For ixnetwork traffic
            generator the parameter can be used only for ixos - vcc_mux_ipv4_routed,
            vcc_mux_bridged_eth_fcs, vcc_mux_bridged_eth_no_fcs,
            vcc_mux_ipv6_routed,vcc_mux_mpls_routed, llc_routed_clip,
            llc_bridged_eth_fcs, llc_bridged_eth_no_fcs, llc_pppoa, vcc_mux_ppoa,
            llc_nlpid_routed ixnetwork - llc_bridged_eth_fcs,
            llc_bridged_eth_no_fcs,llc_ppp, llc_routed_snap,
            vcc_mux_bridged_eth_fcs, vcc_mux_bridged_eth_no_fcs, vcc_mux_ppp,
            vcc_mux_routedixnetwork_540 - vcc_mux_ipv4_routed,
            vcc_mux_bridged_eth_fcs, vcc_mux_bridged_eth_no_fcs,
            vcc_mux_ipv6_routed, vcc_mux_mpls_routed, llc_routed_clip,
            llc_bridged_eth_fcs, llc_bridged_eth_no_fcs, llc_pppoa, vcc_mux_ppoa,
            llc_ppp, llc_routed_snap, vcc_mux_ppp, vcc_mux_routed
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: ATM_HEADER_ENCAPSULATION_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_ENCAPSULATION_CMD : opt})

    def traffic_config_atm_header_generic_flow_ctrl(self, range):
        """
        This is the method the command: traffic_config option atm_header_generic_flow_ctrl
        Description:The generic flow control for use in UNI mode device control signalling.
            Uncontrolled equipment uses a setting of 0000 (default 0).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_GENERIC_FLOW_CTRL_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_GENERIC_FLOW_CTRL_CMD : range})

    def traffic_config_atm_header_hec_errors(self, range):
        """
        This is the method the command: traffic_config option atm_header_hec_errors
        Description:Indicates the number of HEC errors to insert into the HEC byte (default 0).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ATM_HEADER_HEC_ERRORS_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_HEADER_HEC_ERRORS_CMD : range})

    def traffic_config_atm_range_count(self):
        """
        This is the method the command: traffic_config option atm_range_count
        Description:This option is used to specify the number of ATM static endpoint ranges.
            It can take any numeric value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: ATM_RANGE_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ATM_RANGE_COUNT_CMD : ""})

    def traffic_config_becn(self):
        """
        This is the method the command: traffic_config option becn
        Description:Backward Explicit Congestion Notification.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: BECN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.BECN_CMD : ""})

    def traffic_config_circuit_endpoint_type(self, opt):
        """
        This is the method the command: traffic_config option circuit_endpoint_type
        Description:This argument can be used to specify the endpoint type that will be used
            to generate traffic. Valid options are: atmSelect this option if the
            endpoint supports ATM.ethernet_vlan Select this option if the endpoint
            supports Ethernet/VLAN (MAC addressing).ethernet_vlan_arp Select this
            option if the endpoint supports Ethernet/VLAN (MAC addressing) and
            ARP.frame_relay - Select this option if the endpoint supports Frame
            Relay.hdlcSelect this option if the endpoint supports HDLC/POS.ipv4
            Select this option if the endpoint supports IPv4.ipv4_arp Select this
            option if the endpoint supports IPv4 and ARP.ipv4_application_traffic
            Select this option if the endpoint supports IPv4 application traffic
            generation.ipv6Select this option if the endpoint supports
            IPv6.ipv6_application_traffic Select this option if the endpoint
            supports IPv6 application traffic generation.pppSelect this option if
            the endpoint supports PPP/POS.fcoeSelect this options if the endpoint
            supports fcoe.fcSelect this options if the endpoint supports
            fc.multicast_igmpUse this option only if -emulation_src_handle or
            -emulation_dst_handle is represented by IP handles. Eg:
            20.0.1.2/50.0.1.5/0.0.0.1/3. Valid only for IxTclNetwork.
            DEFAULT

            ipv4
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: CIRCUIT_ENDPOINT_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.CIRCUIT_ENDPOINT_TYPE_CMD : opt})

    def traffic_config_circuit_type(self, opt):
        """
        This is the method the command: traffic_config option circuit_type
        Description:This argument can be used to specify the circuit type that will be used
            to transmit traffic. For traffic_generator ixnetwork_540:If the
            parameter is configured as raw the traffic endpoints must be raw. If it
            is configured to anything else it will accept all the endpoint types.
            For example, if circuit_type is vpls and emulation_src_handle is a pppox
            handle it will ignore the 'vpls' restriction and use the pppox handle as
            source. For traffic_generator ixnetwork the valid choices are:
            Valid options are:
            vpls

            VPLS traffic will be sent by the transmit port.
            l2vpn

            L2VPN encapsulated traffic will be sent by the transmit port.
            l3vpn

            L3VPN encapsulated traffic will be sent by the transmit port.
            mpls

            MPLS encapsulated traffic will be sent by the transmit port.
            6pe

            6PE encapsulated traffic will be sent by the transmit port.
            6vpe

            6VPE encapsulated traffic will be sent by the transmit port.
            none

            no MPLS encapsulation will be used by the transmit port.
            stp

            L2 with 802.1q encapsulated traffic will be sent by the transmit port.
            mac_in_mac

            stacked vlan encapsulation will be used by the transmit port.
            raw

            if selected, traffic is sent on a port-to-port basis, without the use of
            protocol interfaces. Configuration of source and destination addresses
            and other information is manually configured. If this type of circuit is
            selected, the configuration of the -src_dest_mesh and -route_mesh
            arguments is disabled.
            quick_flows

            if selected, the traffic configuration will use IxNetwork quick flow
            streams instead of L2L3 streams. This option also allows the
            configuration and use of UDFs. Note that when using quick flows there
            are some tracking limitations to be considered: 1. The tracking option
            operates across ALL quick flows (per traffic item) 2. The track_by field
            can only support values: none, all custom modes, endpoint_pair,
            source_dest_value_pair, dest_endpoint, source_endpoint,
            source_dest_port_pair, source_port.
            application

            Deprecated value. It was used to set Applib Legacy Traffic.
            DEFAULT

            none
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: CIRCUIT_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.CIRCUIT_TYPE_CMD : opt})

    def traffic_config_convert_to_raw(self, bool_opt):
        """
        This is the method the command: traffic_config option convert_to_raw
        Description:If this parameter is 1 the traffic item being created will be
            transformed into a raw traffic item allowing to modify fields of the
            packet that are normally configured from the learned info of the traffic
            endpoitns. For example, if two IPv4 interfaces are used as traffic
            endpoints, ip_src_addr and ip_dst_addr cannot be configured
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: CONVERT_TO_RAW_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.CONVERT_TO_RAW_CMD : bool_opt})

    def traffic_config_custom_offset(self, numeric):
        """
        This is the method the command: traffic_config option custom_offset
        Description:This argument can be used to specify the offset from the beginning of
            the packet where the custom-defined value will be inserted (in bytes).
            Valid only for traffic_generator ixnetwork/ixnetwork_540 and track_by
            custom_8bit/custom_16bit/custom_24bit/custom_32bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: CUSTOM_OFFSET_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.CUSTOM_OFFSET_CMD : numeric})

    def traffic_config_custom_values(self, numeric):
        """
        This is the method the command: traffic_config option custom_values
        Description:Configure the values to be inserted at custom_offset. A list of values
            is accepted. Valid only for traffic_generator ixnetwork_540 and track_by
            custom_8bit/custom_16bit/custom_24bit/custom_32bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: CUSTOM_VALUES_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.CUSTOM_VALUES_CMD : numeric})

    def traffic_config_data_pattern(self):
        """
        This is the method the command: traffic_config option data_pattern
        Description:Payload value in bytes. For example, you can specify a custom payload
            pattern like the following using option 'data_pattern':00 44 00 44
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: DATA_PATTERN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_PATTERN_CMD : ""})

    def traffic_config_data_pattern_mode(self, opt):
        """
        This is the method the command: traffic_config option data_pattern_mode
        Description:incr_byte Data patterm increments each byte in the packet payload.
            decr_byte Data patterm decrements each byte in the packet payload. Valid
            only for traffic_generator ixos/ixnetwork/ixnetwork_540. incr_word Data
            patterm increments each word in the packet payload. Valid only for
            traffic_generator ixnetwork/ixnetwork_540. decr_byte Data patterm
            decrements each word in the packet payload. Valid only for
            traffic_generator ixnetwork/ixnetwork_540. fixed Data patterm is idle
            for each byte in the packet payload. Valid only for traffic_generator
            ixos/ixnetwork/ixnetwork_540. For traffic_generator ixnetwork, you can
            set data_pattern as one of the predefined patterns '00 FF 00 FF', 'DE AD
            BE EF', '00 11 22 33', 'AA 77 AA 77', or you can set any other type of
            pattern which will pass as a user defined pattern. random Data patterm
            is random for the packet payload. Valid only for traffic_generator
            ixos/ixnetwork_540. repeating Data patterm repeats for the packet
            payload. Valid only for traffic_generator ixos/ixnetwork/ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: DATA_PATTERN_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_PATTERN_MODE_CMD : opt})

    def traffic_config_data_tos(self, range):
        """
        This is the method the command: traffic_config option data_tos
        Description:The TOS value when -enable_data is enabled.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DATA_TOS_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_TOS_CMD : range})

    def traffic_config_data_tos_mode(self, opt):
        """
        This is the method the command: traffic_config option data_tos_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with data_tos_step and data_tos_count.
            decr

            the value is decremented as specified with data_tos_step and data_tos_count.
            list

            Parameter -data_tos contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DATA_TOS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_TOS_MODE_CMD : opt})

    def traffic_config_data_tos_step(self, range):
        """
        This is the method the command: traffic_config option data_tos_step
        Description:Step value used to modify data_tos when data_tos_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DATA_TOS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_TOS_STEP_CMD : range})

    def traffic_config_data_tos_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option data_tos_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by data_tos
            1

            enable tracking by data_tos
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DATA_TOS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DATA_TOS_TRACKING_CMD : bool_opt})

    def traffic_config_destination_filter(self, opt):
        """
        This is the method the command: traffic_config option destination_filter
        Description:This parameter filter on the available destination endpoints that can be
            provided with emulation_dst_handle.
            Valid options are:
            all

            There are no filters applied
            ethernet

            Ethernet endpoints only (for raw trafic only)
            atm

            ATM endpoints only (for raw trafic only)
            framerelay

            Frame Relay endpoints only (for raw trafic only)
            hdlc

            HDLC endpoints only (for raw trafic only)
            ppp

            PPP endpoints only (for raw trafic only)
            none

            non MPLS endpoints only
            l2vpn

            L2VPN endpoints only
            l3vpn

            L3VPN endpoints only
            mpls

            MPLS endpoints only
            6pe

            6PE endpoints only
            6vpe

            6VPE endpoints only
            bgpvpls

            VPLS endpoints only
            mac_in_mac

            MAC in MAC endpoints only
            data_center_bridging

            Data Center and Bridging endpoints only
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DESTINATION_FILTER_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DESTINATION_FILTER_CMD : opt})

    def traffic_config_dhcp_boot_filename(self):
        """
        This is the method the command: traffic_config option dhcp_boot_filename
        Description:Boot file name, null terminated string; 'generic' name or null in
            DHCPDISCOVER, fully qualified directory-path name DHCPOFFER.(DEFAULT = '')
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_BOOT_FILENAME_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_BOOT_FILENAME_CMD : ""})

    def traffic_config_dhcp_boot_filename_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_boot_filename_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_boot_filename
            1

            enable tracking by dhcp_boot_filename
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_BOOT_FILENAME_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_BOOT_FILENAME_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_client_hw_addr(self, any):
        """
        This is the method the command: traffic_config option dhcp_client_hw_addr
        Description:Client hardware address. Must be in the form of a string of hex data.
            DEFAULT

            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_CLIENT_HW_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_CMD : any})

    def traffic_config_dhcp_client_hw_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_client_hw_addr_count
        Description:Numeric value which configures the number of times the
            dhcp_client_hw_addr is incremeneted or decremented when
            dhcp_client_hw_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_CLIENT_HW_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_COUNT_CMD : numeric})

    def traffic_config_dhcp_client_hw_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_client_hw_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_client_hw_addr_step and
            dhcp_client_hw_addr_count.
            decr

            the value is decremented as specified with dhcp_client_hw_addr_step and
            dhcp_client_hw_addr_count.
            list

            Parameter -dhcp_client_hw_addr contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_CLIENT_HW_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_MODE_CMD : opt})

    def traffic_config_dhcp_client_hw_addr_step(self, any):
        """
        This is the method the command: traffic_config option dhcp_client_hw_addr_step
        Description:Step value used to modify dhcp_client_hw_addr when
            dhcp_client_hw_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_CLIENT_HW_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_STEP_CMD : any})

    def traffic_config_dhcp_client_hw_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_client_hw_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_client_hw_addr
            1

            enable tracking by dhcp_client_hw_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_CLIENT_HW_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_client_ip_addr(self, ip):
        """
        This is the method the command: traffic_config option dhcp_client_ip_addr
        Description:Client IP address. Only filled in if client is in BOUND, RENEW, or
            REBINDING state and can respond to ARP requests.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_CLIENT_IP_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_CMD : ip})

    def traffic_config_dhcp_client_ip_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_client_ip_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_client_ip_addr
            1

            enable tracking by dhcp_client_ip_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_CLIENT_IP_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_flags(self, opt):
        """
        This is the method the command: traffic_config option dhcp_flags
        Description:Tells whether to broadcast or not.
            Valid options are:
            broadcast

            broadcast
            no_broadcast

            no_broadcast
            DEFAULT

            no_broadcast
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_FLAGS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_FLAGS_CMD : opt})

    def traffic_config_dhcp_flags_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_flags_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -dhcp_flags contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_FLAGS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_FLAGS_MODE_CMD : opt})

    def traffic_config_dhcp_flags_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_flags_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_flags
            1

            enable tracking by dhcp_flags
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_FLAGS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_FLAGS_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_hops(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hops
        Description:Set to zero by client.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_HOPS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HOPS_CMD : numeric})

    def traffic_config_dhcp_hops_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hops_count
        Description:Numeric value which configures the number of times the dhcp_hops is
            incremeneted or decremented when dhcp_hops_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HOPS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HOPS_COUNT_CMD : numeric})

    def traffic_config_dhcp_hops_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_hops_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_hops_step and
            dhcp_hops_count.
            decr

            the value is decremented as specified with dhcp_hops_step and
            dhcp_hops_count.
            list

            Parameter -dhcp_hops contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HOPS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HOPS_MODE_CMD : opt})

    def traffic_config_dhcp_hops_step(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hops_step
        Description:Step value used to modify dhcp_hops when dhcp_hops_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HOPS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HOPS_STEP_CMD : numeric})

    def traffic_config_dhcp_hops_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_hops_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_hops
            1

            enable tracking by dhcp_hops
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HOPS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HOPS_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_hw_len(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hw_len
        Description:Hardware address length.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_HW_LEN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_LEN_CMD : numeric})

    def traffic_config_dhcp_hw_len_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hw_len_count
        Description:Numeric value which configures the number of times the dhcp_hw_len is
            incremeneted or decremented when dhcp_hw_len_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_LEN_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_LEN_COUNT_CMD : numeric})

    def traffic_config_dhcp_hw_len_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_hw_len_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_hw_len_step and
            dhcp_hw_len_count.
            decr

            the value is decremented as specified with dhcp_hw_len_step and
            dhcp_hw_len_count.
            list

            Parameter -dhcp_hw_len contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_LEN_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_LEN_MODE_CMD : opt})

    def traffic_config_dhcp_hw_len_step(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hw_len_step
        Description:Step value used to modify dhcp_hw_len when dhcp_hw_len_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_LEN_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_LEN_STEP_CMD : numeric})

    def traffic_config_dhcp_hw_len_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_hw_len_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_hw_len
            1

            enable tracking by dhcp_hw_len
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_LEN_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_LEN_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_hw_type(self, range):
        """
        This is the method the command: traffic_config option dhcp_hw_type
        Description:Hardware address types.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_HW_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_TYPE_CMD : range})

    def traffic_config_dhcp_hw_type_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hw_type_count
        Description:Numeric value which configures the number of times the dhcp_hw_type is
            incremeneted or decremented when dhcp_hw_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_TYPE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_TYPE_COUNT_CMD : numeric})

    def traffic_config_dhcp_hw_type_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_hw_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_hw_type_step and
            dhcp_hw_type_count.
            decr

            the value is decremented as specified with dhcp_hw_type_step and
            dhcp_hw_type_count.
            list

            Parameter -dhcp_hw_type contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_TYPE_MODE_CMD : opt})

    def traffic_config_dhcp_hw_type_step(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_hw_type_step
        Description:Step value used to modify dhcp_hw_type when dhcp_hw_type_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_TYPE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_TYPE_STEP_CMD : numeric})

    def traffic_config_dhcp_hw_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_hw_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_hw_type
            1

            enable tracking by dhcp_hw_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_HW_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_HW_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_magic_cookie(self, any):
        """
        This is the method the command: traffic_config option dhcp_magic_cookie
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol
            'dhcp'.Configure the 4 bytes HEX number for the 'Magic Cookie' field.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_MAGIC_COOKIE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_MAGIC_COOKIE_CMD : any})

    def traffic_config_dhcp_magic_cookie_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_magic_cookie_count
        Description:Numeric value which configures the number of times the dhcp_magic_cookie
            is incremeneted or decremented when dhcp_magic_cookie_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_MAGIC_COOKIE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_MAGIC_COOKIE_COUNT_CMD : numeric})

    def traffic_config_dhcp_magic_cookie_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_magic_cookie_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_magic_cookie_step and
            dhcp_magic_cookie_count.
            decr

            the value is decremented as specified with dhcp_magic_cookie_step and
            dhcp_magic_cookie_count.
            list

            Parameter -dhcp_magic_cookie contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_MAGIC_COOKIE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_MAGIC_COOKIE_MODE_CMD : opt})

    def traffic_config_dhcp_magic_cookie_step(self, any):
        """
        This is the method the command: traffic_config option dhcp_magic_cookie_step
        Description:Step value used to modify dhcp_magic_cookie when dhcp_magic_cookie_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_MAGIC_COOKIE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_MAGIC_COOKIE_STEP_CMD : any})

    def traffic_config_dhcp_magic_cookie_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_magic_cookie_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_magic_cookie
            1

            enable tracking by dhcp_magic_cookie
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_MAGIC_COOKIE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_MAGIC_COOKIE_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_operation_code(self, opt):
        """
        This is the method the command: traffic_config option dhcp_operation_code
        Description:Operation codes. Valid options are: replyrequest
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_OPERATION_CODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_OPERATION_CODE_CMD : opt})

    def traffic_config_dhcp_operation_code_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_operation_code_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -dhcp_operation_code contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_OPERATION_CODE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_OPERATION_CODE_MODE_CMD : opt})

    def traffic_config_dhcp_operation_code_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_operation_code_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_operation_code
            1

            enable tracking by dhcp_operation_code
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_OPERATION_CODE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_OPERATION_CODE_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_option(self, opt):
        """
        This is the method the command: traffic_config option dhcp_option
        Description:The DHCP options that can be added to the DHCP header. dhcp_pad- for
            this option there should be no data provided dhcp_end- for this option
            there should be no data provide ddhcp_subnet_mask - accepted values: IP;
            number of values: 1 dhcp_time_offset - accepted values: 0-4294967295;
            number of values: 1 dhcp_gateways - accepted values: IP; number of
            values: list dhcp_time_server - accepted values: IP; number of values:
            list dhcp_name_server - accepted values: IP; number of values: list
            dhcp_domain_name_server - accepted values: IP; number of values: list
            dhcp_log_server - accepted values: IP; number of values: list
            dhcp_cookie_server - accepted values: IP; number of values: list
            dhcp_lpr_server - accepted values: IP; number of values: list
            dhcp_impress_server - accepted values: IP; number of values: list
            dhcp_resource_location_server - accepted values: IP; number of values:
            list dhcp_host_name - accepted values: string; number of values: 1
            dhcp_boot_file_size - accepted values: 0-65535; number of values: 1
            dhcp_merit_dump_file - accepted values: string; number of values: 1
            dhcp_domain_name - accepted values: string; number of values: 1
            dhcp_swap_server - accepted values: IP; number of values: 1
            dhcp_root_path - accepted values: string; number of values: 1
            dhcp_extension_path- accepted values: string; number of values: 1
            dhcp_ip_forwarding_enable - accepted values: bit; number of values: 1
            dhcp_non_local_src_routing_enable - accepted values: bit; number of
            values: 1 dhcp_policy_filter - accepted values: IP; number of values:
            list dhcp_max_datagram_reassembly_size - accepted values: 0-65535;
            number of values: 1 dhcp_default_ip_ttl - accepted values: hex byte (eg:
            aa); number of bytes: 1 dhcp_path_mtu_aging_timeout- accepted values:
            0-4294967295; number of values: 1 dhcp_path_mtu_plateau_table - accepted
            values: 0-65535; number of values: list dhcp_interface_mtu - accepted
            values: 0-65535; number of values: 1 dhcp_all_subnets_are_local -
            accepted values: bit; number of values: 1 dhcp_broadcast_address -
            accepted values: IP; number of values: 1 dhcp_perform_mask_discovery -
            accepted values: bit; number of values: 1 dhcp_mask_supplier- accepted
            values: bit; number of values: 1 dhcp_perform_router_discovery- accepted
            values: bit; number of values: 1 dhcp_router_solicit_addr- accepted
            values: IP; number of values: 1 dhcp_static_route - accepted values: IP;
            number of values: list dhcp_trailer_encapsulation- accepted values: bit;
            number of values: 1 dhcp_arp_cache_timeout - accepted values:
            0-4294967295; number of values: 1 dhcp_ethernet_encapsulation - accepted
            values: bit; number of values: 1 dhcp_tcp_default_ttl - accepted values:
            bit; number of values: 1 dhcp_tcp_keep_alive_interval - accepted values:
            0-4294967295; number of values: 1 dhcp_tcp_keep_garbage- accepted
            values: bit; number of values: 1 dhcp_nis_domain- accepted values:
            string; number of values: 1 dhcp_nis_server - accepted values: IP;
            number of values: list dhcp_ntp_server - accepted values: IP; number of
            values: list dhcp_vendor_specific_info- accepted values: hex byte (eg:
            0a); number of bytes: 1 dhcp_net_bios_name_svr - accepted values: IP;
            number of values: list dhcp_net_bios_datagram_dist_svr - accepted
            values: IP; number of values: 1 dhcp_net_bios_node_type - accepted
            values: hex byte (eg: 0a); number of bytes: 1 dhcp_net_bios_scope -
            accepted values: hex bytes (eg: 01.02 or 00:03); number of values: 1+
            dhcp_xwin_sys_font_svr - accepted values: IP; number of values: 1
            dhcp_requested_ip_addr - accepted values: IP; number of values: 1
            dhcp_ip_addr_lease_time- accepted values: 0-4294967295; number of
            values: 1 dhcp_option_overload- accepted values: bit; number of values:
            1 dhcp_tftp_svr_name - accepted values: string; number of values: 1
            dhcp_boot_file_name - accepted values: string; number of values: 1
            dhcp_message_type - accepted values: 1-9; number of values: 1
            dhcp_svr_identifier - accepted values: IP; number of values: 1
            dhcp_param_request_list- accepted values: hex bytes (eg: 01.02 or
            00:03); number of values: 1+ dhcp_message- accepted values: string;
            number of values: 1 dhcp_max_message_size - accepted values: 0-65535;
            number of values: 1 dhcp_renewal_time_value - accepted values:
            0-4294967295; number of values: 1 dhcp_rebinding_time_value- accepted
            values: 0-4294967295; number of values: 1 dhcp_vendor_class_id- accepted
            values: hex bytes (eg: 01.02 or 00:03); number of values: 1+
            dhcp_client_id- accepted values: hex bytes (eg: 01.02 or 00:03); number
            of values: 1+ dhcp_xwin_sys_display_mgr - accepted values: IP; number of
            values: 1 dhcp_nis_plus_domain - accepted values: string; number of
            values: 1 dhcp_nis_plus_server - accepted values: IP; number of values:
            list dhcp_mobile_ip_home_agent - accepted values: IP; number of values:
            list dhcp_smtp_svr - accepted values: IP; number of values: 1
            dhcp_pop3_svr - accepted values: IP; number of values: 1 dhcp_nntp_svr-
            accepted values: IP; number of values: 1 dhcp_www_svr- accepted values:
            IP; number of values: 1 dhcp_default_finger_svr - accepted values: IP;
            number of values: 1 dhcp_default_irc_svr- accepted values: IP; number of
            values: 1 dhcp_street_talk_svr - accepted values: IP; number of values:
            1 dhcp_stda_svr - accepted values: IP; number of values: 1
            dhcp_agent_information_option - accepted values: hex bytes (eg: 01.02 or
            00:03); number of values: 1+ dhcp_netware_ip_domain- accepted values:
            IP; number of values: 1 dhcp_network_ip_option- accepted values: hex
            bytes (eg: 01.02 or 00:03); number of values: 2 values with at least one
            hex byte and corresponding to the format above
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DHCP_OPTION_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_OPTION_CMD : opt})

    def traffic_config_dhcp_option_data(self, any):
        """
        This is the method the command: traffic_config option dhcp_option_data
        Description:The data in the options section of a DHCP frame. Option data may either
            be set as a single value (e.g. 255.255.255.0), a stream of bytes (e.g.
            01.03.06.0F.2C or 01:03:06:0F:2C) or as a list of enumerated dhcp
            options (e.g. [list dhcp_subnet_mask dhcp_gateways
            dhcp_domain_name_server]).(DEFAULT = '').
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DHCP_OPTION_DATA_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_OPTION_DATA_CMD : any})

    def traffic_config_dhcp_relay_agent_ip_addr(self, ip):
        """
        This is the method the command: traffic_config option dhcp_relay_agent_ip_addr
        Description:Relay agent IP address, used in booting via a relay agent.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_RELAY_AGENT_IP_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_CMD : ip})

    def traffic_config_dhcp_relay_agent_ip_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_relay_agent_ip_addr_count
        Description:Numeric value which configures the number of times the
            dhcp_relay_agent_ip_addr is incremeneted or decremented when
            dhcp_relay_agent_ip_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_RELAY_AGENT_IP_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_COUNT_CMD : numeric})

    def traffic_config_dhcp_relay_agent_ip_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_relay_agent_ip_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_relay_agent_ip_addr_step
            and dhcp_relay_agent_ip_addr_count.
            decr

            the value is decremented as specified with dhcp_relay_agent_ip_addr_step
            and dhcp_relay_agent_ip_addr_count.
            list

            Parameter -dhcp_relay_agent_ip_addr contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_RELAY_AGENT_IP_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_MODE_CMD : opt})

    def traffic_config_dhcp_relay_agent_ip_addr_step(self, ip):
        """
        This is the method the command: traffic_config option dhcp_relay_agent_ip_addr_step
        Description:Step value used to modify dhcp_relay_agent_ip_addr when
            dhcp_relay_agent_ip_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_RELAY_AGENT_IP_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_STEP_CMD : ip})

    def traffic_config_dhcp_relay_agent_ip_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_relay_agent_ip_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_relay_agent_ip_addr
            1

            enable tracking by dhcp_relay_agent_ip_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_RELAY_AGENT_IP_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_seconds(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_seconds
        Description:Seconds elapsed since client began address acquisition or renewal process.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_SECONDS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SECONDS_CMD : numeric})

    def traffic_config_dhcp_seconds_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_seconds_count
        Description:Numeric value which configures the number of times the dhcp_seconds is
            incremeneted or decremented when dhcp_seconds_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SECONDS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SECONDS_COUNT_CMD : numeric})

    def traffic_config_dhcp_seconds_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_seconds_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_seconds_step and
            dhcp_seconds_count.
            decr

            the value is decremented as specified with dhcp_seconds_step and
            dhcp_seconds_count.
            list

            Parameter -dhcp_seconds contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SECONDS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SECONDS_MODE_CMD : opt})

    def traffic_config_dhcp_seconds_step(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_seconds_step
        Description:Step value used to modify dhcp_seconds when dhcp_seconds_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SECONDS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SECONDS_STEP_CMD : numeric})

    def traffic_config_dhcp_seconds_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_seconds_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_seconds
            1

            enable tracking by dhcp_seconds
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SECONDS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SECONDS_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_server_host_name(self):
        """
        This is the method the command: traffic_config option dhcp_server_host_name
        Description:Optional server host name, null terminated string.(DEFAULT = '').
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_SERVER_HOST_NAME_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_HOST_NAME_CMD : ""})

    def traffic_config_dhcp_server_host_name_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_server_host_name_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_server_host_name
            1

            enable tracking by dhcp_server_host_name
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SERVER_HOST_NAME_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_HOST_NAME_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_server_ip_addr(self, ip):
        """
        This is the method the command: traffic_config option dhcp_server_ip_addr
        Description:IP address of next server to use in bootstrap; returned in DHCPOFFER,
            DHCPACK by server.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_SERVER_IP_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_IP_ADDR_CMD : ip})

    def traffic_config_dhcp_server_ip_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_server_ip_addr_count
        Description:Numeric value which configures the number of times the
            dhcp_server_ip_addr is incremeneted or decremented when
            dhcp_server_ip_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SERVER_IP_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_IP_ADDR_COUNT_CMD : numeric})

    def traffic_config_dhcp_server_ip_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_server_ip_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_server_ip_addr_step and
            dhcp_server_ip_addr_count.
            decr

            the value is decremented as specified with dhcp_server_ip_addr_step and
            dhcp_server_ip_addr_count.
            list

            Parameter -dhcp_server_ip_addr contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SERVER_IP_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_IP_ADDR_MODE_CMD : opt})

    def traffic_config_dhcp_server_ip_addr_step(self, ip):
        """
        This is the method the command: traffic_config option dhcp_server_ip_addr_step
        Description:Step value used to modify dhcp_server_ip_addr when
            dhcp_server_ip_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SERVER_IP_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_IP_ADDR_STEP_CMD : ip})

    def traffic_config_dhcp_server_ip_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_server_ip_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_server_ip_addr
            1

            enable tracking by dhcp_server_ip_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_SERVER_IP_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_SERVER_IP_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_transaction_id(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_transaction_id
        Description:Random number chosen by client and used by the client and server to
            associate messages and responses between a client and a server.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_TRANSACTION_ID_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_TRANSACTION_ID_CMD : numeric})

    def traffic_config_dhcp_transaction_id_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_transaction_id_count
        Description:Numeric value which configures the number of times the
            dhcp_transaction_id is incremeneted or decremented when
            dhcp_transaction_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_TRANSACTION_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_TRANSACTION_ID_COUNT_CMD : numeric})

    def traffic_config_dhcp_transaction_id_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_transaction_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_transaction_id_step and
            dhcp_transaction_id_count.
            decr

            the value is decremented as specified with dhcp_transaction_id_step and
            dhcp_transaction_id_count.
            list

            Parameter -dhcp_transaction_id contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_TRANSACTION_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_TRANSACTION_ID_MODE_CMD : opt})

    def traffic_config_dhcp_transaction_id_step(self, range):
        """
        This is the method the command: traffic_config option dhcp_transaction_id_step
        Description:Step value used to modify dhcp_transaction_id when
            dhcp_transaction_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_TRANSACTION_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_TRANSACTION_ID_STEP_CMD : range})

    def traffic_config_dhcp_transaction_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_transaction_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_transaction_id
            1

            enable tracking by dhcp_transaction_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_TRANSACTION_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_TRANSACTION_ID_TRACKING_CMD : bool_opt})

    def traffic_config_dhcp_your_ip_addr(self, ip):
        """
        This is the method the command: traffic_config option dhcp_your_ip_addr
        Description:'Your' (client) IP address.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: DHCP_YOUR_IP_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_YOUR_IP_ADDR_CMD : ip})

    def traffic_config_dhcp_your_ip_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option dhcp_your_ip_addr_count
        Description:Numeric value which configures the number of times the dhcp_your_ip_addr
            is incremeneted or decremented when dhcp_your_ip_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_YOUR_IP_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_YOUR_IP_ADDR_COUNT_CMD : numeric})

    def traffic_config_dhcp_your_ip_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option dhcp_your_ip_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with dhcp_your_ip_addr_step and
            dhcp_your_ip_addr_count.
            decr

            the value is decremented as specified with dhcp_your_ip_addr_step and
            dhcp_your_ip_addr_count.
            list

            Parameter -dhcp_your_ip_addr contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_YOUR_IP_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_YOUR_IP_ADDR_MODE_CMD : opt})

    def traffic_config_dhcp_your_ip_addr_step(self, ip):
        """
        This is the method the command: traffic_config option dhcp_your_ip_addr_step
        Description:Step value used to modify dhcp_your_ip_addr when dhcp_your_ip_addr_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_YOUR_IP_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_YOUR_IP_ADDR_STEP_CMD : ip})

    def traffic_config_dhcp_your_ip_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option dhcp_your_ip_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by dhcp_your_ip_addr
            1

            enable tracking by dhcp_your_ip_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DHCP_YOUR_IP_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DHCP_YOUR_IP_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_discard_eligible(self, flag):
        """
        This is the method the command: traffic_config option discard_eligible
        Description:Set Discard Eligibility bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DISCARD_ELIGIBLE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DISCARD_ELIGIBLE_CMD : flag})

    def traffic_config_dlci_core_enable(self, flag):
        """
        This is the method the command: traffic_config option dlci_core_enable
        Description:available for 3 and 4-byte address, when D/C is checked. When the D/C
            bit is turned on, the high six bits of the lowest byte in the Address
            represent DL-Core value. They are not part of DLCI value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_CORE_ENABLE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_CORE_ENABLE_CMD : flag})

    def traffic_config_dlci_core_value(self, range):
        """
        This is the method the command: traffic_config option dlci_core_value
        Description:available for 3 and 4-byte address, when D/C is checked. When the D/C
            bit is turned on, the high six bits of the lowest byte in the Address
            represent DL-Core value. They are not part of DLCI value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_CORE_VALUE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_CORE_VALUE_CMD : range})

    def traffic_config_dlci_count_mode(self, opt):
        """
        This is the method the command: traffic_config option dlci_count_mode
        Description:Count mode of dlci_value. When using the traffic_generator ixnetwork, it
            can take only take the 'fixed' or 'increment' values and can be used
            only for L2VPN traffic, but is not supported in this release.This option
            is not supported for traffic_generator ixnetwork in this release.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork' |
        Constants Available: DLCI_COUNT_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_COUNT_MODE_CMD : opt})

    def traffic_config_dlci_extended_address0(self, flag):
        """
        This is the method the command: traffic_config option dlci_extended_address0
        Description:Address Field Extension 0 - available for 2, 3, and 4-byte addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_EXTENDED_ADDRESS0_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_EXTENDED_ADDRESS0_CMD : flag})

    def traffic_config_dlci_extended_address1(self, flag):
        """
        This is the method the command: traffic_config option dlci_extended_address1
        Description:Address Field Extension 1 - available for 2, 3, and 4-byte addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_EXTENDED_ADDRESS1_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_EXTENDED_ADDRESS1_CMD : flag})

    def traffic_config_dlci_extended_address2(self, flag):
        """
        This is the method the command: traffic_config option dlci_extended_address2
        Description:Address Field Extension 2 - available for 2, 3, and 4-byte addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_EXTENDED_ADDRESS2_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_EXTENDED_ADDRESS2_CMD : flag})

    def traffic_config_dlci_extended_address3(self, flag):
        """
        This is the method the command: traffic_config option dlci_extended_address3
        Description:Address Field Extension 3 - available for 2, 3, and 4-byte addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_EXTENDED_ADDRESS3_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_EXTENDED_ADDRESS3_CMD : flag})

    def traffic_config_dlci_mask_select(self, hex):
        """
        This is the method the command: traffic_config option dlci_mask_select
        Description:This option is used to select which bits from dlci_mask_value mask
            willbe applied to the DLCI value.Example:mask value 0x00E4 mask select
            0x00F3 mask to be applied XXXXXXXX1110XX00X means that the mask will not
            be applied for those bits.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_MASK_SELECT_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_MASK_SELECT_CMD : hex})

    def traffic_config_dlci_mask_value(self, hex):
        """
        This is the method the command: traffic_config option dlci_mask_value
        Description:This is the mask that will be applied to the DLCI value. Only parts of
            this mask will be applied to the DLCI value. Option dlci_mask_select
            will specify which parts of the dlci_mask_value will be applied to the
            DLCI value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_MASK_VALUE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_MASK_VALUE_CMD : hex})

    def traffic_config_dlci_repeat_count(self, numeric):
        """
        This is the method the command: traffic_config option dlci_repeat_count
        Description:Repeat count for dlci_value. Depending on the traffic_generator value,
            this option has different value ranges:ixos: 0-65535 range.ixnetwork
            (not supported in this release): 0-4294967295 range. When
            traffic_generator is ixnetwork, the option can only be used for L2VPN
            traffic, but is not supported in this release.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork' |
        Constants Available: DLCI_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_REPEAT_COUNT_CMD : numeric})

    def traffic_config_dlci_size(self, range):
        """
        This is the method the command: traffic_config option dlci_size
        Description:The size of the Q.922 frame relay address in bytes. Choose one of: 2,3,4
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: DLCI_SIZE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_SIZE_CMD : range})

    def traffic_config_dlci_value(self, numeric):
        """
        This is the method the command: traffic_config option dlci_value
        Description:Data Link Connection Identifier value. Depending on the
            traffic_generator value, this option has different ixos - Valid range is
            0-65535ixnetwork/ixnetwork_540 - Valid range is 0-4294967295. The option
            can only be used for L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: DLCI_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DLCI_VALUE_CMD : numeric})

    def traffic_config_duration(self, numeric):
        """
        This is the method the command: traffic_config option duration
        Description:This parameter is available withtraffic_generator ixnetwork_540 - The
            parameter should be used only when tx_mode has been configured as
            interleaved. Along with this parameter you can also set tx_delay and
            tx_delay_unit. You can also use ::::traffic_control to set the duration
            for all traffic items. The parameter transmit_mode should not be
            specified along with duration parameter (duration parameter implies
            fixed duration traffic mode).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DURATION_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DURATION_CMD : numeric})

    def traffic_config_dynamic_update_fields(self, opt):
        """
        This is the method the command: traffic_config option dynamic_update_fields
        Description:ppp - enables dynamic update of PPP header fields for the respective
            traffic itemmpls_label_value - enables dynamic update of MPLS label
            values for the respective traffic item. This is the same functionality
            provided by parameter enable_dynamic_mpls_labels. Adding
            dynamic_update_field parameter when creating/modifying a traffic item
            the allows IxNetwork to update the corresponding traffic packet fields
            on the fly with the information learned from protocols. This parameter
            can be provided with ppp value, mpls_label_value value or both {ppp
            mpls_label_value} as a list.If this parameter is provided with
            mpls_label_value only, the session aware traffic fields will be
            automatically unset.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: DYNAMIC_UPDATE_FIELDS_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.DYNAMIC_UPDATE_FIELDS_CMD : opt})

    def traffic_config_egress_custom_field_offset(self, any):
        """
        This is the method the command: traffic_config option egress_custom_field_offset
        Description:Can be a list of egress tracking field offsets, or 'NA' strings in case
            it is not defined for the corresponding -egress_tracking element. Valid
            only for traffic_generator ixnetwork/ixnetwork_540 and if the
            corresponding -egress_tracking element is set to 'custom_by_field'.The
            entire list of available egress tracking field offsets for a traffic
            item can be obtained by calling the traffic_config procedure with mode
            'get_available_egress_tracking_field_offset.'
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: EGRESS_CUSTOM_FIELD_OFFSET_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EGRESS_CUSTOM_FIELD_OFFSET_CMD : any})

    def traffic_config_egress_custom_offset(self, opt):
        """
        This is the method the command: traffic_config option egress_custom_offset
        Description:Can be a list of positive integer values, or 'NA' strings in case it is
            not definedfor the corresponding -egress_tracking element. Valid only
            for traffic_generator ixnetwork/ixnetwork_540 and if the corresponding
            -egress_tracking element is set to 'custom'. Configure the offset in
            bits from the beginning of the packet.
            DEFAULT

            NA
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: EGRESS_CUSTOM_OFFSET_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EGRESS_CUSTOM_OFFSET_CMD : opt})

    def traffic_config_egress_custom_width(self, opt):
        """
        This is the method the command: traffic_config option egress_custom_width
        Description:Can be a list of numbers, or 'NA' string in case it is not defined for
            the corresponding -egress_tracking element. Valid only for
            traffic_generator ixnework/ixnetwork_540 and if the corresponding
            -egress_tracking element is set to 'custom'. The maximum number that can
            be set depends on the card type that is used. If you specify a higher
            number than supported, IxNetwork will set the value to the highest
            number supported. Configure the number of bits that will be tracked on
            the egress side of the traffic.
            DEFAULT

            NA
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: EGRESS_CUSTOM_WIDTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EGRESS_CUSTOM_WIDTH_CMD : opt})

    def traffic_config_egress_tracking(self, opt):
        """
        This is the method the command: traffic_config option egress_tracking
        Description:Configures one or multiple egress tracking items. Egress tracking cannot
            be configured if no tracking was configured with -track_by parameter.
            Can be a list of one or multiple elements.
            Valid options are:
            Not defined
            dscp

            Enable egress tracking on this traffic item. The egress tracking offset will
            ipv6TC

            Enable egress tracking on this traffic item. The egress tracking offset will
            mplsExp

            Enable egress tracking on this traffic item. The egress tracking offset will
            custom

            Enable egress tracking on this traffic item. The egress tracking offset will
            custom_by_field

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_priority

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_id_4

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_id_6

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_id_8

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_id_10

            Enable egress tracking on this traffic item. The egress tracking offset will
            outer_vlan_id_12

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_priority

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_id_4

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_id_6

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_id_8

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_id_10

            Enable egress tracking on this traffic item. The egress tracking offset will
            inner_vlan_id_12

            Enable egress tracking on this traffic item. The egress tracking offset will
            tos_precedence

            Enable egress tracking on this traffic item. The egress tracking offset will
            ipv6TC_bits_0_2

            Enable egress tracking on this traffic item. The egress tracking offset will
            ipv6TC_bits_0_5

            Enable egress tracking on this traffic item. The egress tracking offset will
            vnTag_direction_bit

            Enable egress tracking on this traffic item. The egress tracking offset will
            vnTag_pointer_bit

            Enable egress tracking on this traffic item. The egress tracking offset will
            vnTag_looped_bit

            Enable egress tracking on this traffic item. The egress tracking offset will
            DEFAULT

            none
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: EGRESS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EGRESS_TRACKING_CMD : opt})

    def traffic_config_egress_tracking_encap(self, opt):
        """
        This is the method the command: traffic_config option egress_tracking_encap
        Description:Configures the encapsulations used for the egress_tracking
            elements.Valid only for traffic_generator ixnetwork/ixnetwork_540 and
            egress_tracking not void.For each card type there is a default value
            defined:- if the card is ATM the default is 'LLCRoutedCLIP'- if the card
            is POS the default is 'pos_hdlc'- otherwise, the default value is
            'ethernet'It can be a list of one or more of the following valid
            options:customethernetLLCRoutedCLIPLLCPPPoALLCBridgedEthernetFCSLLCBridgedEthernetNoFCSVccMuxPPPoAVccMuxIPV4RoutedVccMuxBridgedEthernetFCSVccMuxBridgedEthernetNoFCSpos_ppppos_hdlcframe_relay1490frame_relay2427frame_relay_cisco
            DEFAULT

            ethernet
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: EGRESS_TRACKING_ENCAP_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EGRESS_TRACKING_ENCAP_CMD : opt})

    def traffic_config_emulation_dst_vlan_protocol_tag_id(self, any):
        """
        This is the method the command: traffic_config option emulation_dst_vlan_protocol_tag_id
        Description:The protocol ID field of the VLAN tag. It can be any 4 digit hex number.
            Example: 8100, 9100, 9200. For stacked VLAN (QinQ) this parameter will
            be provided as a list of values, each of them representing the protocol
            ID field of the VLAN tagExample: {8100 9100 9200 9100}This parameter
            should be used when configuring ixos traffic over PPP sessions. Valid
            only for traffic_generator ixos and if emulation_dst_handle is present.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: EMULATION_DST_VLAN_PROTOCOL_TAG_ID_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_DST_VLAN_PROTOCOL_TAG_ID_CMD : any})

    def traffic_config_emulation_multicast_dst_handle(self):
        """
        This is the method the command: traffic_config option emulation_multicast_dst_handle
        Description:A list of multicast destination handles in the address/step/count format
            or one of the following special keywords: all_multicast_ranges (this
            mean all multicast ranges will be used as a destination), none or an
            empty list (this means no multicast destination will be used for the
            current endpoint). The number of elements in this list needs to match
            the number of endpoints.
            If l3_protocol type is ipv4 then igmp multicast destination will be used
            (example: 224.0.0.0/0.0.0.1/1).
            If the l3_protocol type is ipv6 then mld destination will be used
            (example: 224:0:0:0:0:0:0:0/0:0:0:0:0:0:1:0/1).
            Sample value for an igmp traffic item with 3 endpoints: [list [list
            224.0.0.0/0.0.0.1/1 225.0.0.0/0.0.0.1/1] none all_multicast_ranges].
            In the above example endpointset 1 has 2 multicast destinations:
            224.0.0.0/0.0.0.1/1 and 225.0.0.0/0.0.0.1/1, endpointset 2 has no
            multicast destination and endpointset3 has all the multicast
            destinations available in the IGMP host protocol.
            Sample value for an ipv6 mld traffic item with 2 endpoints: [list
            226:0:0:0:0:0:0:0/0:0:0:0:0:0:1:0/1 224:0:0:0:0:0:0:0/0:0:0:0:0:0:1:0/1].
            In the above example each endpoint has only one mld destination.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_DST_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_DST_HANDLE_CMD : ""})

    def traffic_config_emulation_multicast_dst_handle_type(self):
        """
        This is the method the command: traffic_config option emulation_multicast_dst_handle_type
        Description:A list of multicast destination handles types. Valid values can be:
            none, igmp, mld.
            The number of elements in this list needs to match the number of
            endpoints and emulation_multicast_dst_handle. When
            emulation_multicast_dst_handle is 'all_multicast_ranges' the type is
            ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_DST_HANDLE_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_DST_HANDLE_TYPE_CMD : ""})

    def traffic_config_emulation_multicast_rcvr_handle(self, any):
        """
        This is the method the command: traffic_config option emulation_multicast_rcvr_handle
        Description:A list of virtual multicast receivers. Each list item consists of a
            multicast receiver object reference.
            Sample value for pim multicast traffic:
            '/topology:2/deviceGroup:1/ethernet:1/ipv4:1/pimV4Interface:1/pimV4JoinPruneList'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_RCVR_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_RCVR_HANDLE_CMD : any})

    def traffic_config_emulation_multicast_rcvr_host_index(self, numeric):
        """
        This is the method the command: traffic_config option emulation_multicast_rcvr_host_index
        Description:A list of virtual multicast receiver host indexes.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_RCVR_HOST_INDEX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_RCVR_HOST_INDEX_CMD : numeric})

    def traffic_config_emulation_multicast_rcvr_mcast_index(self, numeric):
        """
        This is the method the command: traffic_config option emulation_multicast_rcvr_mcast_index
        Description:A list of virtual multicast receiver group or join/prune indexes
            depending on the type of object refecence given in
            emulation_multicast_rcvr_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_RCVR_MCAST_INDEX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_RCVR_MCAST_INDEX_CMD : numeric})

    def traffic_config_emulation_multicast_rcvr_port_index(self, numeric):
        """
        This is the method the command: traffic_config option emulation_multicast_rcvr_port_index
        Description:A list of virtual multicast receiver port indexes.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: EMULATION_MULTICAST_RCVR_PORT_INDEX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_MULTICAST_RCVR_PORT_INDEX_CMD : numeric})

    def traffic_config_emulation_override_ppp_ip_addr(self, opt):
        """
        This is the method the command: traffic_config option emulation_override_ppp_ip_addr
        Description:This parameter should be used when configuring ixos traffic over PPP
            sessions in order to override the IP address distributed through PPP
            with the address provided through ip_src_addr. Valid only for
            traffic_generator ixos/ixnetwork_540 and if emulation_src_handle or
            emulation_dst_handle is present. With traffic_generator ixnetwork_540
            any value (except none) will have the same efect as '-convert_to_raw'
            and any field from the packet can be modified.
            Valid options are:
            upstream

            when setting this option, the PPP IP address will be overridden in the
            stream going from the access port (where the PPP emulation is
            configured) to the network port (the IP port)
            downstream

            when setting this option, the PPP IP address will be overridden in the
            stream going from the network port (the IP port) to the access port
            (where the PPP emulation is configured)
            both

            when setting this option, the PPP IP address will be overridden at both
            ends if the traffic is bidirectional, or at the corresponding end if the
            traffic is unidirectional.
            none

            the PPP IP address will be used when configuring the streams.
            DEFAULT

            none
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: EMULATION_OVERRIDE_PPP_IP_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_OVERRIDE_PPP_IP_ADDR_CMD : opt})

    def traffic_config_emulation_scalable_dst_handle(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_dst_handle
        Description:An array which contains lists of handles used to retrieve information
            for L3dst addresses, indexed by the endpointset to which they
            correspond. This should be a handle that was obtained after configuring
            protocols with commands from the ::ixiangpf:: namespace. This parameter
            can be used in conjunction with emulation_dst_handle. In the case where
            NGPF handles are specified in the emulation_dst_handle parameter (legacy
            backwards compatibility scenario), this parameter should not be used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_DST_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_DST_HANDLE_CMD : any})

    def traffic_config_emulation_scalable_dst_intf_count(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_dst_intf_count
        Description:An array which contains lists of numbers that encode the number of
            interfaceson which the corresponding endpointset will be configured.This
            parameter will be ignored if no corresponding value is specified for
            emulation_scalable_dst_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_DST_INTF_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_DST_INTF_COUNT_CMD : any})

    def traffic_config_emulation_scalable_dst_intf_start(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_dst_intf_start
        Description:An array which contains lists of numbers that encode the index of the
            firstinterface on which the corresponding endpointset will be
            configured.This parameter will be ignored if no corresponding value is
            specified for emulation_scalable_dst_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_DST_INTF_START_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_DST_INTF_START_CMD : any})

    def traffic_config_emulation_scalable_dst_port_count(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_dst_port_count
        Description:An array which contains lists of numbers that encode the number of ports
            onwhich the corresponding endpointset will be configured.This parameter
            will be ignored if no corresponding value is specified for
            emulation_scalable_dst_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_DST_PORT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_DST_PORT_COUNT_CMD : any})

    def traffic_config_emulation_scalable_dst_port_start(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_dst_port_start
        Description:An array which contains lists of numbers that encode the index of the
            firstport on which the corresponding endpointset will be configured.This
            parameter will be ignored if no corresponding value is specified for
            emulation_scalable_dst_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_DST_PORT_START_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_DST_PORT_START_CMD : any})

    def traffic_config_emulation_scalable_src_handle(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_src_handle
        Description:An array which contains lists of handles used to retrieve information
            for L3dst addresses, indexed by the endpointset to which they
            correspond. This should be a handle that was obtained after configuring
            protocols with commands from the ::ixiangpf:: namespace. This parameter
            can be used in conjunction with emulation_src_handle. In the case where
            NGPF handles are specified in the emulation_src_handle parameter (legacy
            backwards compatibility scenario), this parameter should not be used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_SRC_HANDLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_SRC_HANDLE_CMD : any})

    def traffic_config_emulation_scalable_src_intf_count(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_src_intf_count
        Description:An array which contains lists of numbers that encode the number of
            interfaceson which the corresponding endpointset will be configured.This
            parameter will be ignored if no corresponding value is specified for
            emulation_scalable_src_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_SRC_INTF_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_SRC_INTF_COUNT_CMD : any})

    def traffic_config_emulation_scalable_src_intf_start(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_src_intf_start
        Description:An array which contains lists of numbers that encode the index of the
            firstinterface on which the corresponding endpointset will be
            configured.This parameter will be ignored if no corresponding value is
            specified for emulation_scalable_src_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_SRC_INTF_START_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_SRC_INTF_START_CMD : any})

    def traffic_config_emulation_scalable_src_port_count(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_src_port_count
        Description:An array which contains lists of numbers that encode the number of ports
            onwhich the corresponding endpointset will be configured.This parameter
            will be ignored if no corresponding value is specified for
            emulation_scalable_src_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_SRC_PORT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_SRC_PORT_COUNT_CMD : any})

    def traffic_config_emulation_scalable_src_port_start(self, any):
        """
        This is the method the command: traffic_config option emulation_scalable_src_port_start
        Description:An array which contains lists of numbers that encode the index of the
            firstport on which the corresponding endpointset will be configured.This
            parameter will be ignored if no corresponding value is specified for
            emulation_scalable_src_handle.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: EMULATION_SCALABLE_SRC_PORT_START_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SCALABLE_SRC_PORT_START_CMD : any})

    def traffic_config_emulation_src_vlan_protocol_tag_id(self, any):
        """
        This is the method the command: traffic_config option emulation_src_vlan_protocol_tag_id
        Description:The protocol ID field of the VLAN tag. It can be any 4 digit hex number.
            Example: 8100, 9100, 9200. For stacked VLAN (QinQ) this parameter will
            be provided as a list of values, each of them representing the protocol
            ID field of the VLAN tagExample: {8100 9100 9200 9100}This parameter
            should be used when configuring ixos traffic over PPP sessions. Valid
            only for traffic_generator ixos and if emulation_src_handle is present.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: EMULATION_SRC_VLAN_PROTOCOL_TAG_ID_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.EMULATION_SRC_VLAN_PROTOCOL_TAG_ID_CMD : any})

    def traffic_config_enable_auto_detect_instrumentation(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_auto_detect_instrumentation
        Description:Enables/disable setup of PGID/SequenceCkecking/DataIntegrity without
            having to specify the offset for the signatures, but just the signature
            values.With this option enabled the packet size will be increased as
            follows:12 bytes - signature (mandatory)4 bytes - pgid_value(mandatory)
            and data integrity(optional)4 bytes - sequencing(optional)2 bytes - data
            integrity checksum(optional)6 bytes - timestamp(mandatory)This is a
            total of 28 bytes if data integrity and sequence checking are enabled.
            By default, all the following parameters will be enabled, when
            enable_auto_detect_instrumentation is enabled:enable_time_stamp,
            enable_pgid, sequence_checking, enable_data_integrity.Starting with IxOS
            5.10, timestamp, PGID, Sequencing, Data Integrity, are all optional, and
            can be disabled by using their corresponding parameters for enable/disable.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ENABLE_AUTO_DETECT_INSTRUMENTATION_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_AUTO_DETECT_INSTRUMENTATION_CMD : bool_opt})

    def traffic_config_enable_ce_to_pe_traffic(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_ce_to_pe_traffic
        Description:Enables sending traffic from PE to CE in MPLS setups.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: ENABLE_CE_TO_PE_TRAFFIC_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_CE_TO_PE_TRAFFIC_CMD : bool_opt})

    def traffic_config_enable_data_integrity(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_data_integrity
        Description:Whether data integrity checking is enabled. With traffic_generator
            ixnetwork_540 this parameter applies globally, not per traffic_item. 0 -
            Disabled.1 - Enabled.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_DATA_INTEGRITY_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_DATA_INTEGRITY_CMD : bool_opt})

    def traffic_config_enable_dynamic_mpls_labels(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_dynamic_mpls_labels
        Description:Whether dynamic MPLS label binding is enabled or not. 0 - Disabled.1 -
            Enabled. This is the same functionality provided by parameter
            -dynamic_update_field with the following value: mpls_label_value.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ENABLE_DYNAMIC_MPLS_LABELS_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_DYNAMIC_MPLS_LABELS_CMD : bool_opt})

    def traffic_config_enable_override_value(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_override_value
        Description:This argument can be used to specify if the custom-defined values will
            be added to the packets for tracking on the receiving side.Valid only
            for traffic_generator ixnetwork and with the assured_forwarding_phb,
            class_selector_phb, default_phb, expedited_forwarding_phb, tos,
            raw_priority or inner_vlan choices of the -track_by argument.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: ENABLE_OVERRIDE_VALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_OVERRIDE_VALUE_CMD : bool_opt})

    def traffic_config_enable_pgid(self, opt):
        """
        This is the method the command: traffic_config option enable_pgid
        Description:Enables or disables packet groups IDs in the stream. The packet group offset will be calculated automatically.DEFAULT = 1
        Constants Available: ENABLE_PGID_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_PGID_CMD : opt})

    def traffic_config_enable_test_objective(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_test_objective
        Description:This argument can be used to enable the overriding of the default
            objective value of the application traffic profile.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ENABLE_TEST_OBJECTIVE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_TEST_OBJECTIVE_CMD : bool_opt})

    def traffic_config_enable_time_stamp(self, bool_opt):
        """
        This is the method the command: traffic_config option enable_time_stamp
        Description:Whether time stamp insertion is enabled.
            Valid options are:
            0

            Disabled
            1

            Enabled
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: ENABLE_TIME_STAMP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_TIME_STAMP_CMD : bool_opt})

    def traffic_config_enable_udf1(self):
        """
        This is the method the command: traffic_config option enable_udf1
        Description:If this option is set to true (1), then the UDF 1 counter will be
            inserted into the frame. If traffic_generator is ixnetwork_540,
            circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_UDF1_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_UDF1_CMD : ""})

    def traffic_config_enable_udf2(self):
        """
        This is the method the command: traffic_config option enable_udf2
        Description:See description for this item as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_UDF2_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_UDF2_CMD : ""})

    def traffic_config_enable_udf3(self):
        """
        This is the method the command: traffic_config option enable_udf3
        Description:See description for this item as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_UDF3_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_UDF3_CMD : ""})

    def traffic_config_enable_udf4(self):
        """
        This is the method the command: traffic_config option enable_udf4
        Description:See description for this item as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_UDF4_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_UDF4_CMD : ""})

    def traffic_config_enable_udf5(self):
        """
        This is the method the command: traffic_config option enable_udf5
        Description:See description for this item as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ENABLE_UDF5_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENABLE_UDF5_CMD : ""})

    def traffic_config_endpointset_count(self, numeric):
        """
        This is the method the command: traffic_config option endpointset_count
        Description:The number of endpointset to be created. The parameters
            -emulation_src_handle and -emulation_dst_handle should be provided with
            a number of list elements equal to endpointset_count.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ENDPOINTSET_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENDPOINTSET_COUNT_CMD : numeric})

    def traffic_config_enforce_min_gap(self, numeric):
        """
        This is the method the command: traffic_config option enforce_min_gap
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . This argument can be used to specify
            the smallest inter-packet gap that will be allowed.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: ENFORCE_MIN_GAP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ENFORCE_MIN_GAP_CMD : numeric})

    def traffic_config_ethernet_type(self, opt):
        """
        This is the method the command: traffic_config option ethernet_type
        Description:For ethernet ports only, the ethernet encapsulation type. Valid choices are:
            Valid options are:
            ethernetII: Ethernet encapsulation at EthernetII.
            ieee8023snap: Ethernet encapsulation at ieee8023snap.
            ieee8023: Ethernet encapsulation at ieee8023.
            ieee8022: Ethernet encapsulation at ieee8022.
        Constants Available: ETHERNET_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_TYPE_CMD : opt})

    def traffic_config_ethernet_value(self, value):
        """
        This is the method the command: traffic_config option ethernet_value
        Description:For ethernet ports with the ethernet encapsulation type ethernetII, a hex value can be specified as the Ethernet Type value.
        Constants Available: ETHERNET_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        value --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_VALUE_CMD : value})

    def traffic_config_ethernet_value_count(self, numeric):
        """
        This is the method the command: traffic_config option ethernet_value_count
        Description:Numeric value which configures the number of times the ethernet_value is
            incremeneted or decremented when ethernet_value_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ETHERNET_VALUE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_VALUE_COUNT_CMD : numeric})

    def traffic_config_ethernet_value_mode(self, opt):
        """
        This is the method the command: traffic_config option ethernet_value_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with ethernet_value_step and
            ethernet_value_count.
            decr

            the value is decremented as specified with ethernet_value_step and
            ethernet_value_count.
            list

            Parameter -ethernet_value contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ETHERNET_VALUE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_VALUE_MODE_CMD : opt})

    def traffic_config_ethernet_value_step(self, hexdefault0x01):
        """
        This is the method the command: traffic_config option ethernet_value_step
        Description:Hex step value used to modify ethernet_value when ethernet_value_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ETHERNET_VALUE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hexdefault0x01 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_VALUE_STEP_CMD : hexdefault0x01})

    def traffic_config_ethernet_value_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ethernet_value_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by ethernet_value
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ETHERNET_VALUE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ETHERNET_VALUE_TRACKING_CMD : bool_opt})

    def traffic_config_fcs_type(self, opt):
        """
        This is the method the command: traffic_config option fcs_type
        Description:The FCS error to be inserted in the frame. Valid only for
            traffic_generator ixos/ixnetwork/ixnetwork_540 and when -fcs is 1. Valid
            choices with traffic_generator ixos are: alignment An alignment error to
            be inserted in the frame (only valid for 10/100).dribble A dribble error
            to be inserted in the frame.bad_CRC A bad FCS error to be inserted in
            the frame.no_CRC No FCS error to be inserted in the frame.Valid choices
            with traffic_generator ixnetwork are:bad_CRC A bad FCS error to be
            inserted in the frame.no_CRC No FCS error to be inserted in the
            frame.Valid choices with traffic_generator ixnetwork_540 are:bad_CRC A
            bad FCS error to be inserted in the frame.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: FCS_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FCS_TYPE_CMD : opt})

    def traffic_config_fecn(self, flag):
        """
        This is the method the command: traffic_config option fecn
        Description:Forward Explicit Congestion Notification.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: FECN_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FECN_CMD : flag})

    def traffic_config_field_activeFieldChoice(self, bool_opt):
        """
        This is the method the command: traffic_config option field_activeFieldChoice
        Description:Determines the involvement of the field in the current active
            configuration. It is considered only if fieldchoice is true and can be
            used to pick and choose certain parameters, for example between diff
            services and ToS.Field attribute available for set when mode is
            'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_ACTIVEFIELDCHOICE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_ACTIVEFIELDCHOICE_CMD : bool_opt})

    def traffic_config_field_auto(self, bool_opt):
        """
        This is the method the command: traffic_config option field_auto
        Description:Determines the automatic population of the field when chaining with
            other fields where possible.Field attribute available for set when mode
            is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_AUTO_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_AUTO_CMD : bool_opt})

    def traffic_config_field_countValue(self, any):
        """
        This is the method the command: traffic_config option field_countValue
        Description:Sets the number of steps for the incremental value types.Field attribute
            available for set when mode is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_COUNTVALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_COUNTVALUE_CMD : any})

    def traffic_config_field_fieldValue(self, any):
        """
        This is the method the command: traffic_config option field_fieldValue
        Description:The actual value of the field (which depends on the value type and the
            indicated value).Field attribute available for set when mode is
            'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_FIELDVALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_FIELDVALUE_CMD : any})

    def traffic_config_field_fullMesh(self, bool_opt):
        """
        This is the method the command: traffic_config option field_fullMesh
        Description:Describes the behavior of the field in relation with other fields giving
            all combinations of values.Field attribute available for set when mode
            is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_FULLMESH_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_FULLMESH_CMD : bool_opt})

    def traffic_config_field_handle(self):
        """
        This is the method the command: traffic_config option field_handle
        Description:Provides the field name (stack object fields) on which specific
            operations are made. It is obtained when mode is 'get_available_fields'.
            Valid when mode is 'get_field_values', 'set_field_values',
            'add_field_level' or 'remove_field_level'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_HANDLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_HANDLE_CMD : ""})

    def traffic_config_field_linked(self, any):
        """
        This is the method the command: traffic_config option field_linked
        Description:This parameter is used as the source field linked. In order for the
            stack provided to this parameter to be valid for linking, you must set
            increment/decrement/list mode for this field. Valid only for IxNetwork
            greater than 7.0.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_LINKED_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_LINKED_CMD : any})

    def traffic_config_field_linked_to(self, any):
        """
        This is the method the command: traffic_config option field_linked_to
        Description:This parameter is used as the destination field linked. In order for the
            stack provided to this parameter to be valid for linking, you must set
            increment/decrement/list mode for this field. Valid only for IxNetwork
            greater than 7.0.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_LINKED_TO_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_LINKED_TO_CMD : any})

    def traffic_config_field_optionalEnabled(self, bool_opt):
        """
        This is the method the command: traffic_config option field_optionalEnabled
        Description:Field attribute available for set when mode is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_OPTIONALENABLED_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_OPTIONALENABLED_CMD : bool_opt})

    def traffic_config_field_singleValue(self, any):
        """
        This is the method the command: traffic_config option field_singleValue
        Description:Controls the value of the field when field_valueType is
            'singleValue'.Field attribute available for set when mode is
            'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_SINGLEVALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_SINGLEVALUE_CMD : any})

    def traffic_config_field_startValue(self, any):
        """
        This is the method the command: traffic_config option field_startValue
        Description:Controls the starting value of the field when field_valueType
            is'increment' or 'decrement'.Field attribute available for set when mode
            is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_STARTVALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_STARTVALUE_CMD : any})

    def traffic_config_field_stepValue(self, any):
        """
        This is the method the command: traffic_config option field_stepValue
        Description:Sets the step applied to field_startValue for incremental value
            types.Field attribute available for set when mode is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_STEPVALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_STEPVALUE_CMD : any})

    def traffic_config_field_trackingEnabled(self, bool_opt):
        """
        This is the method the command: traffic_config option field_trackingEnabled
        Description:Controls the tracking option for this item.Field attribute available for
            set when mode is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_TRACKINGENABLED_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_TRACKINGENABLED_CMD : bool_opt})

    def traffic_config_field_valueList(self, any):
        """
        This is the method the command: traffic_config option field_valueList
        Description:Sets multiple values for the current field when field_valueType is
            'valueList'.Field attribute available for set when mode is
            'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_VALUELIST_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_VALUELIST_CMD : any})

    def traffic_config_field_valueType(self, any):
        """
        This is the method the command: traffic_config option field_valueType
        Description:Indicates the type of this field. This parameter determines what value
            parameter will give the actual field value.Field attribute available for
            set when mode is 'set_field_values'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FIELD_VALUETYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FIELD_VALUETYPE_CMD : any})

    def traffic_config_frame_rate_distribution_port(self, opt):
        """
        This is the method the command: traffic_config option frame_rate_distribution_port
        Description:Configure how frame rate will be distributed.
            Valid options are:
            apply_to_all

            Apply rate to all ports.
            split_evenly

            Split rate evenly among ports.
            DEFAULT

            split_evenly
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FRAME_RATE_DISTRIBUTION_PORT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_RATE_DISTRIBUTION_PORT_CMD : opt})

    def traffic_config_frame_rate_distribution_stream(self, opt):
        """
        This is the method the command: traffic_config option frame_rate_distribution_stream
        Description:Configure how frame rate will be distributed.
            Valid options are:
            apply_to_all

            Apply rate to all flow groups.
            split_evenly

            Split rate evenly among flow groups.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FRAME_RATE_DISTRIBUTION_STREAM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_RATE_DISTRIBUTION_STREAM_CMD : opt})

    def traffic_config_frame_sequencing(self, opt):
        """
        This is the method the command: traffic_config option frame_sequencing
        Description:Inserts a sequence signature into the packet.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: FRAME_SEQUENCING_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SEQUENCING_CMD : opt})

    def traffic_config_frame_sequencing_mode(self, opt):
        """
        This is the method the command: traffic_config option frame_sequencing_mode
        Description:Valid options are: rx_switched_pathrx_switched_path_fixedrx_threshold
            advanced
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: FRAME_SEQUENCING_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SEQUENCING_MODE_CMD : opt})

    def traffic_config_frame_sequencing_offset(self):
        """
        This is the method the command: traffic_config option frame_sequencing_offset
        Description:The offset within the packet of the sequnce number. This is valid only
            when sequence checking is enabled. If
            -enable_auto_detect_instrumentation is 1, will be ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: FRAME_SEQUENCING_OFFSET_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SEQUENCING_OFFSET_CMD : ""})

    def traffic_config_frame_size(self, size):
        """
        This is the method the command: traffic_config option frame_size
        Description:This parameter can be updated while the traffic is running with -mode 'dynamic_update' and -stream_id . Actual total frame size coming out of the interface on the wire in is ignored if frame_size is present.
        Constants Available: FRAME_SIZE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        size --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_CMD : size})

    def traffic_config_frame_size_distribution(self, opt):
        """
        This is the method the command: traffic_config option frame_size_distribution
        Description:This argument can be used to specify the predefined distribution of the
            frames' length when length_mode = distribution. When IxTclNetwork path
            is used,this parameter is valid only for traffic_generator
            ixnetwork/ixnetwork_540, mode create/modify, and length_mode
            distribution. When IxTclProtocol path is used, this parameter is valid
            only when -length_mode is set to distribution. cisco A pre-programmed
            distribution, according to Cisco standards: 64:7, 594:4, and 1518:1.imix
            A pre-programmed distribution, according to IMIX standards: 64:7, 570:4,
            and 1518:1.quadmodal A pre-programmed distribution: 512:20, 1518:20, and
            9000:20.tolly A pre-programmed distribution, according to Tolly testing
            group standards: 64:55, 78:5, 576:17, and 1518:23.trimodal A
            pre-programmed distribution: 64:60, 512:20,and 1518:20.imix_ipsec A
            pre-programmed distribution: 90:58, 92:2, 594:23 and 1418:15. imix_ipv6
            A pre-programmed distribution: 60:58, 496:2, 594:23 and 1518:15. Valid
            only for traffic_generator ixnetwork_540.imix_std A pre-programmed
            distribution: 58:58, 62:2, 594:23, 1518:15. Valid only for
            traffic_generator ixnetwork_540.Valid only for traffic_generator
            ixnetwork_540.imix_tcp A pre-programmed distribution: 90:58, 92:2,
            594:23, 1518:15. Valid only for traffic_generator ixnetwork_540.Valid
            only for traffic_generator ixnetwork_540.
            DEFAULT

            cisco
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_DISTRIBUTION_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_DISTRIBUTION_CMD : opt})

    def traffic_config_frame_size_gauss(self, any):
        """
        This is the method the command: traffic_config option frame_size_gauss
        Description:This argument can be used to specify a list of maximum 4 options which
            describe a Quad Gauss distribution. The individual options which
            characterize the Quad Gauss distributions have the following structure:
            ::This argument has meaning only when mode is create/modify and
            length_mode is gass|quad and traffic_generator is ixnetwork/ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_GAUSS_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_GAUSS_CMD : any})

    def traffic_config_frame_size_imix(self, any):
        """
        This is the method the command: traffic_config option frame_size_imix
        Description:This argument can be used to specify a list of lists, which, each of
            them, describe a weight pair: :.This argument has meaning only when mode
            is create/modify and length_mode is imix and traffic_generator is
            ixnetwork/ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_IMIX_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_IMIX_CMD : any})

    def traffic_config_frame_size_max(self, range):
        """
        This is the method the command: traffic_config option frame_size_max
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Actual maximum total frame size coming
            out of the interface on the wire in bytes when option 'length_mode' is
            set to random. Valid choices are between 12 and 13312. Parameter
            l3_length_max is ignored if this parameter is used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_MAX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_MAX_CMD : range})

    def traffic_config_frame_size_min(self, range):
        """
        This is the method the command: traffic_config option frame_size_min
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Actual minimal total frame size coming
            out of the interface on the wire in bytes when option 'length_mode' is
            set to random. Valid choices are between 12 and 13312. Parameter
            l3_length_min is ignored if this parameter is used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_MIN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_MIN_CMD : range})

    def traffic_config_frame_size_step(self, range):
        """
        This is the method the command: traffic_config option frame_size_step
        Description:Actual increment by which the actual total frame size in bytes coming
            out of the interface on the wire will be incremented. Valid choices are
            between 0 and 13292. Parameter l3_length_step is ignored if this
            parameter is used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: FRAME_SIZE_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.FRAME_SIZE_STEP_CMD : range})

    def traffic_config_global_dest_mac_retry_count(self, range):
        """
        This is the method the command: traffic_config option global_dest_mac_retry_count
        Description:Configure the number of times to attempt to obtain the destination MAC
            address. This parameter applies globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_DEST_MAC_RETRY_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_DEST_MAC_RETRY_COUNT_CMD : range})

    def traffic_config_global_dest_mac_retry_delay(self, range):
        """
        This is the method the command: traffic_config option global_dest_mac_retry_delay
        Description:The number of seconds to wait between attempts to obtain the destination
            MAC address. This parameter applies globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_DEST_MAC_RETRY_DELAY_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_DEST_MAC_RETRY_DELAY_CMD : range})

    def traffic_config_global_display_mpls_current_label_value(self, bool_opt):
        """
        This is the method the command: traffic_config option global_display_mpls_current_label_value
        Description:Enable display MPLS current label value when tracking by MPLS flow
            descriptor. This parameter applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_DISPLAY_MPLS_CURRENT_LABEL_VALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_DISPLAY_MPLS_CURRENT_LABEL_VALUE_CMD : bool_opt})

    def traffic_config_global_enable_dest_mac_retry(self, bool_opt):
        """
        This is the method the command: traffic_config option global_enable_dest_mac_retry
        Description:Enables the destination MAC address retry function. This parameter
            applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_ENABLE_DEST_MAC_RETRY_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_ENABLE_DEST_MAC_RETRY_CMD : bool_opt})

    def traffic_config_global_enable_mac_change_on_fly(self, bool_opt):
        """
        This is the method the command: traffic_config option global_enable_mac_change_on_fly
        Description:When 1, enables IxNetwork's gratuitous ARP capability and IxNetwork
            listens for gratuitous ARP messages from its neighbors This parameter
            applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_ENABLE_MAC_CHANGE_ON_FLY_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_ENABLE_MAC_CHANGE_ON_FLY_CMD : bool_opt})

    def traffic_config_global_enable_min_frame_size(self, bool_opt):
        """
        This is the method the command: traffic_config option global_enable_min_frame_size
        Description:When this option is enabled, IxNetwork will allow the stream to use
            smaller packet sizes. In the case of IPv4 and Ethernet, 64 bytes will be
            allowed. This is achieved by reducing the size of the instrumentation
            tag, which will be identified by receiving ports. Please note, reducing
            the size of the instrumentation tag will increase the risk of mistaking
            it for user data at the receiving port. This parameter applies globally,
            not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_ENABLE_MIN_FRAME_SIZE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_ENABLE_MIN_FRAME_SIZE_CMD : bool_opt})

    def traffic_config_global_enable_staggered_transmit(self, bool_opt):
        """
        This is the method the command: traffic_config option global_enable_staggered_transmit
        Description:If 1, the start of transmit is staggered across ports. A 25-30 ms delay
            is introduced between the time one port begins transmitting and the time
            next port begins transmitting. This parameter applies globally, not per
            traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_ENABLE_STAGGERED_TRANSMIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_ENABLE_STAGGERED_TRANSMIT_CMD : bool_opt})

    def traffic_config_global_enable_stream_ordering(self, bool_opt):
        """
        This is the method the command: traffic_config option global_enable_stream_ordering
        Description:When this option is enabled, IxNetwork will allow stream ordering per
            RFC 2889. This parameter applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_ENABLE_STREAM_ORDERING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_ENABLE_STREAM_ORDERING_CMD : bool_opt})

    def traffic_config_global_frame_ordering(self, opt):
        """
        This is the method the command: traffic_config option global_frame_ordering
        Description:Frame ordering is done when data is transmitted as a sequence of frames
            in a network comprising multiple terminal stations. Each terminal has a
            provision for arranging the received messages in the order of reception
            of frames. Within each frame, the received messages are arranged in a
            predetermined order of frames received.
            Valid options are:
            none

            If you select this option, no specific ordering is followed when packets
            are transmitted.
            flow_group_setup

            The Ordering by Flow Group option under Traffic Options ordering
            arranges the Flow Groups across the ports, such that no destination
            value is encountered.
            rfc2889

            If you select this option, the frame ordering is done by RFC2889.
            peak_loading

            If you select this option, the frame ordering is done by Peak Loading -
            similar (but opposite) to rfc2889.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_FRAME_ORDERING_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_FRAME_ORDERING_CMD : opt})

    def traffic_config_global_large_error_threshhold(self, numeric):
        """
        This is the method the command: traffic_config option global_large_error_threshhold
        Description:The user-configurable threshold value - used to determine error levels
            for outof-sequence, received packets. This parameter applies globally,
            not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_LARGE_ERROR_THRESHHOLD_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_LARGE_ERROR_THRESHHOLD_CMD : numeric})

    def traffic_config_global_max_traffic_generation_queries(self, numeric):
        """
        This is the method the command: traffic_config option global_max_traffic_generation_queries
        Description:Maximum number of traffic generation queries. This parameter applies
            globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_MAX_TRAFFIC_GENERATION_QUERIES_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_MAX_TRAFFIC_GENERATION_QUERIES_CMD : numeric})

    def traffic_config_global_mpls_label_learning_timeout(self, numeric):
        """
        This is the method the command: traffic_config option global_mpls_label_learning_timeout
        Description:This parameter controls the timeout in seconds for the MPLS Label
            learning database during traffic generation. It helps to increase the
            timeout value, so that traffic generation does not time out and all
            packets are generated for this traffic item This parameter applies
            globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_MPLS_LABEL_LEARNING_TIMEOUT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_MPLS_LABEL_LEARNING_TIMEOUT_CMD : numeric})

    def traffic_config_global_peak_loading_replication_count(self, numeric):
        """
        This is the method the command: traffic_config option global_peak_loading_replication_count
        Description:Replication count for Peak Loading. This option is valid only if
            -global_frame_ordering is set to 'peak_loading'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'global_frame_ordering' | value= 'peak_loading' |
        Constants Available: GLOBAL_PEAK_LOADING_REPLICATION_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_PEAK_LOADING_REPLICATION_COUNT_CMD : numeric})

    def traffic_config_global_refresh_learned_info_before_apply(self, bool_opt):
        """
        This is the method the command: traffic_config option global_refresh_learned_info_before_apply
        Description:This attribute refreshes the learned information from the DUT. This
            parameter applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_REFRESH_LEARNED_INFO_BEFORE_APPLY_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_REFRESH_LEARNED_INFO_BEFORE_APPLY_CMD : bool_opt})

    def traffic_config_global_stream_control(self, opt):
        """
        This is the method the command: traffic_config option global_stream_control
        Description:This parameter applies globally, not per traffic item.
            Valid options are:
            continuous

            continuous
            iterations

            iterations
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_STREAM_CONTROL_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_STREAM_CONTROL_CMD : opt})

    def traffic_config_global_stream_control_iterations(self, range):
        """
        This is the method the command: traffic_config option global_stream_control_iterations
        Description:This parameter applies globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_STREAM_CONTROL_ITERATIONS_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_STREAM_CONTROL_ITERATIONS_CMD : range})

    def traffic_config_global_use_tx_rx_sync(self, bool_opt):
        """
        This is the method the command: traffic_config option global_use_tx_rx_sync
        Description:Synchronize Tx/Rx traffic ports. Disable this option when using multiple
            chassis without sync cable (including GPS chassis chain). This parameter
            applies globally, not per traffic item.
            Valid options are:
            0

            disable
            1

            enable
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_USE_TX_RX_SYNC_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_USE_TX_RX_SYNC_CMD : bool_opt})

    def traffic_config_global_wait_time(self, range):
        """
        This is the method the command: traffic_config option global_wait_time
        Description:The time (in seconds) to wait after Stop Transmit before stopping
            Latency Measurement. This parameter applies globally, not per traffic item.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: GLOBAL_WAIT_TIME_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GLOBAL_WAIT_TIME_CMD : range})

    def traffic_config_gre_checksum(self, hexhex):
        """
        This is the method the command: traffic_config option gre_checksum
        Description:Specify checksum for the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_CMD : hexhex})

    def traffic_config_gre_checksum_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_checksum_count
        Description:Numeric value which configures the number of times the gre_checksum is
            incremeneted or decremented when gre_checksum_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_COUNT_CMD : numeric})

    def traffic_config_gre_checksum_enable(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_checksum_enable
        Description:Enable checksum for the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_ENABLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_ENABLE_CMD : bool_opt})

    def traffic_config_gre_checksum_enable_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_checksum_enable_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -gre_checksum_enable contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_ENABLE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_ENABLE_MODE_CMD : opt})

    def traffic_config_gre_checksum_enable_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_checksum_enable_tracking
        Description:Enables or disables tracking by gre.
            Valid options are:
            0

            disable tracking by gre_checksum_enable
            1

            enable tracking by gre_checksum_enable
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_ENABLE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_ENABLE_TRACKING_CMD : bool_opt})

    def traffic_config_gre_checksum_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_checksum_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_checksum_step and
            gre_checksum_count.
            decr

            the value is decremented as specified with gre_checksum_step and
            gre_checksum_count.
            list

            Parameter -gre_checksum contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_MODE_CMD : opt})

    def traffic_config_gre_checksum_step(self, any):
        """
        This is the method the command: traffic_config option gre_checksum_step
        Description:Step value used to modify gre_checksum when gre_checksum_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_STEP_CMD : any})

    def traffic_config_gre_checksum_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_checksum_tracking
        Description:Enables or disables tracking by gre_checksum.
            Valid options are:
            0

            disable tracking by gre_checksum
            1

            enable tracking by gre_checksum
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_CHECKSUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_CHECKSUM_TRACKING_CMD : bool_opt})

    def traffic_config_gre_key(self, hexhex):
        """
        This is the method the command: traffic_config option gre_key
        Description:Specify the key for the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_CMD : hexhex})

    def traffic_config_gre_key_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_key_count
        Description:Numeric value which configures the number of times the gre_key is
            incremeneted or decremented when gre_key_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_COUNT_CMD : numeric})

    def traffic_config_gre_key_enable(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_key_enable
        Description:Enable key for the the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_ENABLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_ENABLE_CMD : bool_opt})

    def traffic_config_gre_key_enable_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_key_enable_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -gre_key_enable contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_ENABLE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_ENABLE_MODE_CMD : opt})

    def traffic_config_gre_key_enable_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_key_enable_tracking
        Description:Enables or disables gre_key_enable_tracking.
            Valid options are:
            0

            disable tracking by gre_key_enable
            1

            enable tracking by gre_key_enable
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_ENABLE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_ENABLE_TRACKING_CMD : bool_opt})

    def traffic_config_gre_key_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_key_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_key_step and gre_key_count.
            decr

            the value is decremented as specified with gre_key_step and gre_key_count.
            list

            Parameter -gre_key contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_MODE_CMD : opt})

    def traffic_config_gre_key_step(self, any):
        """
        This is the method the command: traffic_config option gre_key_step
        Description:Step value used to modify gre_key when gre_key_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_STEP_CMD : any})

    def traffic_config_gre_key_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_key_tracking
        Description:Enables or disables by gre_key_tracking.
            Valid options are:
            0

            disable tracking by gre_key
            1

            enable tracking by gre_key
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_KEY_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_KEY_TRACKING_CMD : bool_opt})

    def traffic_config_gre_reserved0(self, hexhex):
        """
        This is the method the command: traffic_config option gre_reserved0
        Description:Specify first reserved field of the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED0_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED0_CMD : hexhex})

    def traffic_config_gre_reserved0_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_reserved0_count
        Description:Numeric value which configures the number of times the gre_reserved0 is
            incremeneted or decremented when gre_reserved0_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED0_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED0_COUNT_CMD : numeric})

    def traffic_config_gre_reserved0_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_reserved0_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_reserved0_step and
            gre_reserved0_count.
            decr

            the value is decremented as specified with gre_reserved0_step and
            gre_reserved0_count.
            list

            Parameter -gre_reserved0 contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED0_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED0_MODE_CMD : opt})

    def traffic_config_gre_reserved0_step(self, any):
        """
        This is the method the command: traffic_config option gre_reserved0_step
        Description:Step value used to modify gre_reserved0 when gre_reserved0_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED0_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED0_STEP_CMD : any})

    def traffic_config_gre_reserved0_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_reserved0_tracking
        Description:Enables or disables tracking by gre_reserved0_tracking.
            Valid options are:
            0

            disable tracking by gre_reserved0
            1

            enable tracking by gre_reserved0
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED0_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED0_TRACKING_CMD : bool_opt})

    def traffic_config_gre_reserved1(self, hexhex):
        """
        This is the method the command: traffic_config option gre_reserved1
        Description:Specify second reserved field of the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED1_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED1_CMD : hexhex})

    def traffic_config_gre_reserved1_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_reserved1_count
        Description:Numeric value which configures the number of times the gre_reserved1 is
            incremeneted or decremented when gre_reserved1_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED1_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED1_COUNT_CMD : numeric})

    def traffic_config_gre_reserved1_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_reserved1_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_reserved1_step and
            gre_reserved1_count.
            decr

            the value is decremented as specified with gre_reserved1_step and
            gre_reserved1_count.
            list

            Parameter -gre_reserved1 contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED1_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED1_MODE_CMD : opt})

    def traffic_config_gre_reserved1_step(self, any):
        """
        This is the method the command: traffic_config option gre_reserved1_step
        Description:Step value used to modify gre_reserved1 when gre_reserved1_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED1_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED1_STEP_CMD : any})

    def traffic_config_gre_reserved1_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_reserved1_tracking
        Description:Enables or disables tracking by gre_reserved1_tracking.
            Valid options are:
            0

            disable tracking by gre_reserved1
            1

            enable tracking by gre_reserved1
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_RESERVED1_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_RESERVED1_TRACKING_CMD : bool_opt})

    def traffic_config_gre_seq_enable(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_seq_enable
        Description:Enable sequence checking for the the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_ENABLE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_ENABLE_CMD : bool_opt})

    def traffic_config_gre_seq_enable_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_seq_enable_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -gre_seq_enable contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_ENABLE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_ENABLE_MODE_CMD : opt})

    def traffic_config_gre_seq_enable_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_seq_enable_tracking
        Description:Enables or disables tracking by gre_seq_enable_tracking.
            Valid options are:
            0

            disable tracking by gre_seq_enable
            1

            enable tracking by gre_seq_enable
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_ENABLE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_ENABLE_TRACKING_CMD : bool_opt})

    def traffic_config_gre_seq_number(self, hexhex):
        """
        This is the method the command: traffic_config option gre_seq_number
        Description:Specify the sequence number for the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_NUMBER_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_NUMBER_CMD : hexhex})

    def traffic_config_gre_seq_number_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_seq_number_count
        Description:Numeric value which configures the number of times the gre_seq_number is
            incremeneted or decremented when gre_seq_number_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_NUMBER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_NUMBER_COUNT_CMD : numeric})

    def traffic_config_gre_seq_number_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_seq_number_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_seq_number_step and
            gre_seq_number_count.
            decr

            the value is decremented as specified with gre_seq_number_step and
            gre_seq_number_count.
            list

            Parameter -gre_seq_number contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_NUMBER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_NUMBER_MODE_CMD : opt})

    def traffic_config_gre_seq_number_step(self, any):
        """
        This is the method the command: traffic_config option gre_seq_number_step
        Description:Step value used to modify gre_seq_number when gre_seq_number_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_NUMBER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_NUMBER_STEP_CMD : any})

    def traffic_config_gre_seq_number_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_seq_number_tracking
        Description:Enables or disables tracking by gre_seq_number_tracking.
            Valid options are:
            0

            disable tracking by gre_seq_number
            1

            enable tracking by gre_seq_number
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_SEQ_NUMBER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_SEQ_NUMBER_TRACKING_CMD : bool_opt})

    def traffic_config_gre_valid_checksum_enable(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_valid_checksum_enable
        Description:Enable valid checksum for the GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VALID_CHECKSUM_ENABLE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VALID_CHECKSUM_ENABLE_CMD : bool_opt})

    def traffic_config_gre_version(self, range):
        """
        This is the method the command: traffic_config option gre_version
        Description:Specify version for GRE header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VERSION_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VERSION_CMD : range})

    def traffic_config_gre_version_count(self, numeric):
        """
        This is the method the command: traffic_config option gre_version_count
        Description:Numeric value which configures the number of times the gre_version is
            incremeneted or decremented when gre_version_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VERSION_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VERSION_COUNT_CMD : numeric})

    def traffic_config_gre_version_mode(self, opt):
        """
        This is the method the command: traffic_config option gre_version_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with gre_version_step and
            gre_version_count.
            decr

            the value is decremented as specified with gre_version_step and
            gre_version_count.
            list

            Parameter -gre_version contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VERSION_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VERSION_MODE_CMD : opt})

    def traffic_config_gre_version_step(self, range):
        """
        This is the method the command: traffic_config option gre_version_step
        Description:Step value used to modify gre_version when gre_version_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VERSION_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VERSION_STEP_CMD : range})

    def traffic_config_gre_version_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option gre_version_tracking
        Description:Enables or disables tracking by gre_version_tracking.
            Valid options are:
            0

            disable tracking by gre_version
            1

            enable tracking by gre_version
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: GRE_VERSION_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.GRE_VERSION_TRACKING_CMD : bool_opt})

    def traffic_config_header_handle(self):
        """
        This is the method the command: traffic_config option header_handle
        Description:The header handle for which all the available fields will be analyzed.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: HEADER_HANDLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.HEADER_HANDLE_CMD : ""})

    def traffic_config_hosts_per_net(self, numeric):
        """
        This is the method the command: traffic_config option hosts_per_net
        Description:This argument specifies the number of hosts from each route for whom
            traffic will be generated.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: HOSTS_PER_NET_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.HOSTS_PER_NET_CMD : numeric})

    def traffic_config_icmp_checksum_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_checksum_count
        Description:Numeric value which configures the number of times the icmp_checksum is
            incremeneted or decremented when icmp_checksum_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CHECKSUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CHECKSUM_COUNT_CMD : numeric})

    def traffic_config_icmp_checksum_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_checksum_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_checksum_step and
            icmp_checksum_count.
            decr

            the value is decremented as specified with icmp_checksum_step and
            icmp_checksum_count.
            list

            Parameter -icmp_checksum contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CHECKSUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CHECKSUM_MODE_CMD : opt})

    def traffic_config_icmp_checksum_step(self, any):
        """
        This is the method the command: traffic_config option icmp_checksum_step
        Description:Step value used to modify icmp_checksum when icmp_checksum_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CHECKSUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CHECKSUM_STEP_CMD : any})

    def traffic_config_icmp_checksum_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_checksum_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_checksum
            1

            enable tracking by icmp_checksum
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CHECKSUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CHECKSUM_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_code_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_code_count
        Description:Numeric value which configures the number of times the icmp_code is
            incremeneted or decremented when icmp_code_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CODE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CODE_COUNT_CMD : numeric})

    def traffic_config_icmp_code_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_code_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_code_step and
            icmp_code_count.
            decr

            the value is decremented as specified with icmp_code_step and
            icmp_code_count.
            list

            Parameter -icmp_code contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CODE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CODE_MODE_CMD : opt})

    def traffic_config_icmp_code_step(self, range):
        """
        This is the method the command: traffic_config option icmp_code_step
        Description:Step value used to modify icmp_code when icmp_code_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CODE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CODE_STEP_CMD : range})

    def traffic_config_icmp_code_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_code_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_code
            1

            enable tracking by icmp_code
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_CODE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_CODE_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_id_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_id_count
        Description:Numeric value which configures the number of times the icmp_id is
            incremeneted or decremented when icmp_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_ID_COUNT_CMD : numeric})

    def traffic_config_icmp_id_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_id_step and icmp_id_count.
            decr

            the value is decremented as specified with icmp_id_step and icmp_id_count.
            list

            Parameter -icmp_id contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_ID_MODE_CMD : opt})

    def traffic_config_icmp_id_step(self, range):
        """
        This is the method the command: traffic_config option icmp_id_step
        Description:Step value used to modify icmp_id when icmp_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_ID_STEP_CMD : range})

    def traffic_config_icmp_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_id
            1

            enable tracking by icmp_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_ID_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_max_response_delay_ms(self, range):
        """
        This is the method the command: traffic_config option icmp_max_response_delay_ms
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            Maximum response delay (milliseconds) field for 'Multicast Listener
            Query Message Version 1' (-icmp_type 130), 'Multicast Listener Report
            Message Version 1' (-icmp_type 131), 'Multicast Listener Done Message'
            (-icmp_type 132) or 'Multicast Listener Query Message Version 2'
            (-icmp_type 130) message types.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MAX_RESPONSE_DELAY_MS_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_CMD : range})

    def traffic_config_icmp_max_response_delay_ms_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_max_response_delay_ms_count
        Description:Numeric value which configures the number of times the
            icmp_max_response_delay_ms is incremeneted or decremented when
            icmp_max_response_delay_ms_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MAX_RESPONSE_DELAY_MS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_COUNT_CMD : numeric})

    def traffic_config_icmp_max_response_delay_ms_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_max_response_delay_ms_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_max_response_delay_ms_step and icmp_max_response_delay_ms_count.
            decr

            the value is decremented as specified with
            icmp_max_response_delay_ms_step and icmp_max_response_delay_ms_count.
            list

            Parameter -icmp_max_response_delay_ms contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MAX_RESPONSE_DELAY_MS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_MODE_CMD : opt})

    def traffic_config_icmp_max_response_delay_ms_step(self, range):
        """
        This is the method the command: traffic_config option icmp_max_response_delay_ms_step
        Description:Step value used to modify icmp_max_response_delay_ms when
            icmp_max_response_delay_ms_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MAX_RESPONSE_DELAY_MS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_STEP_CMD : range})

    def traffic_config_icmp_max_response_delay_ms_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_max_response_delay_ms_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_max_response_delay_ms
            1

            enable tracking by icmp_max_response_delay_ms
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MAX_RESPONSE_DELAY_MS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_mc_query_v2_interval_code(self, any):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_interval_code
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure 1
            byte HEX 'Querier's Query Interval Code' field for 'Multicast Listener
            Query Message Version 2' (-icmp_type 130) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_INTERVAL_CODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_CMD : any})

    def traffic_config_icmp_mc_query_v2_interval_code_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_interval_code_count
        Description:Numeric value which configures the number of times the
            icmp_mc_query_v2_interval_code is incremeneted or decremented when
            icmp_mc_query_v2_interval_code_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_INTERVAL_CODE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_COUNT_CMD : numeric})

    def traffic_config_icmp_mc_query_v2_interval_code_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_interval_code_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_mc_query_v2_interval_code_step and
            icmp_mc_query_v2_interval_code_count.
            decr

            the value is decremented as specified with
            icmp_mc_query_v2_interval_code_step and
            icmp_mc_query_v2_interval_code_count.
            list

            Parameter -icmp_mc_query_v2_interval_code contains a list of values.
            Each packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_INTERVAL_CODE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_MODE_CMD : opt})

    def traffic_config_icmp_mc_query_v2_interval_code_step(self, any):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_interval_code_step
        Description:Step value used to modify icmp_mc_query_v2_interval_code when
            icmp_mc_query_v2_interval_code_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_INTERVAL_CODE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_STEP_CMD : any})

    def traffic_config_icmp_mc_query_v2_interval_code_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_interval_code_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_mc_query_v2_interval_code
            1

            enable tracking by icmp_mc_query_v2_interval_code
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_INTERVAL_CODE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_mc_query_v2_robustness_var(self, range):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_robustness_var
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Querier's Robustness Variable' field (0-7) for 'Multicast Listener
            Query Message Version 2' (-icmp_type 130) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_CMD : range})

    def traffic_config_icmp_mc_query_v2_robustness_var_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_robustness_var_count
        Description:Numeric value which configures the number of times the
            icmp_mc_query_v2_robustness_var is incremeneted or decremented when
            icmp_mc_query_v2_robustness_var_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_COUNT_CMD : numeric})

    def traffic_config_icmp_mc_query_v2_robustness_var_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_robustness_var_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_mc_query_v2_robustness_var_step and
            icmp_mc_query_v2_robustness_var_count.
            decr

            the value is decremented as specified with
            icmp_mc_query_v2_robustness_var_step and
            icmp_mc_query_v2_robustness_var_count.
            list

            Parameter -icmp_mc_query_v2_robustness_var contains a list of values.
            Each packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_MODE_CMD : opt})

    def traffic_config_icmp_mc_query_v2_robustness_var_step(self, range):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_robustness_var_step
        Description:Step value used to modify icmp_mc_query_v2_robustness_var when
            icmp_mc_query_v2_robustness_var_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_STEP_CMD : range})

    def traffic_config_icmp_mc_query_v2_robustness_var_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_robustness_var_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_mc_query_v2_robustness_var
            1

            enable tracking by icmp_mc_query_v2_robustness_var
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_mc_query_v2_s_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_s_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Supress router-side processing' flag for 'Multicast Listener Query
            Message Version 2'
            Valid options are:
            0

            Supress router-side processing
            1

            Do not suppress router-side processing
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_S_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_CMD : bool_opt})

    def traffic_config_icmp_mc_query_v2_s_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_s_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_mc_query_v2_s_flag contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_S_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_mc_query_v2_s_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mc_query_v2_s_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_mc_query_v2_s_flag
            1

            enable tracking by icmp_mc_query_v2_s_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MC_QUERY_V2_S_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_mobile_pam_m_bit(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_m_bit
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            'M Bit' bit for 'Mobile Prefix Advertisement Message' (-icmp_type 147)
            message type.
            Valid options are:
            0

            bit is 0
            1

            bit is 1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_M_BIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_CMD : bool_opt})

    def traffic_config_icmp_mobile_pam_m_bit_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_m_bit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_mobile_pam_m_bit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_M_BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_MODE_CMD : opt})

    def traffic_config_icmp_mobile_pam_m_bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_m_bit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_mobile_pam_m_bit
            1

            enable tracking by icmp_mobile_pam_m_bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_M_BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_mobile_pam_o_bit(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_o_bit
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            'O Bit' bit for 'Mobile Prefix Advertisement Message' (-icmp_type 147)
            message type.
            Valid options are:
            0

            bit is 0
            1

            bit is 1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_O_BIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_CMD : bool_opt})

    def traffic_config_icmp_mobile_pam_o_bit_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_o_bit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_mobile_pam_o_bit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_O_BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_MODE_CMD : opt})

    def traffic_config_icmp_mobile_pam_o_bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_mobile_pam_o_bit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_mobile_pam_o_bit
            1

            enable tracking by icmp_mobile_pam_o_bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MOBILE_PAM_O_BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_multicast_address(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_multicast_address
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            IPv6 Multicast address field for 'Multicast Listener Query Message
            Version 1' (-icmp_type 130), 'Multicast Listener Report Message Version
            1' (-icmp_type 131), 'Multicast Listener Done Message' (-icmp_type 132)
            or 'Multicast Listener Query Message Version 2' (-icmp_type 130) message
            types.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MULTICAST_ADDRESS_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_CMD : ipv6})

    def traffic_config_icmp_multicast_address_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_multicast_address_count
        Description:Numeric value which configures the number of times the
            icmp_multicast_address is incremeneted or decremented when
            icmp_multicast_address_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MULTICAST_ADDRESS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_COUNT_CMD : numeric})

    def traffic_config_icmp_multicast_address_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_multicast_address_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_multicast_address_step
            and icmp_multicast_address_count.
            decr

            the value is decremented as specified with icmp_multicast_address_step
            and icmp_multicast_address_count.
            list

            Parameter -icmp_multicast_address contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MULTICAST_ADDRESS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_MODE_CMD : opt})

    def traffic_config_icmp_multicast_address_step(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_multicast_address_step
        Description:Step value used to modify icmp_multicast_address when
            icmp_multicast_address_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MULTICAST_ADDRESS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_STEP_CMD : ipv6})

    def traffic_config_icmp_multicast_address_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_multicast_address_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_multicast_address
            1

            enable tracking by icmp_multicast_address
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_MULTICAST_ADDRESS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_o_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_o_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            'Override existing cache entry' flag for 'Neighbor Advertisement'
            (-icmp_type 136) message type.
            Valid options are:
            0

            disable O-Flag
            1

            enable O-Flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_O_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_o_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_o_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_nam_o_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_O_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_nam_o_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_o_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_nam_o_flag
            1

            enable tracking by icmp_ndp_nam_o_flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_O_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_r_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_r_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            'Router' flag for 'Neighbor Advertisement' (-icmp_type 136) message type.
            Valid options are:
            0

            disable Router flag
            1

            enable Router flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_R_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_r_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_r_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_nam_r_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_R_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_nam_r_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_r_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_nam_r_flag
            1

            enable tracking by icmp_ndp_nam_r_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_R_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_s_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_s_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            'Neighbor Solicitation' flag for 'Neighbor Advertisement' (-icmp_type
            136) message type.
            Valid options are:
            0

            disable Neighbor Solicitation flag
            1

            enable Neighbor Solicitation flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_S_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_nam_s_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_s_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_nam_s_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_S_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_nam_s_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_nam_s_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_nam_s_flag
            1

            enable tracking by icmp_ndp_nam_s_flag
            DEFAULT

            00
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_NAM_S_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_h_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_h_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Home Agent' flag for 'NDP Router Advertisement Message'
            Valid options are:
            0

            disable H-Flag
            1

            enable H-Flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_H_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_h_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_h_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_ram_h_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_H_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_h_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_h_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_h_flag
            1

            enable tracking by icmp_ndp_ram_h_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_H_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_hop_limit(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_hop_limit
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Current hop limit' field (0-255) for 'NDP Router Advertisement Message'
            (-icmp_type 134) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_HOP_LIMIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_CMD : range})

    def traffic_config_icmp_ndp_ram_hop_limit_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_hop_limit_count
        Description:Numeric value which configures the number of times the
            icmp_ndp_ram_hop_limit is incremeneted or decremented when
            icmp_ndp_ram_hop_limit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_HOP_LIMIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_COUNT_CMD : numeric})

    def traffic_config_icmp_ndp_ram_hop_limit_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_hop_limit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_ndp_ram_hop_limit_step
            and icmp_ndp_ram_hop_limit_count.
            decr

            the value is decremented as specified with icmp_ndp_ram_hop_limit_step
            and icmp_ndp_ram_hop_limit_count.
            list

            Parameter -icmp_ndp_ram_hop_limit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_HOP_LIMIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_hop_limit_step(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_hop_limit_step
        Description:Step value used to modify icmp_ndp_ram_hop_limit when
            icmp_ndp_ram_hop_limit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_HOP_LIMIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_STEP_CMD : range})

    def traffic_config_icmp_ndp_ram_hop_limit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_hop_limit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_hop_limit
            1

            enable tracking by icmp_ndp_ram_hop_limit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_HOP_LIMIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_m_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_m_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Managed address configuration' flag for 'NDP Router Advertisement Message'
            Valid options are:
            0

            disable M-Flag
            1

            enable M-Flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_M_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_m_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_m_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_ram_m_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_M_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_m_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_m_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_m_flag
            1

            enable tracking by icmp_ndp_ram_m_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_M_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_o_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_o_flag
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Other stateful configuration' flag for 'NDP Router Advertisement Message'
            Valid options are:
            0

            disable O-Flag
            1

            enable O-Flag
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_O_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_o_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_o_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -icmp_ndp_ram_o_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_O_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_o_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_o_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_o_flag
            1

            enable tracking by icmp_ndp_ram_o_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_O_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_reachable_time(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_reachable_time
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Reachable time' field (0-4294967295) for 'NDP Router Advertisement
            Message' (-icmp_type 134) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_REACHABLE_TIME_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_CMD : range})

    def traffic_config_icmp_ndp_ram_reachable_time_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_reachable_time_count
        Description:Numeric value which configures the number of times the
            icmp_ndp_ram_reachable_time is incremeneted or decremented when
            icmp_ndp_ram_reachable_time_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_REACHABLE_TIME_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_COUNT_CMD : numeric})

    def traffic_config_icmp_ndp_ram_reachable_time_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_reachable_time_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_ndp_ram_reachable_time_step and icmp_ndp_ram_reachable_time_count.
            decr

            the value is decremented as specified with
            icmp_ndp_ram_reachable_time_step and icmp_ndp_ram_reachable_time_count.
            list

            Parameter -icmp_ndp_ram_reachable_time contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_REACHABLE_TIME_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_reachable_time_step(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_reachable_time_step
        Description:Step value used to modify icmp_ndp_ram_reachable_time when
            icmp_ndp_ram_reachable_time_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_REACHABLE_TIME_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_STEP_CMD : range})

    def traffic_config_icmp_ndp_ram_reachable_time_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_reachable_time_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_reachable_time
            1

            enable tracking by icmp_ndp_ram_reachable_time
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_REACHABLE_TIME_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_retransmit_timer(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_retransmit_timer
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Retransmission timer' field (0-4294967295) for 'NDP Router
            Advertisement Message' (-icmp_type 134) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_RETRANSMIT_TIMER_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_CMD : range})

    def traffic_config_icmp_ndp_ram_retransmit_timer_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_retransmit_timer_count
        Description:Numeric value which configures the number of times the
            icmp_ndp_ram_retransmit_timer is incremeneted or decremented when
            icmp_ndp_ram_retransmit_timer_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_RETRANSMIT_TIMER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_COUNT_CMD : numeric})

    def traffic_config_icmp_ndp_ram_retransmit_timer_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_retransmit_timer_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_ndp_ram_retransmit_timer_step and icmp_ndp_ram_retransmit_timer_count.
            decr

            the value is decremented as specified with
            icmp_ndp_ram_retransmit_timer_step and icmp_ndp_ram_retransmit_timer_count.
            list

            Parameter -icmp_ndp_ram_retransmit_timer contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_RETRANSMIT_TIMER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_retransmit_timer_step(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_retransmit_timer_step
        Description:Step value used to modify icmp_ndp_ram_retransmit_timer when
            icmp_ndp_ram_retransmit_timer_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_RETRANSMIT_TIMER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_STEP_CMD : range})

    def traffic_config_icmp_ndp_ram_retransmit_timer_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_retransmit_timer_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_retransmit_timer
            1

            enable tracking by icmp_ndp_ram_retransmit_timer
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_RETRANSMIT_TIMER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_ram_router_lifetime(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_router_lifetime
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Router lifetime' field (0-65535) for 'NDP Router Advertisement Message'
            (-icmp_type 134) message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_ROUTER_LIFETIME_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_CMD : range})

    def traffic_config_icmp_ndp_ram_router_lifetime_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_router_lifetime_count
        Description:Numeric value which configures the number of times the
            icmp_ndp_ram_router_lifetime is incremeneted or decremented when
            icmp_ndp_ram_router_lifetime_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_ROUTER_LIFETIME_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_COUNT_CMD : numeric})

    def traffic_config_icmp_ndp_ram_router_lifetime_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_router_lifetime_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_ndp_ram_router_lifetime_step and icmp_ndp_ram_router_lifetime_count.
            decr

            the value is decremented as specified with
            icmp_ndp_ram_router_lifetime_step and icmp_ndp_ram_router_lifetime_count.
            list

            Parameter -icmp_ndp_ram_router_lifetime contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_ROUTER_LIFETIME_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_MODE_CMD : opt})

    def traffic_config_icmp_ndp_ram_router_lifetime_step(self, range):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_router_lifetime_step
        Description:Step value used to modify icmp_ndp_ram_router_lifetime when
            icmp_ndp_ram_router_lifetime_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_ROUTER_LIFETIME_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_STEP_CMD : range})

    def traffic_config_icmp_ndp_ram_router_lifetime_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_ram_router_lifetime_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_ram_router_lifetime
            1

            enable tracking by icmp_ndp_ram_router_lifetime
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RAM_ROUTER_LIFETIME_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_ndp_rm_dest_addr(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_ndp_rm_dest_addr
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            IPv6 'Destination address' field for 'NDP Redirect' (-icmp_type 137)
            message type.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RM_DEST_ADDR_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_CMD : ipv6})

    def traffic_config_icmp_ndp_rm_dest_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_ndp_rm_dest_addr_count
        Description:Numeric value which configures the number of times the
            icmp_ndp_rm_dest_addr is incremeneted or decremented when
            icmp_ndp_rm_dest_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RM_DEST_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_COUNT_CMD : numeric})

    def traffic_config_icmp_ndp_rm_dest_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_ndp_rm_dest_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_ndp_rm_dest_addr_step
            and icmp_ndp_rm_dest_addr_count.
            decr

            the value is decremented as specified with icmp_ndp_rm_dest_addr_step
            and icmp_ndp_rm_dest_addr_count.
            list

            Parameter -icmp_ndp_rm_dest_addr contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RM_DEST_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_MODE_CMD : opt})

    def traffic_config_icmp_ndp_rm_dest_addr_step(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_ndp_rm_dest_addr_step
        Description:Step value used to modify icmp_ndp_rm_dest_addr when
            icmp_ndp_rm_dest_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RM_DEST_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_STEP_CMD : ipv6})

    def traffic_config_icmp_ndp_rm_dest_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_ndp_rm_dest_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_ndp_rm_dest_addr
            1

            enable tracking by icmp_ndp_rm_dest_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_NDP_RM_DEST_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_param_problem_message_pointer(self, range):
        """
        This is the method the command: traffic_config option icmp_param_problem_message_pointer
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure
            'Pointer' field for 'Parameter Problem' message (-icmp_type 4).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PARAM_PROBLEM_MESSAGE_POINTER_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_CMD : range})

    def traffic_config_icmp_param_problem_message_pointer_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_param_problem_message_pointer_count
        Description:Numeric value which configures the number of times the
            icmp_param_problem_message_pointer is incremeneted or decremented when
            icmp_param_problem_message_pointer_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PARAM_PROBLEM_MESSAGE_POINTER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_COUNT_CMD : numeric})

    def traffic_config_icmp_param_problem_message_pointer_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_param_problem_message_pointer_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            icmp_param_problem_message_pointer_step and
            icmp_param_problem_message_pointer_count.
            decr

            the value is decremented as specified with
            icmp_param_problem_message_pointer_step and
            icmp_param_problem_message_pointer_count.
            list

            Parameter -icmp_param_problem_message_pointer contains a list of values.
            Each packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PARAM_PROBLEM_MESSAGE_POINTER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_MODE_CMD : opt})

    def traffic_config_icmp_param_problem_message_pointer_step(self, range):
        """
        This is the method the command: traffic_config option icmp_param_problem_message_pointer_step
        Description:Step value used to modify icmp_param_problem_message_pointer when
            icmp_param_problem_message_pointer_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PARAM_PROBLEM_MESSAGE_POINTER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_STEP_CMD : range})

    def traffic_config_icmp_param_problem_message_pointer_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_param_problem_message_pointer_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_param_problem_message_pointer
            1

            enable tracking by icmp_param_problem_message_pointer
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PARAM_PROBLEM_MESSAGE_POINTER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_pkt_too_big_mtu(self, range):
        """
        This is the method the command: traffic_config option icmp_pkt_too_big_mtu
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure MTU
            for 'Packet Too Big' messages (-icmp_type 2)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PKT_TOO_BIG_MTU_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_CMD : range})

    def traffic_config_icmp_pkt_too_big_mtu_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_pkt_too_big_mtu_count
        Description:Numeric value which configures the number of times the
            icmp_pkt_too_big_mtu is incremeneted or decremented when
            icmp_pkt_too_big_mtu_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PKT_TOO_BIG_MTU_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_COUNT_CMD : numeric})

    def traffic_config_icmp_pkt_too_big_mtu_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_pkt_too_big_mtu_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_pkt_too_big_mtu_step and
            icmp_pkt_too_big_mtu_count.
            decr

            the value is decremented as specified with icmp_pkt_too_big_mtu_step and
            icmp_pkt_too_big_mtu_count.
            list

            Parameter -icmp_pkt_too_big_mtu contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PKT_TOO_BIG_MTU_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_MODE_CMD : opt})

    def traffic_config_icmp_pkt_too_big_mtu_step(self, range):
        """
        This is the method the command: traffic_config option icmp_pkt_too_big_mtu_step
        Description:Step value used to modify icmp_pkt_too_big_mtu when
            icmp_pkt_too_big_mtu_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PKT_TOO_BIG_MTU_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_STEP_CMD : range})

    def traffic_config_icmp_pkt_too_big_mtu_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_pkt_too_big_mtu_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_pkt_too_big_mtu
            1

            enable tracking by icmp_pkt_too_big_mtu
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_PKT_TOO_BIG_MTU_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_seq_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_seq_count
        Description:Numeric value which configures the number of times the icmp_seq is
            incremeneted or decremented when icmp_seq_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_SEQ_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_SEQ_COUNT_CMD : numeric})

    def traffic_config_icmp_seq_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_seq_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_seq_step and icmp_seq_count.
            decr

            the value is decremented as specified with icmp_seq_step and icmp_seq_count.
            list

            Parameter -icmp_seq contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_SEQ_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_SEQ_MODE_CMD : opt})

    def traffic_config_icmp_seq_step(self, range):
        """
        This is the method the command: traffic_config option icmp_seq_step
        Description:Step value used to modify icmp_seq when icmp_seq_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_SEQ_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_SEQ_STEP_CMD : range})

    def traffic_config_icmp_seq_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_seq_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_seq
            1

            enable tracking by icmp_seq
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_SEQ_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_SEQ_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_target_addr(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_target_addr
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure the
            IPv6 'Target address' field for 'Neighbor Solicitation' (-icmp_type
            135), 'Neighbor Advertisement' (-icmp_type 136), 'NDP Redirect'
            (-icmp_type 137) message types.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TARGET_ADDR_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TARGET_ADDR_CMD : ipv6})

    def traffic_config_icmp_target_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_target_addr_count
        Description:Numeric value which configures the number of times the icmp_target_addr
            is incremeneted or decremented when icmp_target_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TARGET_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TARGET_ADDR_COUNT_CMD : numeric})

    def traffic_config_icmp_target_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_target_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_target_addr_step and
            icmp_target_addr_count.
            decr

            the value is decremented as specified with icmp_target_addr_step and
            icmp_target_addr_count.
            list

            Parameter -icmp_target_addr contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TARGET_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TARGET_ADDR_MODE_CMD : opt})

    def traffic_config_icmp_target_addr_step(self, ipv6):
        """
        This is the method the command: traffic_config option icmp_target_addr_step
        Description:Step value used to modify icmp_target_addr when icmp_target_addr_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TARGET_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TARGET_ADDR_STEP_CMD : ipv6})

    def traffic_config_icmp_target_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_target_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_target_addr
            1

            enable tracking by icmp_target_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TARGET_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TARGET_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_type_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_type_count
        Description:Numeric value which configures the number of times the icmp_type is
            incremeneted or decremented when icmp_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TYPE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TYPE_COUNT_CMD : numeric})

    def traffic_config_icmp_type_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_type_step and
            icmp_type_count.
            decr

            the value is decremented as specified with icmp_type_step and
            icmp_type_count.
            list

            Parameter -icmp_type contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TYPE_MODE_CMD : opt})

    def traffic_config_icmp_type_step(self, range):
        """
        This is the method the command: traffic_config option icmp_type_step
        Description:Step value used to modify icmp_type when icmp_type_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TYPE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TYPE_STEP_CMD : range})

    def traffic_config_icmp_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_type
            1

            enable tracking by icmp_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_icmp_unused(self, any):
        """
        This is the method the command: traffic_config option icmp_unused
        Description:Valid only for traffic_generator ixnetwork_540 and ICMPv6. Configure 4
            byte HEX 'Unused' field for 'Destination Unreachable' (-icmp_type 2),
            'Time Exceeded' (-icmp_type 3) message types.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_UNUSED_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_UNUSED_CMD : any})

    def traffic_config_icmp_unused_count(self, numeric):
        """
        This is the method the command: traffic_config option icmp_unused_count
        Description:Numeric value which configures the number of times the icmp_unused is
            incremeneted or decremented when icmp_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_UNUSED_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_UNUSED_COUNT_CMD : numeric})

    def traffic_config_icmp_unused_mode(self, opt):
        """
        This is the method the command: traffic_config option icmp_unused_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with icmp_unused_step and
            icmp_unused_count.
            decr

            the value is decremented as specified with icmp_unused_step and
            icmp_unused_count.
            list

            Parameter -icmp_unused contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_UNUSED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_UNUSED_MODE_CMD : opt})

    def traffic_config_icmp_unused_step(self, any):
        """
        This is the method the command: traffic_config option icmp_unused_step
        Description:Step value used to modify icmp_unused when icmp_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_UNUSED_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_UNUSED_STEP_CMD : any})

    def traffic_config_icmp_unused_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option icmp_unused_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by icmp_unused
            1

            enable tracking by icmp_unused
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ICMP_UNUSED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ICMP_UNUSED_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_aux_data_length(self, range):
        """
        This is the method the command: traffic_config option igmp_aux_data_length
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp,
            IGMPv3. Configure the Auxiliary data length field (0-255) from the Group
            Record. Use a list of values when configuring multiple Group Records.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_AUX_DATA_LENGTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_CMD : range})

    def traffic_config_igmp_aux_data_length_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_aux_data_length_count
        Description:Numeric value which configures the number of times the
            igmp_aux_data_length is incremeneted or decremented when
            igmp_aux_data_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_AUX_DATA_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_COUNT_CMD : numeric})

    def traffic_config_igmp_aux_data_length_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_aux_data_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_aux_data_length_step and
            igmp_aux_data_length_count.
            decr

            the value is decremented as specified with igmp_aux_data_length_step and
            igmp_aux_data_length_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_AUX_DATA_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_MODE_CMD : opt})

    def traffic_config_igmp_aux_data_length_step(self, range):
        """
        This is the method the command: traffic_config option igmp_aux_data_length_step
        Description:Step value used to modify igmp_aux_data_length when
            igmp_aux_data_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_AUX_DATA_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_STEP_CMD : range})

    def traffic_config_igmp_aux_data_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_aux_data_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_aux_data_length
            1

            enable tracking by igmp_aux_data_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_AUX_DATA_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_checksum(self, any):
        """
        This is the method the command: traffic_config option igmp_checksum
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp,
            igmp_valid_checksum 0.Configure 2 byte HEX Checksum field for IGMP message.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_CHECKSUM_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_CHECKSUM_CMD : any})

    def traffic_config_igmp_checksum_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_checksum_count
        Description:Numeric value which configures the number of times the igmp_checksum is
            incremeneted or decremented when igmp_checksum_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_CHECKSUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_CHECKSUM_COUNT_CMD : numeric})

    def traffic_config_igmp_checksum_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_checksum_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_checksum_step and
            igmp_checksum_count.
            decr

            the value is decremented as specified with igmp_checksum_step and
            igmp_checksum_count.
            list

            Parameter -igmp_checksum contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_CHECKSUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_CHECKSUM_MODE_CMD : opt})

    def traffic_config_igmp_checksum_step(self, any):
        """
        This is the method the command: traffic_config option igmp_checksum_step
        Description:Step value used to modify igmp_checksum when igmp_checksum_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_CHECKSUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_CHECKSUM_STEP_CMD : any})

    def traffic_config_igmp_checksum_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_checksum_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_checksum
            1

            enable tracking by igmp_checksum
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_CHECKSUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_CHECKSUM_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_data_v3r(self, hex):
        """
        This is the method the command: traffic_config option igmp_data_v3r
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp, IGMPv3
            Membership Report.Configure the data in auxiliary data field (HEX). Use
            a list of values when configuring multiple Group records.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_DATA_V3R_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_DATA_V3R_CMD : hex})

    def traffic_config_igmp_data_v3r_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_data_v3r_count
        Description:Numeric value which configures the number of times the igmp_data_v3r is
            incremeneted or decremented when igmp_data_v3r_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_DATA_V3R_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_DATA_V3R_COUNT_CMD : numeric})

    def traffic_config_igmp_data_v3r_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_data_v3r_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_data_v3r_step and
            igmp_data_v3r_count.
            decr

            the value is decremented as specified with igmp_data_v3r_step and
            igmp_data_v3r_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_DATA_V3R_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_DATA_V3R_MODE_CMD : opt})

    def traffic_config_igmp_data_v3r_step(self, hex):
        """
        This is the method the command: traffic_config option igmp_data_v3r_step
        Description:Step value used to modify igmp_data_v3r when igmp_data_v3r_mode is incr
            or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_DATA_V3R_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_DATA_V3R_STEP_CMD : hex})

    def traffic_config_igmp_data_v3r_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_data_v3r_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_data_v3r
            1

            enable tracking by igmp_data_v3r
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_DATA_V3R_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_DATA_V3R_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_group_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_group_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_group_addr
            1

            enable tracking by igmp_group_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_GROUP_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_GROUP_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_length_v3r(self, range):
        """
        This is the method the command: traffic_config option igmp_length_v3r
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp, IGMPv3
            Membership Report.Configure the length of the data from the auxiliary
            data field (0-255). Use a list of values when configuring multiple Group
            Records.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_LENGTH_V3R_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_LENGTH_V3R_CMD : range})

    def traffic_config_igmp_length_v3r_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_length_v3r_count
        Description:Numeric value which configures the number of times the igmp_length_v3r
            is incremeneted or decremented when igmp_length_v3r_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_LENGTH_V3R_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_LENGTH_V3R_COUNT_CMD : numeric})

    def traffic_config_igmp_length_v3r_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_length_v3r_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_length_v3r_step and
            igmp_length_v3r_count.
            decr

            the value is decremented as specified with igmp_length_v3r_step and
            igmp_length_v3r_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_LENGTH_V3R_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_LENGTH_V3R_MODE_CMD : opt})

    def traffic_config_igmp_length_v3r_step(self, range):
        """
        This is the method the command: traffic_config option igmp_length_v3r_step
        Description:Step value used to modify igmp_length_v3r when igmp_length_v3r_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_LENGTH_V3R_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_LENGTH_V3R_STEP_CMD : range})

    def traffic_config_igmp_length_v3r_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_length_v3r_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_length_v3r
            1

            enable tracking by igmp_length_v3r
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_LENGTH_V3R_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_LENGTH_V3R_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_max_response_time_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_max_response_time_count
        Description:Numeric value which configures the number of times the
            igmp_max_response_time is incremeneted or decremented when
            igmp_max_response_time_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MAX_RESPONSE_TIME_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_COUNT_CMD : numeric})

    def traffic_config_igmp_max_response_time_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_max_response_time_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_max_response_time_step
            and igmp_max_response_time_count.
            decr

            the value is decremented as specified with igmp_max_response_time_step
            and igmp_max_response_time_count.
            list

            Parameter -igmp_max_response_time contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MAX_RESPONSE_TIME_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_MODE_CMD : opt})

    def traffic_config_igmp_max_response_time_step(self, range):
        """
        This is the method the command: traffic_config option igmp_max_response_time_step
        Description:Step value used to modify igmp_max_response_time when
            igmp_max_response_time_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MAX_RESPONSE_TIME_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_STEP_CMD : range})

    def traffic_config_igmp_max_response_time_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_max_response_time_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_max_response_time
            1

            enable tracking by igmp_max_response_time
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MAX_RESPONSE_TIME_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_msg_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_msg_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_msg_type
            1

            enable tracking by igmp_msg_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MSG_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MSG_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_multicast_src_count(self, any):
        """
        This is the method the command: traffic_config option igmp_multicast_src_count
        Description:Numeric value which configures the number of times the
            igmp_multicast_src is incremeneted or decremented when
            igmp_multicast_src_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MULTICAST_SRC_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MULTICAST_SRC_COUNT_CMD : any})

    def traffic_config_igmp_multicast_src_mode(self, any):
        """
        This is the method the command: traffic_config option igmp_multicast_src_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_multicast_src_step and
            igmp_multicast_src_count.
            decr

            the value is decremented as specified with igmp_multicast_src_step and
            igmp_multicast_src_count.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MULTICAST_SRC_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MULTICAST_SRC_MODE_CMD : any})

    def traffic_config_igmp_multicast_src_step(self, any):
        """
        This is the method the command: traffic_config option igmp_multicast_src_step
        Description:Step value used to modify igmp_multicast_src when
            igmp_multicast_src_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MULTICAST_SRC_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MULTICAST_SRC_STEP_CMD : any})

    def traffic_config_igmp_multicast_src_tracking(self, any):
        """
        This is the method the command: traffic_config option igmp_multicast_src_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_multicast_src
            1

            enable tracking by igmp_multicast_src
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_MULTICAST_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_MULTICAST_SRC_TRACKING_CMD : any})

    def traffic_config_igmp_qqic_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_qqic_count
        Description:Numeric value which configures the number of times the igmp_qqic is
            incremeneted or decremented when igmp_qqic_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QQIC_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QQIC_COUNT_CMD : numeric})

    def traffic_config_igmp_qqic_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_qqic_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_qqic_step and
            igmp_qqic_count.
            decr

            the value is decremented as specified with igmp_qqic_step and
            igmp_qqic_count.
            list

            Parameter -igmp_qqic contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QQIC_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QQIC_MODE_CMD : opt})

    def traffic_config_igmp_qqic_step(self, range):
        """
        This is the method the command: traffic_config option igmp_qqic_step
        Description:Step value used to modify igmp_qqic when igmp_qqic_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QQIC_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QQIC_STEP_CMD : range})

    def traffic_config_igmp_qqic_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_qqic_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_qqic
            1

            enable tracking by igmp_qqic
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QQIC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QQIC_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_qrv_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_qrv_count
        Description:Numeric value which configures the number of times the igmp_qrv is
            incremeneted or decremented when igmp_qrv_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QRV_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QRV_COUNT_CMD : numeric})

    def traffic_config_igmp_qrv_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_qrv_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_qrv_step and igmp_qrv_count.
            decr

            the value is decremented as specified with igmp_qrv_step and igmp_qrv_count.
            list

            Parameter -igmp_qrv contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QRV_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QRV_MODE_CMD : opt})

    def traffic_config_igmp_qrv_step(self, range):
        """
        This is the method the command: traffic_config option igmp_qrv_step
        Description:Step value used to modify igmp_qrv when igmp_qrv_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QRV_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QRV_STEP_CMD : range})

    def traffic_config_igmp_qrv_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_qrv_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_qrv
            1

            enable tracking by igmp_qrv
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_QRV_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_QRV_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_record_type_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_record_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_record_type_step and
            igmp_record_type_count.
            decr

            the value is decremented as specified with igmp_record_type_step and
            igmp_record_type_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RECORD_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RECORD_TYPE_MODE_CMD : opt})

    def traffic_config_igmp_record_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_record_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_record_type
            1

            enable tracking by igmp_record_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RECORD_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RECORD_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_reserved_v3q(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3q
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp for
            IGMPv3 Membership Query Messages. Configure the reserved field (0-15).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3Q_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3Q_CMD : range})

    def traffic_config_igmp_reserved_v3q_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_reserved_v3q_count
        Description:Numeric value which configures the number of times the igmp_reserved_v3q
            is incremeneted or decremented when igmp_reserved_v3q_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3Q_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3Q_COUNT_CMD : numeric})

    def traffic_config_igmp_reserved_v3q_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3q_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_reserved_v3q_step and
            igmp_reserved_v3q_count.
            decr

            the value is decremented as specified with igmp_reserved_v3q_step and
            igmp_reserved_v3q_count.
            list

            Parameter -igmp_reserved_v3q contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3Q_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3Q_MODE_CMD : opt})

    def traffic_config_igmp_reserved_v3q_step(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3q_step
        Description:Step value used to modify igmp_reserved_v3q when igmp_reserved_v3q_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3Q_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3Q_STEP_CMD : range})

    def traffic_config_igmp_reserved_v3q_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3q_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_reserved_v3q
            1

            enable tracking by igmp_reserved_v3q
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3Q_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3Q_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_reserved_v3r1(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r1
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp for
            IGMPv3 Membership Report Messages. Configure the reserved1 field (0-255).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R1_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R1_CMD : range})

    def traffic_config_igmp_reserved_v3r1_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r1_count
        Description:Numeric value which configures the number of times the
            igmp_reserved_v3r1 is incremeneted or decremented when
            igmp_reserved_v3r1_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R1_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R1_COUNT_CMD : numeric})

    def traffic_config_igmp_reserved_v3r1_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r1_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_reserved_v3r1_step and
            igmp_reserved_v3r1_count.
            decr

            the value is decremented as specified with igmp_reserved_v3r1_step and
            igmp_reserved_v3r1_count.
            list

            Parameter -igmp_reserved_v3r1 contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R1_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R1_MODE_CMD : opt})

    def traffic_config_igmp_reserved_v3r1_step(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r1_step
        Description:Step value used to modify igmp_reserved_v3r1 when
            igmp_reserved_v3r1_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R1_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R1_STEP_CMD : range})

    def traffic_config_igmp_reserved_v3r1_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r1_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_reserved_v3r1
            1

            enable tracking by igmp_reserved_v3r1
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R1_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R1_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_reserved_v3r2(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r2
        Description:Valid only for traffic_generator ixnetwork_540, l4_protocol igmp for
            IGMPv3 Membership Report Messages. Configure the reserved2 field (0-65535).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R2_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R2_CMD : range})

    def traffic_config_igmp_reserved_v3r2_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r2_count
        Description:Numeric value which configures the number of times the
            igmp_reserved_v3r2 is incremeneted or decremented when
            igmp_reserved_v3r2_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R2_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R2_COUNT_CMD : numeric})

    def traffic_config_igmp_reserved_v3r2_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r2_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_reserved_v3r2_step and
            igmp_reserved_v3r2_count.
            decr

            the value is decremented as specified with igmp_reserved_v3r2_step and
            igmp_reserved_v3r2_count.
            list

            Parameter -igmp_reserved_v3r2 contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R2_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R2_MODE_CMD : opt})

    def traffic_config_igmp_reserved_v3r2_step(self, range):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r2_step
        Description:Step value used to modify igmp_reserved_v3r2 when
            igmp_reserved_v3r2_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R2_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R2_STEP_CMD : range})

    def traffic_config_igmp_reserved_v3r2_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_reserved_v3r2_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_reserved_v3r2
            1

            enable tracking by igmp_reserved_v3r2
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_RESERVED_V3R2_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_RESERVED_V3R2_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_s_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_s_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -igmp_s_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_S_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_S_FLAG_MODE_CMD : opt})

    def traffic_config_igmp_s_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_s_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_s_flag
            1

            enable tracking by igmp_s_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_S_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_S_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_igmp_unused(self, any):
        """
        This is the method the command: traffic_config option igmp_unused
        Description:Configure 1 byte HEX IGMPv1 Unused field when traffic_genrator is
            ixnetwork_540 andigmp_version is 1.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_UNUSED_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_UNUSED_CMD : any})

    def traffic_config_igmp_unused_count(self, numeric):
        """
        This is the method the command: traffic_config option igmp_unused_count
        Description:Numeric value which configures the number of times the igmp_unused is
            incremeneted or decremented when igmp_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_UNUSED_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_UNUSED_COUNT_CMD : numeric})

    def traffic_config_igmp_unused_mode(self, opt):
        """
        This is the method the command: traffic_config option igmp_unused_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with igmp_unused_step and
            igmp_unused_count.
            decr

            the value is decremented as specified with igmp_unused_step and
            igmp_unused_count.
            list

            Parameter -igmp_unused contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_UNUSED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_UNUSED_MODE_CMD : opt})

    def traffic_config_igmp_unused_step(self, any):
        """
        This is the method the command: traffic_config option igmp_unused_step
        Description:Step value used to modify igmp_unused when igmp_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_UNUSED_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_UNUSED_STEP_CMD : any})

    def traffic_config_igmp_unused_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option igmp_unused_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by igmp_unused
            1

            enable tracking by igmp_unused
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IGMP_UNUSED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IGMP_UNUSED_TRACKING_CMD : bool_opt})

    def traffic_config_indirect(self):
        """
        This is the method the command: traffic_config option indirect
        Description:This option can be used to specify whether a LAN static endpoint is
            going to be connected through an ATM or Frame Relay endpoint or not.
            This option is available only when using the ixnetwork traffic generator
            for L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: INDIRECT_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INDIRECT_CMD : ""})

    def traffic_config_inner_ip_dst_addr(self, ipv4):
        """
        This is the method the command: traffic_config option inner_ip_dst_addr
        Description:Destination IP address for inner GRE IPv4 header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_DST_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv4 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_DST_ADDR_CMD : ipv4})

    def traffic_config_inner_ip_dst_count(self, range):
        """
        This is the method the command: traffic_config option inner_ip_dst_count
        Description:Number of destination IP addresses when option '-inner_ip_dst_mode' is
            set to increment or decrement. When traffic_generator is ixos the
            maximum value is 4294967295. When traffic_generator is ixnetwork_540 the
            maximum value is 2147483647.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: INNER_IP_DST_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_DST_COUNT_CMD : range})

    def traffic_config_inner_ip_dst_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ip_dst_mode
        Description:Destination IP address mode for inner GRE IPv4 header.
            Valid options are:
            fixed

            The destination IP address is the same for all packets.
            increment

            The destination IP address increments.
            decrement

            The destination IP address decrements.
            random

            The destination IP address is random. With traffic_generator
            ixnetwork_540 this will be silently ignored and configured to
            'fixed'.list - Parameter -inner_ip_dst_addr contains a list of values.
            Each packet will use one of the values from the list. Valid only for
            traffic_generator ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_DST_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_DST_MODE_CMD : opt})

    def traffic_config_inner_ip_dst_step(self, ipv4):
        """
        This is the method the command: traffic_config option inner_ip_dst_step
        Description:The modifier for the increment and decrement choices of
            '-inner_ip_dst_mode'. When traffic_generator is ixnetwork_540 it is
            required that only one field contain a non-zero value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_DST_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv4 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_DST_STEP_CMD : ipv4})

    def traffic_config_inner_ip_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ip_dst_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ip_dst_addr.
            1

            enable tracking by inner_ip_dst_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IP_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_DST_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ip_src_addr(self, ipv4):
        """
        This is the method the command: traffic_config option inner_ip_src_addr
        Description:Source IP address for inner GRE IPv4 header. Valid only for
            traffic_generator ixos/ixnetworK_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_SRC_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv4 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_SRC_ADDR_CMD : ipv4})

    def traffic_config_inner_ip_src_count(self, range):
        """
        This is the method the command: traffic_config option inner_ip_src_count
        Description:Number of source IP addresses when option 'inner_ip_src_mode' is set to
            increment or decrement. When traffic_generator is ixos the maximum value
            is 4294967295. When traffic_generator is ixnetwork_540 the maximum value
            is 2147483647.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_SRC_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_SRC_COUNT_CMD : range})

    def traffic_config_inner_ip_src_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ip_src_mode
        Description:Source IP address mode for inner GRE IPv4 header.
            Valid options are:
            fixed

            The source IP address is the same for all packets.
            increment

            The source IP address increments.
            decrement

            The source IP address decrements.
            random

            The source IP address is random. With traffic_generator ixnetwork_540
            this will be silently ignored and configured to 'fixed'.
            list

            Parameter -inner_ip_src_addr contains a list of values. Each packet will
            use one of the values from the list. Valid only for traffic_generator
            ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_SRC_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_SRC_MODE_CMD : opt})

    def traffic_config_inner_ip_src_step(self, ipv4):
        """
        This is the method the command: traffic_config option inner_ip_src_step
        Description:The modifier for the increment and decrement choices of
            inner_ip_src_mode which requires that only one field contain a non-zero
            value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IP_SRC_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv4 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_SRC_STEP_CMD : ipv4})

    def traffic_config_inner_ip_src_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ip_src_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ip_src_addr.
            1

            enable tracking by inner_ip_src_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IP_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IP_SRC_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_dst_addr(self, ipv6):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_addr
        Description:Destination IP address for inner GRE IPv6 header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_DST_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_ADDR_CMD : ipv6})

    def traffic_config_inner_ipv6_dst_count(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_count
        Description:Number of destination IPv6 addresses when option 'inner_ipv6_dst_mode'
            is set to increment or decrement. When traffic_generator is ixos the
            maximum value is 4294967295. When traffic_generator is ixnetwork_540 the
            maximum value is 2147483647.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_DST_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_COUNT_CMD : range})

    def traffic_config_inner_ipv6_dst_mask(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_mask
        Description:Specify IPv6 mask to be used for inner_ipv6_dst_addr to increment. This
            parameter is ignored with traffic_generator ixnetwork_540. Incrementing
            and decrementing can be done with any step value with traffic_generator
            ixnetwork_540.Default value is specific to the inner_ipv6_dst_mode as
            follows:incr_global_top_level decr_global_top_level: Default
            4incr_global_next_level decr_global_next_level: Default
            24incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: Default 48incr_mcast_group decr_mcast_group:
            Default 96incr_host decr_host incr_intf_id decr_intf_id: Default
            96incr_network decr_network: Default 96inner_ipv6_dst_mode specifies how
            and if the inner_ipv6_dst_addr is incremented.The inner_ipv6_dst_mode
            depends on the IPv6 address type specified with inner_ipv6_dst_addr
            parameter.Each inner_ipv6_dst_mode allows a mask from a Mask range to be
            configured.The mask is configured using the inner_ipv6_dst_mask
            attributeThe step used for incrementing or decrementing is configued
            using the inner_ipv6_dst_step attribute which has the form of an IPv6
            address.The inner_ipv6_dst_mask attribute specifies which part of the
            inner_ipv6_dst_step address is used for incrementing as follows:Mask
            range 4-4, incr_global_top_level decr_global_top_level: xxxx::0Mask
            range 24-24, incr_global_next_level decr_global_next_level:
            0:0xx:xxxx::0Mask range 48-48, incr_global_site_level
            decr_global_site_level incr_local_site_subnet decr_local_site_subnet:
            0:0:0:xxxx::0Mask range 96-96, incr_mcast_group decr_mcast_group:
            0::xxxx:xxxxMask range 96-128, incr_host decr_host incr_intf_id
            decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range 96-128, incr_host
            decr_host incr_intf_id decr_intf_id: 0::xxxx (when mask is 112)Mask
            range 0-128, incr_network decr_network: 0::xxxx:xxxx:0:0 (when mask is
            96)Mask range 0-128, incr_network decr_network: 0::xxxx:xxxx:0 (when
            mask is 112)HEX values marked with 'x' in the format above are the
            inner_ipv6_dst_step HEX values that are used for increment or decrement;
            HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork' |
        Constants Available: INNER_IPV6_DST_MASK_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_MASK_CMD : range})

    def traffic_config_inner_ipv6_dst_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_mode
        Description:Destination IPv6 address mode. Valid only for traffic_generator
            ixos/ixnetwork_540.The following is valid only for traffic_generator
            ixnetwork_540:Valid options are:incrementdecrementfixedlistFor backwards
            compatibility all modes starting with 'incr' will be configured as
            increment and all modes starting with 'decr' will be configured as
            decrement. Incrementing and decrementing depends only on
            inner_ipv6_dst_step and inner_ipv6_dst_count.The following is valid only
            for traffic_generator ixos: inner_ipv6_dst_mode specifies how and if the
            inner_ipv6_dst_addr is incremented.The inner_ipv6_dst_mode depends on
            the IPv6 address type specified with inner_ipv6_dst_addr parameter.Each
            inner_ipv6_dst_mode allows a mask from a Mask range to be configured.The
            mask is configured using the inner_ipv6_dst_mask attributeThe step used
            for incrementing or decrementing is configued using the
            inner_ipv6_dst_step attribute which has the form of an IPv6 address.The
            inner_ipv6_dst_mask attribute specifies which part of the
            inner_ipv6_dst_step address is used for incrementing as follows:Mask
            range 4-4, incr_global_top_level decr_global_top_level: xxxx::0Mask
            range 24-24, incr_global_next_level decr_global_next_level:
            0:0xx:xxxx::0Mask range 48-48, incr_global_site_level
            decr_global_site_level incr_local_site_subnet decr_local_site_subnet:
            0:0:0:xxxx::0Mask range 96-96, incr_mcast_group decr_mcast_group:
            0::xxxx:xxxxMask range 96-128, incr_host decr_host incr_intf_id
            decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range 96-128, incr_host
            decr_host incr_intf_id decr_intf_id: 0::xxxx (when mask is 112)Mask
            range 0-128, incr_network decr_network: 0::xxxx:xxxx:0:0 (when mask is
            96)Mask range 0-128, incr_network decr_network: 0::xxxx:xxxx:0 (when
            mask is 112)HEX values marked with 'x' in the format above are the
            inner_ipv6_dst_step HEX values that are used for increment or decrement;
            HEX values marked with '0' are ignored.The step is limited to a 32 bit
            counter. Example:inner_ipv6_dst_mode incr_networkinner_ipv6_dst_mask
            64inner_ipv6_dst_step address portion that is used for incrementing will
            be:0000:0000:xxxx:xxxx:0000:0000:00000:000032bit limit Network Mask
            640000:0000:xxxx:xxxx is the mask.0000:0000 is the 32 bits that will NOT
            be incremented because of the limitation.xxxx:xxxx is what gets incremented.
            Valid options are:
            type

            User Defined
            address

            Mask range 0-128
            value

            Mask range 0-128
            Reserved

            .
            Allocation

            .
            Addresses

            .
            ID

            Mask range 96-128
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_DST_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_MODE_CMD : opt})

    def traffic_config_inner_ipv6_dst_step(self, ipv6):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_step
        Description:Step size of the IPv6 addresses when option 'inner_ipv6_dst_mode' is set
            to increment or decrement. The following is valid only for
            traffic_generator ixnetwork_540:Any IPv6 step is accepted. Incrementing
            and decrementing depends only on inner_ipv6_dst_step and
            inner_ipv6_dst_count.The following is valid only for traffic_generator
            ixos:inner_ipv6_dst_mode specifies how and if the inner_ipv6_dst_addr is
            incremented.The inner_ipv6_dst_mode depends on the IPv6 address type
            specified with inner_ipv6_dst_addr parameter.Each inner_ipv6_dst_mode
            allows a mask from a Mask range to be configured.The mask is configured
            using the inner_ipv6_dst_mask attributeThe step used for incrementing or
            decrementing is configued using the inner_ipv6_dst_step attribute which
            has the form of an IPv6 address.The inner_ipv6_dst_mask attribute
            specifies which part of the inner_ipv6_dst_step address is used for
            incrementing as follows:Mask range 4-4, incr_global_top_level
            decr_global_top_level: xxxx::0Mask range 24-24, incr_global_next_level
            decr_global_next_level: 0:0xx:xxxx::0Mask range 48-48,
            incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: 0:0:0:xxxx::0Mask range 96-96, incr_mcast_group
            decr_mcast_group: 0::xxxx:xxxxMask range 96-128, incr_host decr_host
            incr_intf_id decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range
            96-128, incr_host decr_host incr_intf_id decr_intf_id: 0::xxxx (when
            mask is 112)Mask range 0-128, incr_network decr_network:
            0::xxxx:xxxx:0:0 (when mask is 96)Mask range 0-128, incr_network
            decr_network: 0::xxxx:xxxx:0 (when mask is 112)HEX values marked with
            'x' in the format above are the inner_ipv6_dst_step HEX values that are
            used for increment or decrement; HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_DST_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_STEP_CMD : ipv6})

    def traffic_config_inner_ipv6_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_dst_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_dst_addr
            1

            enable tracking by inner_ipv6_dst_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_DST_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_flow_label(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_flow_label
        Description:Flow label value of the IPv6 inner header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_FLOW_LABEL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_CMD : range})

    def traffic_config_inner_ipv6_flow_label_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_ipv6_flow_label_count
        Description:Numeric value which configures the number of times the
            inner_ipv6_flow_label is incremeneted or decremented when
            inner_ipv6_flow_label_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FLOW_LABEL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_COUNT_CMD : numeric})

    def traffic_config_inner_ipv6_flow_label_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_flow_label_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_ipv6_flow_label_step
            and inner_ipv6_flow_label_count.
            decr

            the value is decremented as specified with inner_ipv6_flow_label_step
            and inner_ipv6_flow_label_count.
            list

            Parameter -inner_ipv6_flow_label contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FLOW_LABEL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_MODE_CMD : opt})

    def traffic_config_inner_ipv6_flow_label_step(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_flow_label_step
        Description:Step value used to modify inner_ipv6_flow_label when
            inner_ipv6_flow_label_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FLOW_LABEL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_STEP_CMD : range})

    def traffic_config_inner_ipv6_flow_label_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_flow_label_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_flow_label
            1

            enable tracking by inner_ipv6_flow_label
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FLOW_LABEL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_frag_id(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_id
        Description:Identification field in the fragment extension header of an IPv6 header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_FRAG_ID_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_ID_CMD : range})

    def traffic_config_inner_ipv6_frag_id_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_id_count
        Description:Numeric value which configures the number of times the
            inner_ipv6_frag_id is incremeneted or decremented when
            inner_ipv6_frag_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_ID_COUNT_CMD : numeric})

    def traffic_config_inner_ipv6_frag_id_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_ipv6_frag_id_step and
            inner_ipv6_frag_id_count.
            decr

            the value is decremented as specified with inner_ipv6_frag_id_step and
            inner_ipv6_frag_id_count.
            list

            Parameter -inner_ipv6_frag_id contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_ID_MODE_CMD : opt})

    def traffic_config_inner_ipv6_frag_id_step(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_id_step
        Description:Step value used to modify inner_ipv6_frag_id when
            inner_ipv6_frag_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_ID_STEP_CMD : range})

    def traffic_config_inner_ipv6_frag_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_frag_id
            1

            enable tracking by inner_ipv6_frag_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_ID_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_frag_more_flag(self, flag):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_more_flag
        Description:Whether the M Flag in the fragment extension header of an IPv6 header is
            set.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_FRAG_MORE_FLAG_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_CMD : flag})

    def traffic_config_inner_ipv6_frag_more_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_more_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -inner_ipv6_frag_more_flag contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_MORE_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_MODE_CMD : opt})

    def traffic_config_inner_ipv6_frag_more_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_more_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_frag_more_flag
            1

            enable tracking by inner_ipv6_frag_more_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_MORE_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_frag_offset(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_offset
        Description:Fragment offset in the fragment extension header of an IPv6 header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_FRAG_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_CMD : range})

    def traffic_config_inner_ipv6_frag_offset_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_offset_count
        Description:Numeric value which configures the number of times the
            inner_ipv6_frag_offset is incremeneted or decremented when
            inner_ipv6_frag_offset_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_OFFSET_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_COUNT_CMD : numeric})

    def traffic_config_inner_ipv6_frag_offset_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_offset_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_ipv6_frag_offset_step
            and inner_ipv6_frag_offset_count.
            decr

            the value is decremented as specified with inner_ipv6_frag_offset_step
            and inner_ipv6_frag_offset_count.
            list

            Parameter -inner_ipv6_frag_offset contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_OFFSET_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_MODE_CMD : opt})

    def traffic_config_inner_ipv6_frag_offset_step(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_offset_step
        Description:Step value used to modify inner_ipv6_frag_offset when
            inner_ipv6_frag_offset_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_OFFSET_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_STEP_CMD : range})

    def traffic_config_inner_ipv6_frag_offset_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_frag_offset_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_frag_offset
            1

            enable tracking by inner_ipv6_frag_offset
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_FRAG_OFFSET_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_hop_limit(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_hop_limit
        Description:Hop limit value of the IPv6 inner header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_HOP_LIMIT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_CMD : range})

    def traffic_config_inner_ipv6_hop_limit_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_ipv6_hop_limit_count
        Description:Numeric value which configures the number of times the
            inner_ipv6_hop_limit is incremeneted or decremented when
            inner_ipv6_hop_limit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_HOP_LIMIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_COUNT_CMD : numeric})

    def traffic_config_inner_ipv6_hop_limit_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_hop_limit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_ipv6_hop_limit_step and
            inner_ipv6_hop_limit_count.
            decr

            the value is decremented as specified with inner_ipv6_hop_limit_step and
            inner_ipv6_hop_limit_count.
            list

            Parameter -inner_ipv6_hop_limit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_HOP_LIMIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_MODE_CMD : opt})

    def traffic_config_inner_ipv6_hop_limit_step(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_hop_limit_step
        Description:Step value used to modify inner_ipv6_hop_limit when
            inner_ipv6_hop_limit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_HOP_LIMIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_STEP_CMD : range})

    def traffic_config_inner_ipv6_hop_limit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_hop_limit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_hop_limit
            1

            enable tracking by inner_ipv6_hop_limit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_HOP_LIMIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_src_addr(self, ipv6):
        """
        This is the method the command: traffic_config option inner_ipv6_src_addr
        Description:Source IP address for inner GRE IPv6 header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_SRC_ADDR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_ADDR_CMD : ipv6})

    def traffic_config_inner_ipv6_src_count(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_src_count
        Description:Number of source IP address when option 'inner_ipv6_src_mode' is set to
            increment or decrement. When traffic_generator is ixos the maximum value
            is 4294967295. When traffic_generator is ixnetwork_540 the maximum value
            is 2147483647.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_SRC_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_COUNT_CMD : range})

    def traffic_config_inner_ipv6_src_mask(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_src_mask
        Description:This parameter is ignored with traffic_generator ixnetwork_540.
            Incrementing and decrementing can be done with any step value with
            traffic_generator ixnetwork_540.Specify IPv6 mask to be used for
            inner_ipv6_src_addr to increment. Default value is minimum value
            specified in inner_ipv6_dst_mode (it depends on address type and
            increment mode).inner_ipv6_src_mode specifies how and if the
            inner_ipv6_src_addr is incremented.The inner_ipv6_src_mode depends on
            the IPv6 address type specified with inner_ipv6_src_addr parameter.Each
            inner_ipv6_src_mode allows a mask from a Mask range to be configured.The
            mask is configured using the inner_ipv6_src_mask attributeThe step used
            for incrementing or decrementing is configued using the
            inner_ipv6_src_step attribute which has the form of an IPv6 address.The
            inner_ipv6_src_mask attribute specifies which part of the
            inner_ipv6_src_step address is used for incrementing as follows:Mask
            range 4-4, incr_global_top_level decr_global_top_level: xxxx::0Mask
            range 24-24, incr_global_next_level decr_global_next_level:
            0:0xx:xxxx::0Mask range 48-48, incr_global_site_level
            decr_global_site_level incr_local_site_subnet decr_local_site_subnet:
            0:0:0:xxxx::0Mask range 96-96, incr_mcast_group decr_mcast_group:
            0::xxxx:xxxxMask range 96-128, incr_host decr_host incr_intf_id
            decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range 96-128, incr_host
            decr_host incr_intf_id decr_intf_id: 0::xxxx (when mask is 112)Mask
            range 0-128, incr_network decr_network: 0::xxxx:xxxx:0:0 (when mask is
            96)Mask range 0-128, incr_network decr_network: 0::xxxx:xxxx:0 (when
            mask is 112)HEX values marked with 'x' in the format above are the
            inner_ipv6_src_step HEX values that are used for increment or decrement;
            HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork' |
        Constants Available: INNER_IPV6_SRC_MASK_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_MASK_CMD : range})

    def traffic_config_inner_ipv6_src_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_src_mode
        Description:Source IP address mode for inner GRE IPv6 header. The following is valid
            only for traffic_generator ixnetwork_540:Valid options
            are:incrementdecrementfixedlistFor backwards compatibility all modes
            starting with 'incr' will be configured as increment and all modes
            starting with 'decr' will be configured as decrement. Incrementing and
            decrementing depends only on ipv6_src_step and ipv6_src_count.The
            following is valid only for traffic_generator ixos: inner_ipv6_src_mode
            specifies how and if the inner_ipv6_src_addr is incremented.The
            inner_ipv6_src_mode depends on the IPv6 address type specified with
            inner_ipv6_src_addr parameter.Each inner_ipv6_src_mode allows a mask
            from a Mask range to be configured.The mask is configured using the
            inner_ipv6_src_mask attributeThe step used for incrementing or
            decrementing is configued using the inner_ipv6_src_step attribute which
            has the form of an IPv6 address.The inner_ipv6_src_mask attribute
            specifies which part of the inner_ipv6_src_step address is used for
            incrementing as follows:Mask range 4-4, incr_global_top_level
            decr_global_top_level: xxxx::0Mask range 24-24, incr_global_next_level
            decr_global_next_level: 0:0xx:xxxx::0Mask range 48-48,
            incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: 0:0:0:xxxx::0Mask range 96-96, incr_mcast_group
            decr_mcast_group: 0::xxxx:xxxxMask range 96-128, incr_host decr_host
            incr_intf_id decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range
            96-128, incr_host decr_host incr_intf_id decr_intf_id: 0::xxxx (when
            mask is 112)Mask range 0-128, incr_network decr_network:
            0::xxxx:xxxx:0:0 (when mask is 96)Mask range 0-128, incr_network
            decr_network: 0::xxxx:xxxx:0 (when mask is 112)HEX values marked with
            'x' in the format above are the inner_ipv6_src_step HEX values that are
            used for increment or decrement; HEX values marked with '0' are ignored.
            Valid options are:
            type

            User Defined
            address

            Mask range 0-128
            value

            Mask range 0-128
            Reserved

            .
            Allocation

            .
            Addresses

            .
            ID

            Mask range 96-128
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: INNER_IPV6_SRC_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_MODE_CMD : opt})

    def traffic_config_inner_ipv6_src_step(self, ipv6):
        """
        This is the method the command: traffic_config option inner_ipv6_src_step
        Description:Step size of the source IP address when option 'inner_ipv6_src_mode' is
            set to increment or decrement. The following is valid only for
            traffic_generator ixnetwork_540:Any IPv6 step is accepted. Incrementing
            and decrementing depends only on ipv6_src_step and ipv6_src_count.The
            following is valid only for traffic_generator ixos:inner_ipv6_src_mode
            specifies how and if the inner_ipv6_src_addr is incremented.The
            inner_ipv6_src_mode depends on the IPv6 address type specified with
            inner_ipv6_src_addr parameter.Each inner_ipv6_src_mode allows a mask
            from a Mask range to be configured.The mask is configured using the
            inner_ipv6_src_mask attributeThe step used for incrementing or
            decrementing is configued using the inner_ipv6_src_step attribute which
            has the form of an IPv6 address.The inner_ipv6_src_mask attribute
            specifies which part of the inner_ipv6_src_step address is used for
            incrementing as follows:Mask range 4-4, incr_global_top_level
            decr_global_top_level: xxxx::0Mask range 24-24, incr_global_next_level
            decr_global_next_level: 0:0xx:xxxx::0Mask range 48-48,
            incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: 0:0:0:xxxx::0Mask range 96-96, incr_mcast_group
            decr_mcast_group: 0::xxxx:xxxxMask range 96-128, incr_host decr_host
            incr_intf_id decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range
            96-128, incr_host decr_host incr_intf_id decr_intf_id: 0::xxxx (when
            mask is 112)Mask range 0-128, incr_network decr_network:
            0::xxxx:xxxx:0:0 (when mask is 96)Mask range 0-128, incr_network
            decr_network: 0::xxxx:xxxx:0 (when mask is 112)HEX values marked with
            'x' in the format above are the inner_ipv6_src_step HEX values that are
            used for increment or decrement; HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_SRC_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_STEP_CMD : ipv6})

    def traffic_config_inner_ipv6_src_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_src_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_src_addr.
            1

            enable tracking by inner_ipv6_src_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_SRC_TRACKING_CMD : bool_opt})

    def traffic_config_inner_ipv6_traffic_class(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_traffic_class
        Description:Traffic class value of the IPv6 inner header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
            'l4_protocol' | value= 'gre' |
        Constants Available: INNER_IPV6_TRAFFIC_CLASS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_CMD : range})

    def traffic_config_inner_ipv6_traffic_class_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_ipv6_traffic_class_count
        Description:Numeric value which configures the number of times the
            inner_ipv6_traffic_class is incremeneted or decremented when
            inner_ipv6_traffic_class_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_TRAFFIC_CLASS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_COUNT_CMD : numeric})

    def traffic_config_inner_ipv6_traffic_class_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_ipv6_traffic_class_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_ipv6_traffic_class_step
            and inner_ipv6_traffic_class_count.
            decr

            the value is decremented as specified with inner_ipv6_traffic_class_step
            and inner_ipv6_traffic_class_count.
            list

            Parameter -inner_ipv6_traffic_class contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_TRAFFIC_CLASS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_MODE_CMD : opt})

    def traffic_config_inner_ipv6_traffic_class_step(self, range):
        """
        This is the method the command: traffic_config option inner_ipv6_traffic_class_step
        Description:Step value used to modify inner_ipv6_traffic_class when
            inner_ipv6_traffic_class_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_TRAFFIC_CLASS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_STEP_CMD : range})

    def traffic_config_inner_ipv6_traffic_class_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_ipv6_traffic_class_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_ipv6_traffic_class
            1

            enable tracking by inner_ipv6_traffic_class
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_IPV6_TRAFFIC_CLASS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_TRACKING_CMD : bool_opt})

    def traffic_config_inner_protocol(self, opt):
        """
        This is the method the command: traffic_config option inner_protocol
        Description:Configures a layer 3 protocol header. This option specifies whether to
            setup an IPv4 or IPv6 header (only used when l4_protocol is gre). Valid
            options are:ipv4ipv6none
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: INNER_PROTOCOL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_PROTOCOL_CMD : opt})

    def traffic_config_inner_protocol_count(self, numeric):
        """
        This is the method the command: traffic_config option inner_protocol_count
        Description:Numeric value which configures the number of times the inner_protocol is
            incremeneted or decremented when inner_protocol_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_PROTOCOL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_PROTOCOL_COUNT_CMD : numeric})

    def traffic_config_inner_protocol_mode(self, opt):
        """
        This is the method the command: traffic_config option inner_protocol_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with inner_protocol_step and
            inner_protocol_count.
            decr

            the value is decremented as specified with inner_protocol_step and
            inner_protocol_count.
            list

            Parameter -inner_protocol contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_PROTOCOL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_PROTOCOL_MODE_CMD : opt})

    def traffic_config_inner_protocol_step(self, hex):
        """
        This is the method the command: traffic_config option inner_protocol_step
        Description:Step value used to modify inner_protocol when inner_protocol_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_PROTOCOL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_PROTOCOL_STEP_CMD : hex})

    def traffic_config_inner_protocol_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option inner_protocol_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by inner_protocol
            1

            enable tracking by inner_protocol
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INNER_PROTOCOL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INNER_PROTOCOL_TRACKING_CMD : bool_opt})

    def traffic_config_integrity_signature(self, any):
        """
        This is the method the command: traffic_config option integrity_signature
        Description:Data integrity signature for the stream.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: INTEGRITY_SIGNATURE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INTEGRITY_SIGNATURE_CMD : any})

    def traffic_config_integrity_signature_offset(self, range):
        """
        This is the method the command: traffic_config option integrity_signature_offset
        Description:Data integrity signature offset for the stream. If
            -enable_auto_detect_instrumentation is 1, will be ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: INTEGRITY_SIGNATURE_OFFSET_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INTEGRITY_SIGNATURE_OFFSET_CMD : range})

    def traffic_config_inter_frame_gap(self, numeric):
        """
        This is the method the command: traffic_config option inter_frame_gap
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . This argument can be used to specify
            the time gap in clock ticks between transmitted frames.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: INTER_FRAME_GAP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INTER_FRAME_GAP_CMD : numeric})

    def traffic_config_inter_frame_gap_unit(self, opt):
        """
        This is the method the command: traffic_config option inter_frame_gap_unit
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id .
            Valid options are:
            bytes

            bytes
            ns

            nanoseconds
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: INTER_FRAME_GAP_UNIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INTER_FRAME_GAP_UNIT_CMD : opt})

    def traffic_config_intf_handle(self):
        """
        This is the method the command: traffic_config option intf_handle
        Description:This option is used to specify the interface handle to be associated
            with the IP static endpoints that are going to be created.
            DEFAULT
                Not supported
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: INTF_HANDLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.INTF_HANDLE_CMD : ""})

    def traffic_config_ip_bit_flags(self):
        """
        This is the method the command: traffic_config option ip_bit_flags
        Description:Not supported
            DEFAULT
                Not supported
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= '' |
        Constants Available: IP_BIT_FLAGS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_BIT_FLAGS_CMD : ""})

    def traffic_config_ip_checksum_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_checksum_count
        Description:Numeric value which configures the number of times the ip_checksum is
            incremeneted or decremented when ip_checksum_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CHECKSUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CHECKSUM_COUNT_CMD : numeric})

    def traffic_config_ip_checksum_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_checksum_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_checksum_step and
            ip_checksum_count.
            decr

            the value is decremented as specified with ip_checksum_step and
            ip_checksum_count.
            list

            Parameter -ip_checksum contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CHECKSUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CHECKSUM_MODE_CMD : opt})

    def traffic_config_ip_checksum_step(self, numeric):
        """
        This is the method the command: traffic_config option ip_checksum_step
        Description:Step value used to modify ip_checksum when ip_checksum_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CHECKSUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CHECKSUM_STEP_CMD : numeric})

    def traffic_config_ip_checksum_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_checksum_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_checksum
            1

            enable tracking by ip_checksum
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CHECKSUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CHECKSUM_TRACKING_CMD : bool_opt})

    def traffic_config_ip_cost(self, opt):
        """
        This is the method the command: traffic_config option ip_cost
        Description:Part of the Type of Service byte of the IP header datagram (bit 6). With traffic generator ixnetwork_540, this parameter configures QOS for IPv6 traffic only for ixaccess backwards compatibility mode (details in description for traffic_generator ixnetwork_540) and if qos_ipv6_traffic_class and ipv6_traffic_class parameters are missing.
        Constants Available: IP_COST_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_COST_CMD : opt})

    def traffic_config_ip_cost_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_cost_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_cost contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_COST_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_COST_MODE_CMD : opt})

    def traffic_config_ip_cost_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_cost_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_cost
            1

            enable tracking by ip_cost
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_COST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_COST_TRACKING_CMD : bool_opt})

    def traffic_config_ip_cu_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_cu_count
        Description:Numeric value which configures the number of times the ip_cu is
            incremeneted or decremented when ip_cu_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CU_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CU_COUNT_CMD : numeric})

    def traffic_config_ip_cu_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_cu_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_cu_step and ip_cu_count.
            decr

            the value is decremented as specified with ip_cu_step and ip_cu_count.
            list

            Parameter -ip_cu contains a list of values. Each packet will use one of
            the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CU_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CU_MODE_CMD : opt})

    def traffic_config_ip_cu_step(self, range):
        """
        This is the method the command: traffic_config option ip_cu_step
        Description:Step value used to modify ip_cu when ip_cu_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CU_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CU_STEP_CMD : range})

    def traffic_config_ip_cu_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_cu_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_cu
            1

            enable tracking by ip_cu
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_CU_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_CU_TRACKING_CMD : bool_opt})

    def traffic_config_ip_delay(self, opt):
        """
        This is the method the command: traffic_config option ip_delay
        Description:Part of the Type of Service byte of the IP header datagram (bit 3). With traffic_generator ixnetwork_540 this parameter configures QOS for IPv6 traffic only for ixaccess backwards compatibility mode (details in description for traffic_generator ixnetwork_540) and if qos_ipv6_traffic_class and ipv6_traffic_class parameters are missing.
        Constants Available: IP_DELAY_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DELAY_CMD : opt})

    def traffic_config_ip_delay_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_delay_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_delay contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_DELAY_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DELAY_MODE_CMD : opt})

    def traffic_config_ip_delay_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_delay_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_delay
            1

            enable tracking by ip_delay
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_DELAY_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DELAY_TRACKING_CMD : bool_opt})

    def traffic_config_ip_dscp_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_dscp_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_dscp_step and ip_dscp_count.
            decr

            the value is decremented as specified with ip_dscp_step and ip_dscp_count.
            list

            Parameter -ip_dscp contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_DSCP_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DSCP_MODE_CMD : opt})

    def traffic_config_ip_dscp_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_dscp_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_dscp
            1

            enable tracking by ip_dscp
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_DSCP_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DSCP_TRACKING_CMD : bool_opt})

    def traffic_config_ip_dst_prefix_len(self):
        """
        This is the method the command: traffic_config option ip_dst_prefix_len
        Description:This option is used to specify the value of the prefix length of the
            first IP static endpoint range. This option is available only when using
            the ixnetwork traffic generator for L2VPN traffic, but is not supported
            in this release.
            DEFAULT
                Not supported
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: IP_DST_PREFIX_LEN_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DST_PREFIX_LEN_CMD : ""})

    def traffic_config_ip_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_dst_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_dst_addr.
            1

            enable tracking by ip_dst_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_DST_TRACKING_CMD : bool_opt})

    def traffic_config_ip_fragment_last_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_fragment_last_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_fragment_last contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_LAST_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_LAST_MODE_CMD : opt})

    def traffic_config_ip_fragment_last_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_fragment_last_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_fragment_last
            1

            enable tracking by ip_fragment_last
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_LAST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_LAST_TRACKING_CMD : bool_opt})

    def traffic_config_ip_fragment_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_fragment_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_fragment contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_MODE_CMD : opt})

    def traffic_config_ip_fragment_offset_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_fragment_offset_count
        Description:Numeric value which configures the number of times the
            ip_fragment_offset is incremeneted or decremented when
            ip_fragment_offset_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_OFFSET_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_OFFSET_COUNT_CMD : numeric})

    def traffic_config_ip_fragment_offset_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_fragment_offset_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_fragment_offset_step and
            ip_fragment_offset_count.
            decr

            the value is decremented as specified with ip_fragment_offset_step and
            ip_fragment_offset_count.
            list

            Parameter -ip_fragment_offset contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_OFFSET_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_OFFSET_MODE_CMD : opt})

    def traffic_config_ip_fragment_offset_step(self, range):
        """
        This is the method the command: traffic_config option ip_fragment_offset_step
        Description:Step value used to modify ip_fragment_offset when
            ip_fragment_offset_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_OFFSET_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_OFFSET_STEP_CMD : range})

    def traffic_config_ip_fragment_offset_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_fragment_offset_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_fragment_offset
            1

            enable tracking by ip_fragment_offset
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_OFFSET_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_OFFSET_TRACKING_CMD : bool_opt})

    def traffic_config_ip_fragment_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_fragment_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_fragment
            1

            enable tracking by ip_fragment
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_FRAGMENT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_FRAGMENT_TRACKING_CMD : bool_opt})

    def traffic_config_ip_hdr_length_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_hdr_length_count
        Description:Numeric value which configures the number of times the ip_hdr_length is
            incremeneted or decremented when ip_hdr_length_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_HDR_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_HDR_LENGTH_COUNT_CMD : numeric})

    def traffic_config_ip_hdr_length_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_hdr_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_hdr_length_step and
            ip_hdr_length_count.
            decr

            the value is decremented as specified with ip_hdr_length_step and
            ip_hdr_length_count.
            list

            Parameter -ip_hdr_length contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_HDR_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_HDR_LENGTH_MODE_CMD : opt})

    def traffic_config_ip_hdr_length_step(self, numeric):
        """
        This is the method the command: traffic_config option ip_hdr_length_step
        Description:Step value used to modify ip_hdr_length when ip_hdr_length_mode is incr
            or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_HDR_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_HDR_LENGTH_STEP_CMD : numeric})

    def traffic_config_ip_hdr_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_hdr_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_hdr_length
            1

            enable tracking by ip_hdr_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_HDR_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_HDR_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_ip_id_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_id_count
        Description:Numeric value which configures the number of times the ip_id is
            incremeneted or decremented when ip_id_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_ID_COUNT_CMD : numeric})

    def traffic_config_ip_id_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_id_step and ip_id_count.
            decr

            the value is decremented as specified with ip_id_step and ip_id_count.
            list

            Parameter -ip_id contains a list of values. Each packet will use one of
            the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_ID_MODE_CMD : opt})

    def traffic_config_ip_id_step(self, range):
        """
        This is the method the command: traffic_config option ip_id_step
        Description:Step value used to modify ip_id when ip_id_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_ID_STEP_CMD : range})

    def traffic_config_ip_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_id
            1

            enable tracking by ip_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_ID_TRACKING_CMD : bool_opt})

    def traffic_config_ip_length_override(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_length_override
        Description:Allows to change the length in ip header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IP_LENGTH_OVERRIDE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_LENGTH_OVERRIDE_CMD : bool_opt})

    def traffic_config_ip_length_override_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_length_override_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_length_override contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_LENGTH_OVERRIDE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_LENGTH_OVERRIDE_MODE_CMD : opt})

    def traffic_config_ip_length_override_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_length_override_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_length_override
            1

            enable tracking by ip_length_override
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_LENGTH_OVERRIDE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_LENGTH_OVERRIDE_TRACKING_CMD : bool_opt})

    def traffic_config_ip_opt_loose_routing(self, ip):
        """
        This is the method the command: traffic_config option ip_opt_loose_routing
        Description:Will add an IP option for Loose Source and Record Route. This option is
            followed by an arbitrary length list of IP addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IP_OPT_LOOSE_ROUTING_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_OPT_LOOSE_ROUTING_CMD : ip})

    def traffic_config_ip_opt_security(self):
        """
        This is the method the command: traffic_config option ip_opt_security
        Description:Will add an IP option for security. Must be given with a nine byte
            option argument that contains the information, 2 bytes Security, 2 bytes
            Compartments, 2 bytes Handling Restrictions, and 3 bytes Transmission
            Control Code.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IP_OPT_SECURITY_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_OPT_SECURITY_CMD : ""})

    def traffic_config_ip_opt_strict_routing(self, ip):
        """
        This is the method the command: traffic_config option ip_opt_strict_routing
        Description:Will add an IP option for Strict Source and Record Route. This option is
            followed by an arbitrary length list of IP addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IP_OPT_STRICT_ROUTING_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_OPT_STRICT_ROUTING_CMD : ip})

    def traffic_config_ip_opt_timestamp(self):
        """
        This is the method the command: traffic_config option ip_opt_timestamp
        Description:Will add an IP option for Internet Timestamp.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IP_OPT_TIMESTAMP_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_OPT_TIMESTAMP_CMD : ""})

    def traffic_config_ip_precedence_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_precedence_count
        Description:Numeric value which configures the number of times the ip_precedence is
            incremeneted or decremented when ip_precedence_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PRECEDENCE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PRECEDENCE_COUNT_CMD : numeric})

    def traffic_config_ip_precedence_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_precedence_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_precedence_step and
            ip_precedence_count.
            decr

            the value is decremented as specified with ip_precedence_step and
            ip_precedence_count.
            list

            Parameter -ip_precedence contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PRECEDENCE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PRECEDENCE_MODE_CMD : opt})

    def traffic_config_ip_precedence_step(self, range):
        """
        This is the method the command: traffic_config option ip_precedence_step
        Description:Step value used to modify ip_precedence when ip_precedence_mode is incr
            or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PRECEDENCE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PRECEDENCE_STEP_CMD : range})

    def traffic_config_ip_precedence_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_precedence_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_precedence
            1

            enable tracking by ip_precedence
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PRECEDENCE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PRECEDENCE_TRACKING_CMD : bool_opt})

    def traffic_config_ip_protocol_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_protocol_count
        Description:Numeric value which configures the number of times the ip_protocol is
            incremeneted or decremented when ip_protocol_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PROTOCOL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PROTOCOL_COUNT_CMD : numeric})

    def traffic_config_ip_protocol_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_protocol_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_protocol_step and
            ip_protocol_count.
            decr

            the value is decremented as specified with ip_protocol_step and
            ip_protocol_count.
            list

            Parameter -ip_protocol contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PROTOCOL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PROTOCOL_MODE_CMD : opt})

    def traffic_config_ip_protocol_step(self, range):
        """
        This is the method the command: traffic_config option ip_protocol_step
        Description:Step value used to modify ip_protocol when ip_protocol_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PROTOCOL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PROTOCOL_STEP_CMD : range})

    def traffic_config_ip_protocol_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_protocol_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_protocol
            1

            enable tracking by ip_protocol
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_PROTOCOL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_PROTOCOL_TRACKING_CMD : bool_opt})

    def traffic_config_ip_reliability(self, opt):
        """
        This is the method the command: traffic_config option ip_reliability
        Description:Part of the Type of Service byte of the IP header datagram (bit 5). With traffic generator ixnetwork_540, this parameter configures QOS for IPv6 traffic only for ixaccess backwards compatibility mode (details in description for traffic_generator ixnetwork_540) and if qos_ipv6_traffic_class and ipv6_traffic_class parameters are missing.
        Constants Available: IP_RELIABILITY_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RELIABILITY_CMD : opt})

    def traffic_config_ip_reliability_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_reliability_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_reliability contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_RELIABILITY_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RELIABILITY_MODE_CMD : opt})

    def traffic_config_ip_reliability_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_reliability_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_reliability
            1

            enable tracking by ip_reliability
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_RELIABILITY_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RELIABILITY_TRACKING_CMD : bool_opt})

    def traffic_config_ip_reserved(self, opt):
        """
        This is the method the command: traffic_config option ip_reserved
        Description:Part of the Type of Service byte of the IP header datagram (bit 7). Valid options are:0 - (default)1
        Constants Available: IP_RESERVED_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RESERVED_CMD : opt})

    def traffic_config_ip_reserved_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_reserved_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_reserved contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_RESERVED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RESERVED_MODE_CMD : opt})

    def traffic_config_ip_reserved_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_reserved_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_reserved
            1

            enable tracking by ip_reserved
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_RESERVED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_RESERVED_TRACKING_CMD : bool_opt})

    def traffic_config_ip_src_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_src_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_src_addr.
            1

            enable tracking by ip_src_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_SRC_TRACKING_CMD : bool_opt})

    def traffic_config_ip_throughput(self, opt):
        """
        This is the method the command: traffic_config option ip_throughput
        Description:Part of the Type of Service byte of the IP header datagram (bit 4). With traffic generator ixnetwork_540, this parameter configures QOS for IPv6 traffic only for ixaccess backwards compatibility mode (details in description for traffic_generator ixnetwork_540) and if qos_ipv6_traffic_class and ipv6_traffic_class parameters are missing.
        Constants Available: IP_THROUGHPUT_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_THROUGHPUT_CMD : opt})

    def traffic_config_ip_throughput_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_throughput_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ip_throughput contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_THROUGHPUT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_THROUGHPUT_MODE_CMD : opt})

    def traffic_config_ip_throughput_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_throughput_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_throughput
            1

            enable tracking by ip_throughput
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_THROUGHPUT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_THROUGHPUT_TRACKING_CMD : bool_opt})

    def traffic_config_ip_total_length(self, range):
        """
        This is the method the command: traffic_config option ip_total_length
        Description:Total Length is the length of the datagram, measured in octets,
            including internet header and data.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IP_TOTAL_LENGTH_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TOTAL_LENGTH_CMD : range})

    def traffic_config_ip_total_length_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_total_length_count
        Description:Numeric value which configures the number of times the ip_total_length
            is incremeneted or decremented when ip_total_length_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TOTAL_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TOTAL_LENGTH_COUNT_CMD : numeric})

    def traffic_config_ip_total_length_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_total_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_total_length_step and
            ip_total_length_count.
            decr

            the value is decremented as specified with ip_total_length_step and
            ip_total_length_count.
            list

            Parameter -ip_total_length contains a list of values. Each packet will
            use one of the values from the list.
            auto

            the length of the datagram, measured in octets is autoset. Parameter
            ip_total_length is ignored if present.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TOTAL_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TOTAL_LENGTH_MODE_CMD : opt})

    def traffic_config_ip_total_length_step(self, range):
        """
        This is the method the command: traffic_config option ip_total_length_step
        Description:Step value used to modify ip_total_length when ip_total_length_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TOTAL_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TOTAL_LENGTH_STEP_CMD : range})

    def traffic_config_ip_total_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_total_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_total_length
            1

            enable tracking by ip_total_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TOTAL_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TOTAL_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_ip_ttl_count(self, numeric):
        """
        This is the method the command: traffic_config option ip_ttl_count
        Description:Numeric value which configures the number of times the ip_ttl is
            incremeneted or decremented when ip_ttl_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TTL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TTL_COUNT_CMD : numeric})

    def traffic_config_ip_ttl_mode(self, opt):
        """
        This is the method the command: traffic_config option ip_ttl_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ip_ttl_step and ip_ttl_count.
            decr

            the value is decremented as specified with ip_ttl_step and ip_ttl_count.
            list

            Parameter -ip_ttl contains a list of values. Each packet will use one of
            the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TTL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TTL_MODE_CMD : opt})

    def traffic_config_ip_ttl_step(self, range):
        """
        This is the method the command: traffic_config option ip_ttl_step
        Description:Step value used to modify ip_ttl when ip_ttl_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TTL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TTL_STEP_CMD : range})

    def traffic_config_ip_ttl_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ip_ttl_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ip_ttl
            1

            enable tracking by ip_ttl
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IP_TTL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IP_TTL_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_md5sha1_string(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_md5sha1_string
        Description:This is only for '-ipv6_extension_header authentication'. When
            ipv6_auth_type is 'md5' this represents the IPv6 Authentication MD5
            field. The length must be 16 bytes at most. When ipv6_auth_type is
            'sha1' this represents the IPv6 Authentication SHA1 field. The length
            must be 20 bytes at most. The field will be calculated automatically if
            the parameter is not specified.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_MD5SHA1_STRING_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_CMD : any})

    def traffic_config_ipv6_auth_md5sha1_string_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_md5sha1_string_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_md5sha1_string is
            incremeneted or decremented when ipv6_auth_md5sha1_string_mode is incr
            or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_MD5SHA1_STRING_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_md5sha1_string_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_md5sha1_string_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_md5sha1_string_step
            and ipv6_auth_md5sha1_string_count.
            decr

            the value is decremented as specified with ipv6_auth_md5sha1_string_step
            and ipv6_auth_md5sha1_string_count.
            list

            Parameter -ipv6_auth_md5sha1_string contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_MD5SHA1_STRING_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_MODE_CMD : opt})

    def traffic_config_ipv6_auth_md5sha1_string_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_md5sha1_string_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_md5sha1_string when
            ipv6_auth_md5sha1_string_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_MD5SHA1_STRING_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_STEP_CMD : any})

    def traffic_config_ipv6_auth_md5sha1_string_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_md5sha1_string_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_md5sha1_string
            1

            enable tracking by ipv6_auth_md5sha1_string
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_MD5SHA1_STRING_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_next_header(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_next_header
        Description:This is only for '-ipv6_extension_header authentication'. Next header in
            the authentication extention header. Range 0 - 255.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_NEXT_HEADER_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_CMD : range})

    def traffic_config_ipv6_auth_next_header_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_next_header_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_next_header is
            incremeneted or decremented when ipv6_auth_next_header_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_NEXT_HEADER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_next_header_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_next_header_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_next_header_step
            and ipv6_auth_next_header_count.
            decr

            the value is decremented as specified with ipv6_auth_next_header_step
            and ipv6_auth_next_header_count.
            list

            Parameter -ipv6_auth_next_header contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_NEXT_HEADER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_MODE_CMD : opt})

    def traffic_config_ipv6_auth_next_header_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_next_header_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_next_header when ipv6_auth_next_header_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_NEXT_HEADER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_STEP_CMD : range})

    def traffic_config_ipv6_auth_next_header_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_next_header_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_next_header
            1

            enable tracking by ipv6_auth_next_header
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_NEXT_HEADER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_padding(self, hex):
        """
        This is the method the command: traffic_config option ipv6_auth_padding
        Description:This is only for '-ipv6_extension_header authentication'. Configure
            padding for authentication extension header. HEX values accepted.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PADDING_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PADDING_CMD : hex})

    def traffic_config_ipv6_auth_padding_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_padding_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_padding is
            incremeneted or decremented when ipv6_auth_padding_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PADDING_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PADDING_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_padding_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_padding_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_padding_step and
            ipv6_auth_padding_count.
            decr

            the value is decremented as specified with ipv6_auth_padding_step and
            ipv6_auth_padding_count.
            list

            Parameter -ipv6_auth_padding contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PADDING_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PADDING_MODE_CMD : opt})

    def traffic_config_ipv6_auth_padding_step(self, hex):
        """
        This is the method the command: traffic_config option ipv6_auth_padding_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_padding when ipv6_auth_padding_mode is incr or
            decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PADDING_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PADDING_STEP_CMD : hex})

    def traffic_config_ipv6_auth_padding_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_padding_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_padding
            1

            enable tracking by ipv6_auth_padding
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PADDING_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PADDING_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_payload_len(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_payload_len
        Description:This is only for '-ipv6_extension_header authentication'. The length of
            the authentication data, expressed in 32-bit words.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_AUTH_PAYLOAD_LEN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_CMD : range})

    def traffic_config_ipv6_auth_payload_len_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_payload_len_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_payload_len is
            incremeneted or decremented when ipv6_auth_payload_len_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PAYLOAD_LEN_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_payload_len_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_payload_len_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_payload_len_step
            and ipv6_auth_payload_len_count.
            decr

            the value is decremented as specified with ipv6_auth_payload_len_step
            and ipv6_auth_payload_len_count.
            list

            Parameter -ipv6_auth_payload_len contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PAYLOAD_LEN_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_MODE_CMD : opt})

    def traffic_config_ipv6_auth_payload_len_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_payload_len_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_payload_len when ipv6_auth_payload_len_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PAYLOAD_LEN_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_STEP_CMD : range})

    def traffic_config_ipv6_auth_payload_len_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_payload_len_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_payload_len
            1

            enable tracking by ipv6_auth_payload_len
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_PAYLOAD_LEN_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_reserved(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_reserved
        Description:This is only for '-ipv6_extension_header authentication'. Configure the
            2 byte reserved field in the authetication extension header.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_RESERVED_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_RESERVED_CMD : any})

    def traffic_config_ipv6_auth_reserved_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_reserved_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_reserved is
            incremeneted or decremented when ipv6_auth_reserved_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_RESERVED_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_RESERVED_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_reserved_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_reserved_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_reserved_step and
            ipv6_auth_reserved_count.
            decr

            the value is decremented as specified with ipv6_auth_reserved_step and
            ipv6_auth_reserved_count.
            list

            Parameter -ipv6_auth_reserved contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_RESERVED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_RESERVED_MODE_CMD : opt})

    def traffic_config_ipv6_auth_reserved_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_reserved_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_reserved when ipv6_auth_reserved_mode is incr
            or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_RESERVED_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_RESERVED_STEP_CMD : any})

    def traffic_config_ipv6_auth_reserved_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_reserved_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_reserved
            1

            enable tracking by ipv6_auth_reserved
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_RESERVED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_RESERVED_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_seq_num(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_seq_num
        Description:This is only for '-ipv6_extension_header authentication'. This is only
            for '-ipv6_extension_header authentication'. A sequence counter for the
            authentication header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_AUTH_SEQ_NUM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_CMD : range})

    def traffic_config_ipv6_auth_seq_num_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_seq_num_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_seq_num is
            incremeneted or decremented when ipv6_auth_seq_num_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SEQ_NUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_seq_num_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_seq_num_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_seq_num_step and
            ipv6_auth_seq_num_count.
            decr

            the value is decremented as specified with ipv6_auth_seq_num_step and
            ipv6_auth_seq_num_count.
            list

            Parameter -ipv6_auth_seq_num contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SEQ_NUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_MODE_CMD : opt})

    def traffic_config_ipv6_auth_seq_num_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_seq_num_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_seq_num when ipv6_auth_seq_num_mode is incr or
            decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SEQ_NUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_STEP_CMD : any})

    def traffic_config_ipv6_auth_seq_num_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_seq_num_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_seq_num
            1

            enable tracking by ipv6_auth_seq_num
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SEQ_NUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_spi(self, range):
        """
        This is the method the command: traffic_config option ipv6_auth_spi
        Description:This is only for '-ipv6_extension_header authentication'. The security
            parameter index (SPI) associated with the authentication header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_AUTH_SPI_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SPI_CMD : range})

    def traffic_config_ipv6_auth_spi_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_spi_count
        Description:This is only for '-ipv6_extension_header authentication'. Numeric value
            which configures the number of times the ipv6_auth_spi is incremeneted
            or decremented when ipv6_auth_spi_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SPI_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SPI_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_spi_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_spi_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_auth_spi_step and
            ipv6_auth_spi_count.
            decr

            the value is decremented as specified with ipv6_auth_spi_step and
            ipv6_auth_spi_count.
            list

            Parameter -ipv6_auth_spi contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SPI_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SPI_MODE_CMD : opt})

    def traffic_config_ipv6_auth_spi_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_spi_step
        Description:This is only for '-ipv6_extension_header authentication'. Step value
            used to modify ipv6_auth_spi when ipv6_auth_spi_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SPI_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SPI_STEP_CMD : any})

    def traffic_config_ipv6_auth_spi_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_spi_tracking
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            0

            disable tracking by ipv6_auth_spi
            1

            enable tracking by ipv6_auth_spi
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_SPI_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_SPI_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_string(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_string
        Description:This is only for '-ipv6_extension_header authentication'. A variable
            length string containing the packets integrity check value (ICV). With
            traffic_generator ixnetwork_540 this parameter is deprecated. Use
            ipv6_auth_md5sha1_string instead.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IPV6_AUTH_STRING_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_STRING_CMD : any})

    def traffic_config_ipv6_auth_string_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_auth_string_count
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            is deprecated. Use ipv6_auth_md5sha1_string_count instead.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_STRING_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_STRING_COUNT_CMD : numeric})

    def traffic_config_ipv6_auth_string_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_string_mode
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            is deprecated. Use ipv6_auth_md5sha1_string_mode instead.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_STRING_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_STRING_MODE_CMD : opt})

    def traffic_config_ipv6_auth_string_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_auth_string_step
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            is deprecated. Use ipv6_auth_md5sha1_string_step instead.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_STRING_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_STRING_STEP_CMD : any})

    def traffic_config_ipv6_auth_string_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_auth_string_tracking
        Description:This is only for '-ipv6_extension_header authentication'. This parameter
            is deprecated. Use ipv6_auth_md5sha1_string_tracking instead.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_STRING_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_STRING_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_auth_type(self, opt):
        """
        This is the method the command: traffic_config option ipv6_auth_type
        Description:This is only for '-ipv6_extension_header authentication'.
            Valid options are:
            md5

            default
            sha1

            SHA1
            DEFAULT

            md5
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_AUTH_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_AUTH_TYPE_CMD : opt})

    def traffic_config_ipv6_dst_mask(self, range):
        """
        This is the method the command: traffic_config option ipv6_dst_mask
        Description:Specify IPv6 mask to be used for ipv6_dst_addr to increment. This
            parameter is ignored with traffic_generator ixnetwork_540. Incrementing
            and decrementing can be done with any step value with traffic_generator
            ixnetwork_540.Default value is specific to the ipv6_dst_mode as
            follows:incr_global_top_level decr_global_top_level: Default
            4incr_global_next_level decr_global_next_level: Default
            24incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: Default 48incr_mcast_group decr_mcast_group:
            Default 96incr_host decr_host incr_intf_id decr_intf_id: Default
            96incr_network decr_network: Default 96ipv6_dst_mode specifies how and
            if the ipv6_dst_addr is incremented.The ipv6_dst_mode depends on the
            IPv6 address type specified with ipv6_dst_addr parameter.Each
            ipv6_dst_mode allows a mask from a Mask range to be configured.The mask
            is configured using the ipv6_dst_mask attributeThe step used for
            incrementing or decrementing is configued using the ipv6_dst_step
            attribute which has the form of an IPv6 address.The ipv6_dst_mask
            attribute specifies which part of the ipv6_dst_step address is used for
            incrementing as follows:Mask range 4-4, incr_global_top_level
            decr_global_top_level: xxxx::0Mask range 24-24, incr_global_next_level
            decr_global_next_level: 0:0xx:xxxx::0Mask range 48-48,
            incr_global_site_level decr_global_site_level incr_local_site_subnet
            decr_local_site_subnet: 0:0:0:xxxx::0Mask range 96-96, incr_mcast_group
            decr_mcast_group: 0::xxxx:xxxxMask range 96-128, incr_host decr_host
            incr_intf_id decr_intf_id: 0::xxxx:xxxx (when mask is 96)Mask range
            96-128, incr_host decr_host incr_intf_id decr_intf_id: 0::xxxx (when
            mask is 112)Mask range 0-128, incr_network decr_network:
            0::xxxx:xxxx:0:0 (when mask is 96)Mask range 0-128, incr_network
            decr_network: 0::xxxx:xxxx:0 (when mask is 112)HEX values marked with
            'x' in the format above are the ipv6_dst_step HEX values that are used
            for increment or decrement; HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork' |
        Constants Available: IPV6_DST_MASK_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_DST_MASK_CMD : range})

    def traffic_config_ipv6_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_dst_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_dst_addr
            1

            enable tracking by ipv6_dst_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_DST_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_encap_seq_number(self, any):
        """
        This is the method the command: traffic_config option ipv6_encap_seq_number
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header encapsulation.Configure 4 bytes HEX value for
            'Sequence Number'.
            DEFAULT

            0x0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SEQ_NUMBER_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_CMD : any})

    def traffic_config_ipv6_encap_seq_number_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_encap_seq_number_count
        Description:Numeric value which configures the number of times the
            ipv6_encap_seq_number is incremeneted or decremented when
            ipv6_encap_seq_number_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SEQ_NUMBER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_COUNT_CMD : numeric})

    def traffic_config_ipv6_encap_seq_number_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_encap_seq_number_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_encap_seq_number_step
            and ipv6_encap_seq_number_count.
            decr

            the value is decremented as specified with ipv6_encap_seq_number_step
            and ipv6_encap_seq_number_count.
            list

            Parameter -ipv6_encap_seq_number contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SEQ_NUMBER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_MODE_CMD : opt})

    def traffic_config_ipv6_encap_seq_number_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_encap_seq_number_step
        Description:Step value used to modify ipv6_encap_seq_number when
            ipv6_encap_seq_number_mode is incr or decr.
            DEFAULT

            0x1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SEQ_NUMBER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_STEP_CMD : any})

    def traffic_config_ipv6_encap_seq_number_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_encap_seq_number_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_encap_seq_number
            1

            enable tracking by ipv6_encap_seq_number
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SEQ_NUMBER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_encap_spi(self, range):
        """
        This is the method the command: traffic_config option ipv6_encap_spi
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header encapsulation.Configure 'Security Parameters
            Index' (0-4294967295).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SPI_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SPI_CMD : range})

    def traffic_config_ipv6_encap_spi_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_encap_spi_count
        Description:Numeric value which configures the number of times the ipv6_encap_spi is
            incremeneted or decremented when ipv6_encap_spi_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SPI_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SPI_COUNT_CMD : numeric})

    def traffic_config_ipv6_encap_spi_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_encap_spi_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_encap_spi_step and
            ipv6_encap_spi_count.
            decr

            the value is decremented as specified with ipv6_encap_spi_step and
            ipv6_encap_spi_count.
            list

            Parameter -ipv6_encap_spi contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SPI_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SPI_MODE_CMD : opt})

    def traffic_config_ipv6_encap_spi_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_encap_spi_step
        Description:Step value used to modify ipv6_encap_spi when ipv6_encap_spi_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SPI_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SPI_STEP_CMD : range})

    def traffic_config_ipv6_encap_spi_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_encap_spi_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_encap_spi
            1

            enable tracking by ipv6_encap_spi
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ENCAP_SPI_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ENCAP_SPI_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_extension_header(self, header):
        """
        This is the method the command: traffic_config option ipv6_extension_header
        Description:The type of the next extension header. Valid options are: none There is no next header.hop_by_hop Next header is hop-by-hop options.routing Next header has routing options.destination Next header has destination options.authenticationNext header is an IPSEC AH.encapsulation Next header is encapsulation. pseudo Next header is pseudo. fragment Payload is a fragment.
        Constants Available: IPV6_EXTENSION_HEADER_CMD
        Supported:IxNetwork
        Keyword arguments:
        header --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_EXTENSION_HEADER_CMD : header})

    def traffic_config_ipv6_flow_label_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_flow_label_count
        Description:Numeric value which configures the number of times the ipv6_flow_label
            is incremeneted or decremented when ipv6_flow_label_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_LABEL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_LABEL_COUNT_CMD : numeric})

    def traffic_config_ipv6_flow_label_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_flow_label_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_flow_label_step and
            ipv6_flow_label_count.
            decr

            the value is decremented as specified with ipv6_flow_label_step and
            ipv6_flow_label_count.
            list

            Parameter -ipv6_flow_label contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_LABEL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_LABEL_MODE_CMD : opt})

    def traffic_config_ipv6_flow_label_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_flow_label_step
        Description:Step value used to modify ipv6_flow_label when ipv6_flow_label_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_LABEL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_LABEL_STEP_CMD : range})

    def traffic_config_ipv6_flow_label_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_flow_label_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_flow_label
            1

            enable tracking by ipv6_flow_label
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_LABEL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_LABEL_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_flow_version(self, range):
        """
        This is the method the command: traffic_config option ipv6_flow_version
        Description:Configure flow version of the IPv6 header.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_VERSION_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_VERSION_CMD : range})

    def traffic_config_ipv6_flow_version_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_flow_version_count
        Description:Numeric value which configures the number of times the ipv6_flow_version
            is incremeneted or decremented when ipv6_flow_version_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_VERSION_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_VERSION_COUNT_CMD : numeric})

    def traffic_config_ipv6_flow_version_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_flow_version_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_flow_version_step and
            ipv6_flow_version_count.
            decr

            the value is decremented as specified with ipv6_flow_version_step and
            ipv6_flow_version_count.
            list

            Parameter -ipv6_flow_version contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_VERSION_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_VERSION_MODE_CMD : opt})

    def traffic_config_ipv6_flow_version_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_flow_version_step
        Description:Step value used to modify ipv6_flow_version when ipv6_flow_version_mode
            is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_VERSION_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_VERSION_STEP_CMD : range})

    def traffic_config_ipv6_flow_version_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_flow_version_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_flow_version
            1

            enable tracking by ipv6_flow_version
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FLOW_VERSION_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FLOW_VERSION_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_frag_id_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_frag_id_count
        Description:Numeric value which configures the number of times the ipv6_frag_id is
            incremeneted or decremented when ipv6_frag_id_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_ID_COUNT_CMD : numeric})

    def traffic_config_ipv6_frag_id_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_frag_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_frag_id_step and
            ipv6_frag_id_count.
            decr

            the value is decremented as specified with ipv6_frag_id_step and
            ipv6_frag_id_count.
            list

            Parameter -ipv6_frag_id contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_ID_MODE_CMD : opt})

    def traffic_config_ipv6_frag_id_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_frag_id_step
        Description:Step value used to modify ipv6_frag_id when ipv6_frag_id_mode is incr or
            decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_ID_STEP_CMD : range})

    def traffic_config_ipv6_frag_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_frag_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_frag_id
            1

            enable tracking by ipv6_frag_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_ID_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_frag_more_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_frag_more_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -ipv6_frag_more_flag contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_MORE_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_MORE_FLAG_MODE_CMD : opt})

    def traffic_config_ipv6_frag_more_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_frag_more_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_frag_more_flag
            1

            enable tracking by ipv6_frag_more_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_MORE_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_MORE_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_frag_offset_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_frag_offset_count
        Description:Numeric value which configures the number of times the ipv6_frag_offset
            is incremeneted or decremented when ipv6_frag_offset_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_OFFSET_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_OFFSET_COUNT_CMD : numeric})

    def traffic_config_ipv6_frag_offset_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_frag_offset_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_frag_offset_step and
            ipv6_frag_offset_count.
            decr

            the value is decremented as specified with ipv6_frag_offset_step and
            ipv6_frag_offset_count.
            list

            Parameter -ipv6_frag_offset contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_OFFSET_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_OFFSET_MODE_CMD : opt})

    def traffic_config_ipv6_frag_offset_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_frag_offset_step
        Description:Step value used to modify ipv6_frag_offset when ipv6_frag_offset_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_OFFSET_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_OFFSET_STEP_CMD : range})

    def traffic_config_ipv6_frag_offset_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_frag_offset_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_frag_offset
            1

            enable tracking by ipv6_frag_offset
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_OFFSET_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_OFFSET_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_frag_res_2bit(self, range):
        """
        This is the method the command: traffic_config option ipv6_frag_res_2bit
        Description:This is only for '-ipv6_extension_header fragment'. A 2-bit reserved field.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_2BIT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_2BIT_CMD : range})

    def traffic_config_ipv6_frag_res_2bit_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_frag_res_2bit_count
        Description:Numeric value which configures the number of times the
            ipv6_frag_res_2bit is incremeneted or decremented when
            ipv6_frag_res_2bit_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_2BIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_2BIT_COUNT_CMD : numeric})

    def traffic_config_ipv6_frag_res_2bit_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_frag_res_2bit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_frag_res_2bit_step and
            ipv6_frag_res_2bit_count.
            decr

            the value is decremented as specified with ipv6_frag_res_2bit_step and
            ipv6_frag_res_2bit_count.
            list

            Parameter -ipv6_frag_res_2bit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_2BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_2BIT_MODE_CMD : opt})

    def traffic_config_ipv6_frag_res_2bit_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_frag_res_2bit_step
        Description:Step value used to modify ipv6_frag_res_2bit when
            ipv6_frag_res_2bit_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_2BIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_2BIT_STEP_CMD : range})

    def traffic_config_ipv6_frag_res_2bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_frag_res_2bit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_frag_res_2bit
            1

            enable tracking by ipv6_frag_res_2bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_2BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_2BIT_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_frag_res_8bit(self, any):
        """
        This is the method the command: traffic_config option ipv6_frag_res_8bit
        Description:This is only for '-ipv6_extension_header fragment'. An 8-bit reserved field.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_8BIT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_8BIT_CMD : any})

    def traffic_config_ipv6_frag_res_8bit_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_frag_res_8bit_count
        Description:Numeric value which configures the number of times the
            ipv6_frag_res_8bit is incremeneted or decremented when
            ipv8_frag_res_2bit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_8BIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_8BIT_COUNT_CMD : numeric})

    def traffic_config_ipv6_frag_res_8bit_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_frag_res_8bit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_frag_res_8bit_step and
            ipv6_frag_res_8bit_count.
            decr

            the value is decremented as specified with ipv6_frag_res_8bit_step and
            ipv6_frag_res_8bit_count.
            list

            Parameter -ipv6_frag_res_8bit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_8BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_8BIT_MODE_CMD : opt})

    def traffic_config_ipv6_frag_res_8bit_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_frag_res_8bit_step
        Description:Step value used to modify ipv6_frag_res_8bit when
            ipv6_frag_res_8bit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_8BIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_8BIT_STEP_CMD : range})

    def traffic_config_ipv6_frag_res_8bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_frag_res_8bit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_frag_res_8bit
            1

            enable tracking by ipv6_frag_res_8bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_FRAG_RES_8BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_FRAG_RES_8BIT_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_hop_by_hop_options(self):
        """
        This is the method the command: traffic_config option ipv6_hop_by_hop_options
        Description:This is only for '-ipv6_extension_header hop_by_hop'. This option will
            represent a list of keyed values. See Return Values table following
            -tx_ports_list. The following types are accepted with ixnetwork_540
            traffic generator: pad1 - valid with traffic_generator ixos and
            ixnetwork_540padn - valid with traffic_generator ixos and
            ixnetwork_540user_defined - valid only with traffic generator ixnetwork_540.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_HOP_BY_HOP_OPTIONS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_HOP_BY_HOP_OPTIONS_CMD : ""})

    def traffic_config_ipv6_hop_limit_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_hop_limit_count
        Description:Numeric value which configures the number of times the ipv6_hop_limit is
            incremeneted or decremented when ipv6_hop_limit_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_HOP_LIMIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_HOP_LIMIT_COUNT_CMD : numeric})

    def traffic_config_ipv6_hop_limit_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_hop_limit_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_hop_limit_step and
            ipv6_hop_limit_count.
            decr

            the value is decremented as specified with ipv6_hop_limit_step and
            ipv6_hop_limit_count.
            list

            Parameter -ipv6_hop_limit contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_HOP_LIMIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_HOP_LIMIT_MODE_CMD : opt})

    def traffic_config_ipv6_hop_limit_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_hop_limit_step
        Description:Step value used to modify ipv6_hop_limit when ipv6_hop_limit_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_HOP_LIMIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_HOP_LIMIT_STEP_CMD : range})

    def traffic_config_ipv6_hop_limit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_hop_limit_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_hop_limit
            1

            enable tracking by ipv6_hop_limit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_HOP_LIMIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_HOP_LIMIT_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_next_header_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_next_header_count
        Description:Numeric value which configures the number of times the ipv6_next_header
            is incremeneted or decremented when ipv6_next_header_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_NEXT_HEADER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_NEXT_HEADER_COUNT_CMD : numeric})

    def traffic_config_ipv6_next_header_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_next_header_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_next_header_step and
            ipv6_next_header_count.
            decr

            the value is decremented as specified with ipv6_next_header_step and
            ipv6_next_header_count.
            list

            Parameter -ipv6_next_header contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_NEXT_HEADER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_NEXT_HEADER_MODE_CMD : opt})

    def traffic_config_ipv6_next_header_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_next_header_step
        Description:Step value used to modify ipv6_next_header when ipv6_next_header_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_NEXT_HEADER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_NEXT_HEADER_STEP_CMD : range})

    def traffic_config_ipv6_next_header_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_next_header_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_next_header
            1

            enable tracking by ipv6_next_header
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_NEXT_HEADER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_NEXT_HEADER_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_pseudo_dst_addr(self, ipv6):
        """
        This is the method the command: traffic_config option ipv6_pseudo_dst_addr
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header pseudo.Configure IPv6 destination address for
            pseudo extension header.
            DEFAULT

            0::0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_DST_ADDR_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_CMD : ipv6})

    def traffic_config_ipv6_pseudo_dst_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_pseudo_dst_addr_count
        Description:Numeric value which configures the number of times the
            ipv6_pseudo_dst_addr is incremeneted or decremented when
            ipv6_pseudo_dst_addr_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_DST_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_COUNT_CMD : numeric})

    def traffic_config_ipv6_pseudo_dst_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_dst_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_pseudo_dst_addr_step and
            ipv6_pseudo_dst_addr_count.
            decr

            the value is decremented as specified with ipv6_pseudo_dst_addr_step and
            ipv6_pseudo_dst_addr_count.
            list

            Parameter -ipv6_pseudo_dst_addr contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_DST_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_MODE_CMD : opt})

    def traffic_config_ipv6_pseudo_dst_addr_step(self, ipv6):
        """
        This is the method the command: traffic_config option ipv6_pseudo_dst_addr_step
        Description:Step value used to modify ipv6_pseudo_dst_addr when
            ipv6_pseudo_dst_addr_mode is incr or decr.
            DEFAULT

            0::1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_DST_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_STEP_CMD : ipv6})

    def traffic_config_ipv6_pseudo_dst_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_dst_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_pseudo_dst_addr
            1

            enable tracking by ipv6_pseudo_dst_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_DST_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_pseudo_src_addr(self, ipv6):
        """
        This is the method the command: traffic_config option ipv6_pseudo_src_addr
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header pseudo.Configure IPv6 destination address for
            pseudo extension header.
            DEFAULT

            0::0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_SRC_ADDR_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_CMD : ipv6})

    def traffic_config_ipv6_pseudo_src_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_pseudo_src_addr_count
        Description:Numeric value which configures the number of times the
            ipv6_pseudo_src_addr is incremeneted or decremented when
            ipv6_pseudo_src_addr_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_SRC_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_COUNT_CMD : numeric})

    def traffic_config_ipv6_pseudo_src_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_src_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_pseudo_src_addr_step and
            ipv6_pseudo_src_addr_count.
            decr

            the value is decremented as specified with ipv6_pseudo_src_addr_step and
            ipv6_pseudo_src_addr_count.
            list

            Parameter -ipv6_pseudo_src_addr contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_SRC_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_MODE_CMD : opt})

    def traffic_config_ipv6_pseudo_src_addr_step(self, ipv6):
        """
        This is the method the command: traffic_config option ipv6_pseudo_src_addr_step
        Description:Step value used to modify ipv6_pseudo_src_addr when
            ipv6_pseudo_src_addr_mode is incr or decr.
            DEFAULT

            0::1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_SRC_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_STEP_CMD : ipv6})

    def traffic_config_ipv6_pseudo_src_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_src_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_pseudo_src_addr
            1

            enable tracking by ipv6_pseudo_src_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_SRC_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_pseudo_uppper_layer_pkt_length(self, range):
        """
        This is the method the command: traffic_config option ipv6_pseudo_uppper_layer_pkt_length
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header pseudo.Configure Upper-Layer Packet Length for
            pseudo extension header.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_CMD : range})

    def traffic_config_ipv6_pseudo_uppper_layer_pkt_length_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_pseudo_uppper_layer_pkt_length_count
        Description:Numeric value which configures the number of times the
            ipv6_pseudo_uppper_layer_pkt_length is incremeneted or decremented when
            ipv6_pseudo_uppper_layer_pkt_length_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_COUNT_CMD : numeric})

    def traffic_config_ipv6_pseudo_uppper_layer_pkt_length_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_uppper_layer_pkt_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with
            ipv6_pseudo_uppper_layer_pkt_length_step and
            ipv6_pseudo_uppper_layer_pkt_length_count.
            decr

            the value is decremented as specified with
            ipv6_pseudo_uppper_layer_pkt_length_step and
            ipv6_pseudo_uppper_layer_pkt_length_count.
            list

            Parameter -ipv6_pseudo_uppper_layer_pkt_length contains a list of
            values. Each packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_MODE_CMD : opt})

    def traffic_config_ipv6_pseudo_uppper_layer_pkt_length_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_pseudo_uppper_layer_pkt_length_step
        Description:Step value used to modify ipv6_pseudo_uppper_layer_pkt_length when
            ipv6_pseudo_uppper_layer_pkt_length_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_STEP_CMD : range})

    def traffic_config_ipv6_pseudo_uppper_layer_pkt_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_uppper_layer_pkt_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_pseudo_uppper_layer_pkt_length
            1

            enable tracking by ipv6_pseudo_uppper_layer_pkt_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_pseudo_zero_number(self, any):
        """
        This is the method the command: traffic_config option ipv6_pseudo_zero_number
        Description:Valid only for traffic_generator ixnetwork_540 and
            -ipv6_extension_header pseudo.Configure 4 bytes HEX 'Zero' field for
            pseudo extension header.
            DEFAULT

            0x0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_ZERO_NUMBER_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_CMD : any})

    def traffic_config_ipv6_pseudo_zero_number_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_pseudo_zero_number_count
        Description:Numeric value which configures the number of times the
            ipv6_pseudo_zero_number is incremeneted or decremented when
            ipv6_pseudo_zero_number_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_ZERO_NUMBER_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_COUNT_CMD : numeric})

    def traffic_config_ipv6_pseudo_zero_number_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_zero_number_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_pseudo_zero_number_step
            and ipv6_pseudo_zero_number_count.
            decr

            the value is decremented as specified with ipv6_pseudo_zero_number_step
            and ipv6_pseudo_zero_number_count.
            list

            Parameter -ipv6_pseudo_zero_number contains a list of values. Each
            packet will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_ZERO_NUMBER_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_MODE_CMD : opt})

    def traffic_config_ipv6_pseudo_zero_number_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_pseudo_zero_number_step
        Description:Step value used to modify ipv6_pseudo_zero_number when
            ipv6_pseudo_zero_number_mode is incr or decr.
            DEFAULT

            0x1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_ZERO_NUMBER_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_STEP_CMD : any})

    def traffic_config_ipv6_pseudo_zero_number_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_pseudo_zero_number_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_pseudo_zero_number
            1

            enable tracking by ipv6_pseudo_zero_number
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_PSEUDO_ZERO_NUMBER_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_routing_node_list(self, ipv6):
        """
        This is the method the command: traffic_config option ipv6_routing_node_list
        Description:This is only for '-ipv6_extension_header routing'. A list of 128-bit
            IPv6 addresses.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IPV6_ROUTING_NODE_LIST_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        ipv6 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_NODE_LIST_CMD : ipv6})

    def traffic_config_ipv6_routing_res(self, any):
        """
        This is the method the command: traffic_config option ipv6_routing_res
        Description:This is only for '-ipv6_extension_header routing'. A 32-bit reserved field.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: IPV6_ROUTING_RES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_RES_CMD : any})

    def traffic_config_ipv6_routing_res_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_routing_res_count
        Description:Numeric value which configures the number of times the ipv6_routing_res
            is incremeneted or decremented when ipv6_routing_res_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_RES_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_RES_COUNT_CMD : numeric})

    def traffic_config_ipv6_routing_res_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_routing_res_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_routing_res_step and
            ipv6_routing_res_count.
            decr

            the value is decremented as specified with ipv6_routing_res_step and
            ipv6_routing_res_count.
            list

            Parameter -ipv6_routing_res contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_RES_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_RES_MODE_CMD : opt})

    def traffic_config_ipv6_routing_res_step(self, any):
        """
        This is the method the command: traffic_config option ipv6_routing_res_step
        Description:Step value used to modify ipv6_routing_res when ipv6_routing_res_mode is
            incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_RES_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_RES_STEP_CMD : any})

    def traffic_config_ipv6_routing_res_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_routing_res_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_routing_res
            1

            enable tracking by ipv6_routing_res
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_RES_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_RES_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_routing_type(self, range):
        """
        This is the method the command: traffic_config option ipv6_routing_type
        Description:This is only for '-ipv6_extension_header routing'. Configure routing
            type (range 0-255) for 'routing' extension header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_TYPE_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_TYPE_CMD : range})

    def traffic_config_ipv6_routing_type_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_routing_type_count
        Description:Numeric value which configures the number of times the ipv6_routing_type
            is incremeneted or decremented when ipv6_routing_type_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_TYPE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_TYPE_COUNT_CMD : numeric})

    def traffic_config_ipv6_routing_type_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_routing_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_routing_type_step and
            ipv6_routing_type_count.
            decr

            the value is decremented as specified with ipv6_routing_type_step and
            ipv6_routing_type_count.
            list

            Parameter -ipv6_routing_type contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_TYPE_MODE_CMD : opt})

    def traffic_config_ipv6_routing_type_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_routing_type_step
        Description:Step value used to modify ipv6_routing_type when ipv6_routing_type_mode
            is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_TYPE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_TYPE_STEP_CMD : range})

    def traffic_config_ipv6_routing_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_routing_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_routing_type
            1

            enable tracking by ipv6_routing_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_ROUTING_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_ROUTING_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_src_mask(self, range):
        """
        This is the method the command: traffic_config option ipv6_src_mask
        Description:This parameter is ignored with traffic_generator ixnetwork_540.
            Incrementing and decrementing can be done with any step value with
            traffic_generator ixnetwork_540.Specify IPv6 mask to be used for
            ipv6_src_addr to increment. Default value is minimum value specified in
            ipv6_src_mode (it depends on address type and increment
            mode).ipv6_src_mode specifies how and if the ipv6_src_addr is
            incremented.The ipv6_src_mode depends on the IPv6 address type specified
            with ipv6_src_addr parameter.Each ipv6_src_mode allows a mask from a
            Mask range to be configured.The mask is configured using the
            ipv6_src_mask attributeThe step used for incrementing or decrementing is
            configued using the ipv6_src_step attribute which has the form of an
            IPv6 address.The ipv6_src_mask attribute specifies which part of the
            ipv6_src_step address is used for incrementing as follows:Mask range
            4-4, incr_global_top_level decr_global_top_level: xxxx::0Mask range
            24-24, incr_global_next_level decr_global_next_level: 0:0xx:xxxx::0Mask
            range 48-48, incr_global_site_level decr_global_site_level
            incr_local_site_subnet decr_local_site_subnet: 0:0:0:xxxx::0Mask range
            96-96, incr_mcast_group decr_mcast_group: 0::xxxx:xxxxMask range 96-128,
            incr_host decr_host incr_intf_id decr_intf_id: 0::xxxx:xxxx (when mask
            is 96)Mask range 96-128, incr_host decr_host incr_intf_id decr_intf_id:
            0::xxxx (when mask is 112)Mask range 0-128, incr_network decr_network:
            0::xxxx:xxxx:0:0 (when mask is 96)Mask range 0-128, incr_network
            decr_network: 0::xxxx:xxxx:0 (when mask is 112)HEX values marked with
            'x' in the format above are the ipv6_src_step HEX values that are used
            for increment or decrement; HEX values marked with '0' are ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: IPV6_SRC_MASK_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_SRC_MASK_CMD : range})

    def traffic_config_ipv6_src_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_src_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_src_addr.
            1

            enable tracking by ipv6_src_addr.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_SRC_TRACKING_CMD : bool_opt})

    def traffic_config_ipv6_traffic_class_count(self, numeric):
        """
        This is the method the command: traffic_config option ipv6_traffic_class_count
        Description:Numeric value which configures the number of times the
            ipv6_traffic_class is incremeneted or decremented when
            ipv6_traffic_class_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_TRAFFIC_CLASS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_TRAFFIC_CLASS_COUNT_CMD : numeric})

    def traffic_config_ipv6_traffic_class_mode(self, opt):
        """
        This is the method the command: traffic_config option ipv6_traffic_class_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with ipv6_traffic_class_step and
            ipv6_traffic_class_count.
            decr

            the value is decremented as specified with ipv6_traffic_class_step and
            ipv6_traffic_class_count.
            list

            Parameter -ipv6_traffic_class contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_TRAFFIC_CLASS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_TRAFFIC_CLASS_MODE_CMD : opt})

    def traffic_config_ipv6_traffic_class_step(self, range):
        """
        This is the method the command: traffic_config option ipv6_traffic_class_step
        Description:Step value used to modify ipv6_traffic_class when
            ipv6_traffic_class_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_TRAFFIC_CLASS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_TRAFFIC_CLASS_STEP_CMD : range})

    def traffic_config_ipv6_traffic_class_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option ipv6_traffic_class_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by ipv6_traffic_class
            1

            enable tracking by ipv6_traffic_class
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: IPV6_TRAFFIC_CLASS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.IPV6_TRAFFIC_CLASS_TRACKING_CMD : bool_opt})

    def traffic_config_isl(self, bool_opt):
        """
        This is the method the command: traffic_config option isl
        Description:Whether to enable ISL on the stream. You can then configure ISL with
            options 'isl_frame_type', 'isl_vlan_id', 'isl_user_priority',
            'isl_bpdu', and 'isl_index'. Valid only for traffic_generator ixos and
            ixnetwork_540. 0 - Disable ISL.1 - Enable ISL.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_CMD : bool_opt})

    def traffic_config_isl_bpdu(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_bpdu
        Description:Whether to enable encapsulation of all Bridge Protocol Data Units by the
            ISL packet. Valid only for traffic_generator ixos and ixnetwork_540.
            Valid options are:
            0

            Disabled
            1

            Enabled
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_BPDU_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_BPDU_CMD : bool_opt})

    def traffic_config_isl_bpdu_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_bpdu_count
        Description:Numeric value which configures the number of times the isl_bpdu is
            incremeneted or decremented when isl_bpdu_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_BPDU_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_BPDU_COUNT_CMD : numeric})

    def traffic_config_isl_bpdu_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_bpdu_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_bpdu_step and isl_bpdu_count.
            decr

            the value is decremented as specified with isl_bpdu_step and isl_bpdu_count.
            list

            Parameter -isl_bpdu contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_BPDU_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_BPDU_MODE_CMD : opt})

    def traffic_config_isl_bpdu_step(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_bpdu_step
        Description:Step value used to modify isl_bpdu when isl_bpdu_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_BPDU_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_BPDU_STEP_CMD : bool_opt})

    def traffic_config_isl_bpdu_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_bpdu_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_bpdu
            1

            enable tracking by isl_bpdu
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_BPDU_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_BPDU_TRACKING_CMD : bool_opt})

    def traffic_config_isl_frame_type(self, opt):
        """
        This is the method the command: traffic_config option isl_frame_type
        Description:Valid only for traffic_generator ixos and ixnetwork_540.Type of frame
            that is encapsulated. Valid options are:ethernet (default)atmfdditoken_ring
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_FRAME_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_FRAME_TYPE_CMD : opt})

    def traffic_config_isl_frame_type_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_frame_type_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -isl_frame_type contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_FRAME_TYPE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_FRAME_TYPE_MODE_CMD : opt})

    def traffic_config_isl_frame_type_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_frame_type_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_frame_type
            1

            enable tracking by isl_frame_type
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_FRAME_TYPE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_FRAME_TYPE_TRACKING_CMD : bool_opt})

    def traffic_config_isl_index(self):
        """
        This is the method the command: traffic_config option isl_index
        Description:Value of the selected register.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_INDEX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_INDEX_CMD : ""})

    def traffic_config_isl_index_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_index_count
        Description:Numeric value which configures the number of times the isl_index is
            incremeneted or decremented when isl_index_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_INDEX_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_INDEX_COUNT_CMD : numeric})

    def traffic_config_isl_index_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_index_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_index_step and
            isl_index_count.
            decr

            the value is decremented as specified with isl_index_step and
            isl_index_count.
            list

            Parameter -isl_index contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_INDEX_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_INDEX_MODE_CMD : opt})

    def traffic_config_isl_index_step(self, numeric):
        """
        This is the method the command: traffic_config option isl_index_step
        Description:Step value used to modify isl_index when isl_index_mode is incr
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_INDEX_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_INDEX_STEP_CMD : numeric})

    def traffic_config_isl_index_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_index_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_index
            1

            enable tracking by isl_index
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_INDEX_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_INDEX_TRACKING_CMD : bool_opt})

    def traffic_config_isl_mac_dst(self, any):
        """
        This is the method the command: traffic_config option isl_mac_dst
        Description:Mac address used to configure the destination mac address from the ISL
            header. This is not a real MAC Address, this is actually a 40 bits
            hex.(DEFAULT 00.00.00.00.00)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_DST_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_DST_CMD : any})

    def traffic_config_isl_mac_dst_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_mac_dst_count
        Description:Numeric value which configures the number of times the isl_mac_dst is
            incremeneted or decremented when isl_mac_dst_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_DST_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_DST_COUNT_CMD : numeric})

    def traffic_config_isl_mac_dst_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_mac_dst_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_mac_dst_step and
            isl_mac_dst_count.
            decr

            the value is decremented as specified with isl_mac_dst_step and
            isl_mac_dst_count.
            list

            Parameter -isl_mac_dst contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_DST_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_DST_MODE_CMD : opt})

    def traffic_config_isl_mac_dst_step(self, any):
        """
        This is the method the command: traffic_config option isl_mac_dst_step
        Description:Mac address step value used to modify isl_mac_dst when isl_mac_dst_mode
            is incr or decr. This is not actually a mac address, this is a 40 bits hex.
            DEFAULT

            0000.0000.0001
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_DST_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_DST_STEP_CMD : any})

    def traffic_config_isl_mac_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_mac_dst_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_mac_dst
            1

            enable tracking by isl_mac_dst
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_DST_TRACKING_CMD : bool_opt})

    def traffic_config_isl_mac_src_high(self, hex):
        """
        This is the method the command: traffic_config option isl_mac_src_high
        Description:Hex value used to configure the high 24 bits of the source mac address
            from the Cisco ISL header.(DEFAULT 0x000000)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_HIGH_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_HIGH_CMD : hex})

    def traffic_config_isl_mac_src_high_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_mac_src_high_count
        Description:Numeric value which configures the number of times the isl_mac_src_high
            is incremeneted or decremented when isl_mac_src_high_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_HIGH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_HIGH_COUNT_CMD : numeric})

    def traffic_config_isl_mac_src_high_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_mac_src_high_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_mac_src_high_step and
            isl_mac_src_high_count.
            decr

            the value is decremented as specified with isl_mac_src_high_step and
            isl_mac_src_high_count.
            list

            Parameter -isl_mac_src_high contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_HIGH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_HIGH_MODE_CMD : opt})

    def traffic_config_isl_mac_src_high_step(self, hex):
        """
        This is the method the command: traffic_config option isl_mac_src_high_step
        Description:Hex step value used to modify isl_mac_src_high when
            isl_mac_src_high_mode is incr or decr.
            DEFAULT

            0x01
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_HIGH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_HIGH_STEP_CMD : hex})

    def traffic_config_isl_mac_src_high_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_mac_src_high_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_mac_src_high
            1

            enable tracking by isl_mac_src_high
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_HIGH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_HIGH_TRACKING_CMD : bool_opt})

    def traffic_config_isl_mac_src_low(self, hex):
        """
        This is the method the command: traffic_config option isl_mac_src_low
        Description:Hex value used to configure the low 24 bits of the source mac address
            from the Cisco ISL header.(DEFAULT 0x000000)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_LOW_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_LOW_CMD : hex})

    def traffic_config_isl_mac_src_low_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_mac_src_low_count
        Description:Numeric value which configures the number of times the isl_mac_src_low
            is incremeneted or decremented when isl_mac_src_low_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_LOW_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_LOW_COUNT_CMD : numeric})

    def traffic_config_isl_mac_src_low_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_mac_src_low_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_mac_src_low_step and
            isl_mac_src_low_count.
            decr

            the value is decremented as specified with isl_mac_src_low_step and
            isl_mac_src_low_count.
            list

            Parameter -isl_mac_src_low contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_LOW_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_LOW_MODE_CMD : opt})

    def traffic_config_isl_mac_src_low_step(self, hex):
        """
        This is the method the command: traffic_config option isl_mac_src_low_step
        Description:Hex step value used to modify isl_mac_src_low when isl_mac_src_low_mode
            is incr or decr.
            DEFAULT

            0x01
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_LOW_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_LOW_STEP_CMD : hex})

    def traffic_config_isl_mac_src_low_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_mac_src_low_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_mac_src_low
            1

            enable tracking by isl_mac_src_low
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_MAC_SRC_LOW_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_MAC_SRC_LOW_TRACKING_CMD : bool_opt})

    def traffic_config_isl_user_priority(self, range):
        """
        This is the method the command: traffic_config option isl_user_priority
        Description:Low order two bits of this value specify the priority of the packet as
            inclusive.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_USER_PRIORITY_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_USER_PRIORITY_CMD : range})

    def traffic_config_isl_user_priority_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_user_priority_count
        Description:Numeric value which configures the number of times the isl_user_priority
            is incremeneted or decremented when isl_user_priority_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_USER_PRIORITY_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_USER_PRIORITY_COUNT_CMD : numeric})

    def traffic_config_isl_user_priority_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_user_priority_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_user_priority_step and
            isl_user_priority_count.
            decr

            the value is decremented as specified with isl_user_priority_step and
            isl_user_priority_count.
            list

            Parameter -isl_user_priority contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_USER_PRIORITY_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_USER_PRIORITY_MODE_CMD : opt})

    def traffic_config_isl_user_priority_step(self, range):
        """
        This is the method the command: traffic_config option isl_user_priority_step
        Description:Step value used to modify isl_user_priority when isl_user_priority_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_USER_PRIORITY_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_USER_PRIORITY_STEP_CMD : range})

    def traffic_config_isl_user_priority_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_user_priority_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_user_priority
            1

            enable tracking by isl_user_priority
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_USER_PRIORITY_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_USER_PRIORITY_TRACKING_CMD : bool_opt})

    def traffic_config_isl_vlan_id(self, range):
        """
        This is the method the command: traffic_config option isl_vlan_id
        Description:Virtual LAN identification.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: ISL_VLAN_ID_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_VLAN_ID_CMD : range})

    def traffic_config_isl_vlan_id_count(self, numeric):
        """
        This is the method the command: traffic_config option isl_vlan_id_count
        Description:Numeric value which configures the number of times the isl_vlan_id is
            incremeneted or decremented when isl_vlan_id_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_VLAN_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_VLAN_ID_COUNT_CMD : numeric})

    def traffic_config_isl_vlan_id_mode(self, opt):
        """
        This is the method the command: traffic_config option isl_vlan_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with isl_vlan_id_step and
            isl_vlan_id_count.
            decr

            the value is decremented as specified with isl_vlan_id_step and
            isl_vlan_id_count.
            list

            Parameter -isl_vlan_id contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_VLAN_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_VLAN_ID_MODE_CMD : opt})

    def traffic_config_isl_vlan_id_step(self, numeric):
        """
        This is the method the command: traffic_config option isl_vlan_id_step
        Description:Step value used to modify isl_vlan_id when isl_vlan_id_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_VLAN_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_VLAN_ID_STEP_CMD : numeric})

    def traffic_config_isl_vlan_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option isl_vlan_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by isl_vlan_id
            1

            enable tracking by isl_vlan_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: ISL_VLAN_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ISL_VLAN_ID_TRACKING_CMD : bool_opt})

    def traffic_config_l3_length_step(self, range):
        """
        This is the method the command: traffic_config option l3_length_step
        Description:Step size by which the packet size will be incremented. Use this option
            in conjunction with option 'length_mode' set to increment.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: L3_LENGTH_STEP_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.L3_LENGTH_STEP_CMD : range})

    def traffic_config_lan_range_count(self):
        """
        This is the method the command: traffic_config option lan_range_count
        Description:This option is used to specify the number of LAN static endpoint ranges.
            It can take any numeric value. Valid only for traffic_generator
            ixnetwork when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: LAN_RANGE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.LAN_RANGE_COUNT_CMD : ""})

    def traffic_config_latency_bins(self, range):
        """
        This is the method the command: traffic_config option latency_bins
        Description:Configure the number of bins. for the traffic item being configured. For
            this configuration to be valid latency bins, jitter or delay measurement
            global statistics must be enabled with ::::traffic_control.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: LATENCY_BINS_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.LATENCY_BINS_CMD : range})

    def traffic_config_latency_bins_enable(self, bool_opt):
        """
        This is the method the command: traffic_config option latency_bins_enable
        Description:Enable or disable latency_bins for the traffic item being configured.
            Valid options are:0 - Default1 - For this configuration to be valid
            latency bins, jitter or delay measurement global statistics must be
            enabled with ::::traffic_control.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: LATENCY_BINS_ENABLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.LATENCY_BINS_ENABLE_CMD : bool_opt})

    def traffic_config_latency_values(self, decimal):
        """
        This is the method the command: traffic_config option latency_values
        Description:The splitting values for the bins. 0 and Max will be the absolute end
            points. A list of {1.5 3 6.8} would create these four bins {0 - 1.5}
            {1.5 3} {3 6.8} {6.8 MAX}. It is always greater than the lower value and
            equal to or less than the upper value. Otherwise, it will be ignored.
            For this configuration to be valid latency bins, jitter or delay
            measurement global statistics must be enabled with ::::traffic_control.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: LATENCY_VALUES_CMD
        Supported:IxNetwork
        Keyword arguments:
        decimal --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.LATENCY_VALUES_CMD : decimal})

    def traffic_config_loop_count(self):
        """
        This is the method the command: traffic_config option loop_count
        Description:When in packet mode and stream is set to return to id for a count, this
            is the count value for how many times to loop before stopping.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: LOOP_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.LOOP_COUNT_CMD : ""})

    def traffic_config_mac_dst_count_step(self):
        """
        This is the method the command: traffic_config option mac_dst_count_step
        Description:This option is used to specify the step between the value of the MAC
            address count of each the LAN static endpoint range. It can take any
            numeric value. Valid for traffic_generator ixnetwork when configuring
            L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: MAC_DST_COUNT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MAC_DST_COUNT_STEP_CMD : ""})

    def traffic_config_mac_dst_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mac_dst_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mac_dst
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MAC_DST_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MAC_DST_TRACKING_CMD : bool_opt})

    def traffic_config_mac_src_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mac_src_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mac_src
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MAC_SRC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MAC_SRC_TRACKING_CMD : bool_opt})

    def traffic_config_merge_destinations(self, bool_opt):
        """
        This is the method the command: traffic_config option merge_destinations
        Description:Not defined
            Valid options are:
            0

            disable merging of traffic item destinations
            1

            enable merging of traffic item destinations
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MERGE_DESTINATIONS_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MERGE_DESTINATIONS_CMD : bool_opt})

    def traffic_config_min_gap_bytes(self, range):
        """
        This is the method the command: traffic_config option min_gap_bytes
        Description:The minimum gap, in bytes, between sending packets.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MIN_GAP_BYTES_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MIN_GAP_BYTES_CMD : range})

    def traffic_config_mpls(self, opt):
        """
        This is the method the command: traffic_config option mpls
        Description:Whether to enable MPLS on a particular stream. When enabled, configure
            the MPLS parameters by usgin the options 'mpls_labels', 'mpls_ttl',
            'mpls_exp_bit', 'mpls_bottom_of_stack', and 'mpls_type'. Refer to
            Section 'Scripts Samples' for an example.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: MPLS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_CMD : opt})

    def traffic_config_mpls_bottom_stack_bit(self, bool_opt):
        """
        This is the method the command: traffic_config option mpls_bottom_stack_bit
        Description:Whether to enable the bottom of the stack bit. This bit is set to true
            for the last entry in the label stack (for the bottom of the stack) and
            false for all other label stack entries.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: MPLS_BOTTOM_STACK_BIT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_CMD : bool_opt})

    def traffic_config_mpls_bottom_stack_bit_count(self, numeric):
        """
        This is the method the command: traffic_config option mpls_bottom_stack_bit_count
        Description:Numeric value which configures the number of times the
            mpls_bottom_stack_bit is incremeneted or decremented when
            mpls_labels_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_BOTTOM_STACK_BIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_COUNT_CMD : numeric})

    def traffic_config_mpls_bottom_stack_bit_mode(self, opt):
        """
        This is the method the command: traffic_config option mpls_bottom_stack_bit_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with mpls_bottom_stack_bit_step
            and mpls_bottom_stack_bit_count.
            decr

            the value is decremented as specified with mpls_bottom_stack_bit_step
            and mpls_bottom_stack_bit_count.
            list

            Parameter -mpls_bottom_stack_bit contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_BOTTOM_STACK_BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_MODE_CMD : opt})

    def traffic_config_mpls_bottom_stack_bit_step(self, numeric):
        """
        This is the method the command: traffic_config option mpls_bottom_stack_bit_step
        Description:Step value used to modify mpls_bottom_stack_bit when
            mpls_bottom_stack_bit_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_BOTTOM_STACK_BIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_STEP_CMD : numeric})

    def traffic_config_mpls_bottom_stack_bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mpls_bottom_stack_bit_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mpls_bottom_stack_bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_BOTTOM_STACK_BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_TRACKING_CMD : bool_opt})

    def traffic_config_mpls_exp_bit(self, any):
        """
        This is the method the command: traffic_config option mpls_exp_bit
        Description:inclusive. If mpls_exp_bit_mode is list, you can use a list of values
            from 0-7 (example: 0,1,2,3,4). When modifying this parameter the user
            must set the mpls attribute to enable.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: MPLS_EXP_BIT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_EXP_BIT_CMD : any})

    def traffic_config_mpls_exp_bit_count(self, range):
        """
        This is the method the command: traffic_config option mpls_exp_bit_count
        Description:Numeric value which configures the number of times the mpls_exp_bit is
            incremeneted or decremented when mpls_exp_bit_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_EXP_BIT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_EXP_BIT_COUNT_CMD : range})

    def traffic_config_mpls_exp_bit_mode(self, opt):
        """
        This is the method the command: traffic_config option mpls_exp_bit_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with mpls_exp_bit_step and
            mpls_exp_bit_count.
            decr

            the value is decremented as specified with mpls_exp_bit_step and
            mpls_exp_bit_count.
            list

            Parameter -mpls_exp_bit contains a list of values (example: 0,2,3,5,7).
            Each packet
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_EXP_BIT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_EXP_BIT_MODE_CMD : opt})

    def traffic_config_mpls_exp_bit_step(self, range):
        """
        This is the method the command: traffic_config option mpls_exp_bit_step
        Description:Step value used to modify mpls_exp_bit when mpls_exp_bit_mode is incr or
            decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_EXP_BIT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_EXP_BIT_STEP_CMD : range})

    def traffic_config_mpls_exp_bit_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mpls_exp_bit_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mpls_exp_bit
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_EXP_BIT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_EXP_BIT_TRACKING_CMD : bool_opt})

    def traffic_config_mpls_labels_count(self, numeric):
        """
        This is the method the command: traffic_config option mpls_labels_count
        Description:Numeric value which configures the number of times the mpls_labels is
            incremeneted or decremented when mpls_labels_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_LABELS_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_LABELS_COUNT_CMD : numeric})

    def traffic_config_mpls_labels_mode(self, opt):
        """
        This is the method the command: traffic_config option mpls_labels_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with mpls_labels_step and
            mpls_labels_count.
            decr

            the value is decremented as specified with mpls_labels_step and
            mpls_labels_count.
            list

            Parameter -mpls_labels contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_LABELS_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_LABELS_MODE_CMD : opt})

    def traffic_config_mpls_labels_step(self, numeric):
        """
        This is the method the command: traffic_config option mpls_labels_step
        Description:Step value used to modify mpls_labels when mpls_labels_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_LABELS_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_LABELS_STEP_CMD : numeric})

    def traffic_config_mpls_labels_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mpls_labels_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mpls_labels
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_LABELS_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_LABELS_TRACKING_CMD : bool_opt})

    def traffic_config_mpls_ttl(self, range):
        """
        This is the method the command: traffic_config option mpls_ttl
        Description:Time-to-live value for a particular tag in a stream.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: MPLS_TTL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TTL_CMD : range})

    def traffic_config_mpls_ttl_count(self, range):
        """
        This is the method the command: traffic_config option mpls_ttl_count
        Description:Numeric value which configures the number of times the mpls_ttl is
            incremeneted or decremented when mpls_ttl_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_TTL_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TTL_COUNT_CMD : range})

    def traffic_config_mpls_ttl_mode(self, opt):
        """
        This is the method the command: traffic_config option mpls_ttl_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with mpls_ttl_step and mpls_ttl_count.
            decr

            the value is decremented as specified with mpls_ttl_step and mpls_ttl_count.
            list

            Parameter -mpls_ttl contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_TTL_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TTL_MODE_CMD : opt})

    def traffic_config_mpls_ttl_step(self, range):
        """
        This is the method the command: traffic_config option mpls_ttl_step
        Description:Step value used to modify mpls_ttl when mpls_ttl_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_TTL_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TTL_STEP_CMD : range})

    def traffic_config_mpls_ttl_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option mpls_ttl_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by mpls_ttl
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: MPLS_TTL_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TTL_TRACKING_CMD : bool_opt})

    def traffic_config_mpls_type(self, opt):
        """
        This is the method the command: traffic_config option mpls_type
        Description:Unicast - (default)Multicast -
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: MPLS_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MPLS_TYPE_CMD : opt})

    def traffic_config_multiple_queues(self, flag):
        """
        This is the method the command: traffic_config option multiple_queues
        Description:This argument is used to specify the fact that the new steams will be
            created on different stream queues (this applies only to ATM ports). A
            maximum number of 15 queues can be created. These 15 queues will be
            populated with streams in a round-robin fashion if the -multiple_queues
            option will be used alone. If the -queue_id option is used, the new
            stream will be added to the specified stream queue and the round-robin
            mechanism will be circumvented.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: MULTIPLE_QUEUES_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.MULTIPLE_QUEUES_CMD : flag})

    def traffic_config_name(self, name_string):
        """
        This is the method the command: traffic_config option name
        Description:Stream string identifier/name. For ixnetwork 540+ traffic, if this name contains spaces, the spaces will be translated to underscores and a warning will be displayed. The string name must not contain commas. After when -name is used with -mode modify (and the name changes), the stream_id key needs to be refreshed (since its value is the name of the traffic item).
        Constants Available: NAME_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        name_string --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.NAME_CMD : name_string})

    def traffic_config_no_write(self):
        """
        This is the method the command: traffic_config option no_write
        Description:Whether to enable procedure 'traffic_config' to commit change to the
            hardware. Enable this option when the you want to create multiple
            streams on a single port by using a loop. Because committing the
            configuration to hardware can take .5 seconds, this option allows you to
            save the configuration after the procedure call.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: NO_WRITE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.NO_WRITE_CMD : ""})

    def traffic_config_num_dst_ports(self, numeric):
        """
        This is the method the command: traffic_config option num_dst_ports
        Description:This argument can be used to specify the number of ports on which the
            video server will be running in Triple Play tests. Valid only for
            traffic_generator ixnetwork, mode create/modify, circuit_endpoint_type
            ipv4_application_traffic/ipv6_application_traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: NUM_DST_PORTS_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.NUM_DST_PORTS_CMD : numeric})

    def traffic_config_number_of_packets_per_stream(self):
        """
        This is the method the command: traffic_config option number_of_packets_per_stream
        Description:Number of maximum frames in the stream.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: NUMBER_OF_PACKETS_PER_STREAM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.NUMBER_OF_PACKETS_PER_STREAM_CMD : ""})

    def traffic_config_number_of_packets_tx(self):
        """
        This is the method the command: traffic_config option number_of_packets_tx
        Description:The number of packets that are to be transmitted in the stream
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: NUMBER_OF_PACKETS_TX_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.NUMBER_OF_PACKETS_TX_CMD : ""})

    def traffic_config_override_value_list(self):
        """
        This is the method the command: traffic_config option override_value_list
        Description:This argument can be used to specify the list of tracking values that
            will be used to label the generated traffic.Valid only for
            traffic_generator ixnetwork and with the assured_forwarding_phb,
            class_selector_phb, default_phb, expedited_forwarding_phb, tos,
            raw_priority, inner_vlan, custom_8bit, custom_16bit, custom_24bit and
            custom_32bit choices of the -track_by argument.The list has the
            following structure:assured_forwarding_phb: {{unused_bits af_class
            codepoint} {unused_bits af_class codepoint} ...}where: unused_bits - 2
            bit integer valueaf_class - integer value in the [1,4] intervalcodepoint
            - value in the {low,medium,high} setclass_selector_phb: {{unused_bits
            precedence} {unused_bits precedence} ...}where: unused_bits - 2 bit
            integer valueprecedence - integer value in the [1,7]
            intervaldefault_phb: {{unused_bits codepoint} {unused_bits codepoint}
            ...}where: unused_bits - 2 bit integer valuecodepoint - 6 bit integer
            value, in decimal formatexpedited_forwarding_phb: {{unused_bits
            codepoint} {unused_bits codepoint} ...}where: unused_bits - 2 bit
            integer valuecodepoint - 6 bit integer value, in decimal formattos:
            {{unused_bit monetary reliability throughput delay precedence}
            {unused_bit monetary reliability throughput delay precedence} ...}where:
            unused_bit - 1 bit valuemonetary - value in the {normal,minimize}
            setreliability - value in the {normal,high} setthroughput - value in the
            {normal,high} setdelay - value in the {normal,low} setprecedence - value
            in the
            {routine,priority,immediate,flash,,flash_override,critical_ecp,internetwork_contol,network_contol}
            setraw_priority: {raw_priority raw_priority ...}where: raw_priority - 8
            bit integer value, in decimal formatinner_vlan: {{vlan_id cfi
            user_priority} {vlan_id cfi user_priority} ...}where: vlan_id - 12 bit
            integer value, in decimal formatcfi - 1 bit valueuser_priority - 3 bit
            integer valuecustom_8bit: {custom_value custom_value ...}where:
            unused_bit - 8 bit integer value, in decimal formatcustom_16bit:
            {custom_value custom_value ...}where: unused_bit - 16 bit integer value,
            in decimal formatcustom_24bit: {custom_value custom_value ...}where:
            unused_bit - 24 bit integer value, in decimal formatcustom_32bit:
            {custom_value custom_value ...}where: unused_bit - 32 bit integer value,
            in decimal format
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: OVERRIDE_VALUE_LIST_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.OVERRIDE_VALUE_LIST_CMD : ""})

    def traffic_config_pause_control_time(self, range):
        """
        This is the method the command: traffic_config option pause_control_time
        Description:Not defined
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: PAUSE_CONTROL_TIME_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PAUSE_CONTROL_TIME_CMD : range})

    def traffic_config_pending_operations_timeout(self, numeric):
        """
        This is the method the command: traffic_config option pending_operations_timeout
        Description:The amount of time (in seconds) to wait for the async protocols
            operations to finish (starting of clasic PPP sessions).
            DEFAULT

            60
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: PENDING_OPERATIONS_TIMEOUT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PENDING_OPERATIONS_TIMEOUT_CMD : numeric})

    def traffic_config_pgid_offset(self, range):
        """
        This is the method the command: traffic_config option pgid_offset
        Description:The offset at which the PGID will be set.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: PGID_OFFSET_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PGID_OFFSET_CMD : range})

    def traffic_config_pgid_value(self, numeric):
        """
        This is the method the command: traffic_config option pgid_value
        Description:Unique value used to identify one packet group for another. Up to 57344
            different packet groups may be defined. This parameter can take a list
            of values as follows: when traffic is configured bidirectional and this
            parameter has one value, this value will be set on both streams. When
            this parameter has a list of two values the first value will be assigned
            to the first stream and the second value to the second stream.(DEFAULT =
            current stream id)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: PGID_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PGID_VALUE_CMD : numeric})

    def traffic_config_preamble_custom_size(self, numeric):
        """
        This is the method the command: traffic_config option preamble_custom_size
        Description:Provides the preamble size (measured in bytes) for a high level stream
            only when the preamble size mode is set to custom. The default value is 6.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: PREAMBLE_CUSTOM_SIZE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PREAMBLE_CUSTOM_SIZE_CMD : numeric})

    def traffic_config_preamble_size_mode(self, numeric):
        """
        This is the method the command: traffic_config option preamble_size_mode
        Description:Used to set the preamble mode on a high level stream.auto - Automatic
            preamble size.custom - Preamble size will be given by parameter
            preamble_custom_size.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: PREAMBLE_SIZE_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PREAMBLE_SIZE_MODE_CMD : numeric})

    def traffic_config_pt_handle(self):
        """
        This is the method the command: traffic_config option pt_handle
        Description:The protocol template handle used to manipulate headers. This handle is
            obtained when using mode 'get_available_protocol_templates' and it is
            presented in a user friendly format.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: PT_HANDLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PT_HANDLE_CMD : ""})

    def traffic_config_public_port_ip(self, ip):
        """
        This is the method the command: traffic_config option public_port_ip
        Description:The IP address of the client as received from the PPPoE/L2TP server.
            This address is used only for an IPv4 Access port to match the traffic
            to a particular PPPoE/L2TP session.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: PUBLIC_PORT_IP_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PUBLIC_PORT_IP_CMD : ip})

    def traffic_config_pvc_count(self):
        """
        This is the method the command: traffic_config option pvc_count
        Description:This option is used to specify the number of PVCs created on the first
            ATM static endpoint range. It can take any value in the 0-4294967295 range.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: PVC_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PVC_COUNT_CMD : ""})

    def traffic_config_pvc_count_step(self):
        """
        This is the method the command: traffic_config option pvc_count_step
        Description:This option is used to specify the step between the number of PVCs
            created on each ATM static endpoint range. It can take any numeric value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: PVC_COUNT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.PVC_COUNT_STEP_CMD : ""})

    def traffic_config_qos_byte(self, range):
        """
        This is the method the command: traffic_config option qos_byte
        Description:The combined value for the precedence, delay, throughput, reliability,
            reserved and cost bits. This is only for PPP, L2TP and L2TPv3 traffic
            when using traffic_generator ixnetwork.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_BYTE_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_BYTE_CMD : range})

    def traffic_config_qos_byte_count(self, numeric):
        """
        This is the method the command: traffic_config option qos_byte_count
        Description:Numeric value which configures the number of times the qos_byte is
            incremeneted or decremented when qos_byte_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_BYTE_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_BYTE_COUNT_CMD : numeric})

    def traffic_config_qos_byte_mode(self, opt):
        """
        This is the method the command: traffic_config option qos_byte_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with qos_byte_step and qos_byte_count.
            decr

            the value is decremented as specified with qos_byte_step and qos_byte_count.
            list

            Parameter -qos_byte contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_BYTE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_BYTE_MODE_CMD : opt})

    def traffic_config_qos_byte_step(self, range):
        """
        This is the method the command: traffic_config option qos_byte_step
        Description:Step value used to modify qos_byte when qos_byte_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_BYTE_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_BYTE_STEP_CMD : range})

    def traffic_config_qos_byte_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option qos_byte_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by qos_byte
            1

            enable tracking by qos_byte
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_BYTE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_BYTE_TRACKING_CMD : bool_opt})

    def traffic_config_qos_ipv6_flow_label(self, range):
        """
        This is the method the command: traffic_config option qos_ipv6_flow_label
        Description:The IPv6 flow label, from 0 through 1,048,575. Valid only if -encap is
            an ethernet encapsulation.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_IPV6_FLOW_LABEL_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_IPV6_FLOW_LABEL_CMD : range})

    def traffic_config_qos_ipv6_traffic_class(self, range):
        """
        This is the method the command: traffic_config option qos_ipv6_traffic_class
        Description:The IPv6 traffic class, from 0 through 255. Valid only if -encap is an
            ethernet encapsulation.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_IPV6_TRAFFIC_CLASS_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_IPV6_TRAFFIC_CLASS_CMD : range})

    def traffic_config_qos_type_ixn(self, opt):
        """
        This is the method the command: traffic_config option qos_type_ixn
        Description:Sets the Quality of Service type. Possible values include: customA
            custom QoS type. With traffic_generator ixnetwork_540 use this in
            combination with parameters: qos_value_ixn, qos_value_ixn_mode,
            qos_value_ixn_step, qos_value_ixn_count, qos_value_ixn_tracking.dscpUser
            DSCP as the QoS. With traffic_generator ixnetwork_540 use this in
            combination with parameters: qos_value_ixn. The rest of the depending
            parameters are specified based on the value of qos_value_ixn.tosUse ToS
            as the QoS. With traffic_generator ixnetwork_540 configure precedence
            using qos_value_ixn, qos_value_ixn_mode, qos_value_ixn_step,
            qos_value_ixn_count, qos_value_ixn_tracking OR ip_precedence,
            ip_precedence_mode, ip_precedence_step, ip_precedence_count,
            ip_precedence_tracking. The rest of the TOS bits are configured using
            parameters: ip_delay, ip_delay_mode, ip_delay_tracking, ip_throughput,
            ip_throughput_mode, ip_throughput_tracking, ip_reliability,
            ip_reliability_mode, ip_reliability_tracking ip_cost, ip_cost_mode,
            ip_cost_tracking.ipv6Use IPv6 as the QoS. (used when
            circuit_endpoint_type is ipv6. Only for traffic_generator ixnetwork)
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: QOS_TYPE_IXN_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_TYPE_IXN_CMD : opt})

    def traffic_config_qos_value_ixn(self, any):
        """
        This is the method the command: traffic_config option qos_value_ixn
        Description:The QoS value for this traffic stream. Depending on what type of QoS is
            selected the following values are accepted:
            1. When -qos_type_ixn tos = a value in the [0 - 7] range specifying ToS
            traffic priority
              * '0' = Routine
              * '1' = Priority
              * '2' = Immediate
              * '3' = Flash
              * '4' = Flash Override
              * '5' = CRITIC/ECP
              * '6' = Internet Control
              * '7' = Network Control
            With traffic_generator ixnetwork_540 configure precedence using
            qos_value_ixn, qos_value_ixn_mode, qos_value_ixn_step,
            qos_value_ixn_count, qos_value_ixn_tracking OR ip_precedence,
            ip_precedence_mode, ip_precedence_step, ip_precedence_count,
            ip_precedence_tracking. The rest of the TOS bits are configured using
            parameters: ip_delay, ip_delay_mode, ip_delay_tracking, ip_throughput,
            ip_throughput_mode, ip_throughput_tracking, ip_reliability,
            ip_reliability_mode, ip_reliability_tracking ip_cost, ip_cost_mode,
            ip_cost_tracking.
            2. When -qos_type_ixn dscp'dscp_default' (DEFAULT) = any traffic that
            does not meet the requirements of any of the other defined classes is
            placed in the default PHB. Typically, the default PHB has best-effort
            forwarding characteristics. For traffic_generator ixnetwork_540 with
            qos_value_ixn 'dscp_default' the following parameters can also be
            configured: ip_dscp, ip_dscp_mode, ip_dscp_count, ip_dscp_step,
            ip_dscp_tracking, ip_cu, ip_cu_mode, ip_cu_count, ip_cu_step,
            ip_cu_tracking.Assured Fowarding PHB allows the operator to provide
            assurance of delivery as long as the traffic does not exceed some
            subscribed rate.Traffic that exceeds the subscription rate faces a
            higher probability of being dropped if congestion occurs. The following
            AF options are available:
              * 'af_class1_low_precedence' (Assured Forwarding PHB, Class 1, Low
                Precendence)
              * 'af_class1_medium_precedence' (Assured Forwarding PHB, Class 1,
                Medium Precendence)
              * 'af_class1_high_precedence' (Assured Forwarding PHB, Class 1, High
                Precendence)
              * 'af_class2_low_precedence' (Assured Forwarding PHB, Class 2, Low
                Precendence)
              * 'af_class2_medium_precedence' (Assured Forwarding PHB, Class 2,
                Medium Precendence)
              * 'af_class2_high_precedence' (Assured Forwarding PHB, Class 2, High
                Precendence)
              * 'af_class3_low_precedence' (Assured Forwarding PHB, Class 3, Low
                Precendence)
              * 'af_class3_medium_precedence' (Assured Forwarding PHB, Class 3,
                Medium Precendence)
              * 'af_class3_high_precedence' (Assured Forwarding PHB, Class 3, High
                Precendence)
              * 'af_class4_low_precedence' (Assured Forwarding PHB, Class 4, Low
                Precendence)
              * 'af_class4_medium_precedence' (Assured Forwarding PHB, Class 4,
                Medium Precendence)
              * 'af_class4_high_precedence' (Assured Forwarding PHB, Class 4, High
                Precendence)
              * 'ef' - the EF PHB has the characteristics of low delay, low loss and
                low jitter. These characteristics are suitable for voice, video and
                other realtime services. EF traffic is often given strict priority
                queuing above all other traffic classes. Because an overload of EF
                traffic will cause queuing delays and affect the jitter and delay
                tolerances within the class, EF traffic is often strictly controlled
                through admission control, policing and other mechanisms.
            Class Selector PHB is used to maintain backward compatibility with
            network devices that still use the Precedence field, giving the
            following options:
              * 'cs_precedence1' (Class Selector PHB, Precedence 1)
              * 'cs_precedence2' (Class Selector PHB, Precedence 2)
              * 'cs_precedence3' (Class Selector PHB, Precedence 3)
              * 'cs_precedence4' (Class Selector PHB, Precedence 4)
              * 'cs_precedence5' (Class Selector PHB, Precedence 5)
              * 'cs_precedence6' (Class Selector PHB, Precedence 6)
              * 'cs_precedence7' (Class Selector PHB, Precedence 7)
            3. When -qos_type_ixn customa value in the [0 - 255] range (DEFAULT 0).
            With traffic_generator ixnetwork_540 the following parameters are also
            available: qos_type_ixn_mode, qos_type_ixn_step, qos_type_ixn_count,
            qos_type_ixn_tracking.
            4. When -qos_type_ixn ipv6a value in the [0 - 255] range (DEFAULT 0)
            (Only available with traffic_generator ixnetwork_540.An error is
            returned if qos_value_ixn does not have any of the choices
            above.qos_value_ixn is set to default if it is one of the choices above
            but not one that is valid for the configured qos_type_ixn.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: QOS_VALUE_IXN_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_VALUE_IXN_CMD : any})

    def traffic_config_qos_value_ixn_count(self, numeric):
        """
        This is the method the command: traffic_config option qos_value_ixn_count
        Description:Numeric value which configures the number of times the qos_value_ixn is
            incremeneted or decremented when qos_value_ixn_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_VALUE_IXN_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_VALUE_IXN_COUNT_CMD : numeric})

    def traffic_config_qos_value_ixn_mode(self, opt):
        """
        This is the method the command: traffic_config option qos_value_ixn_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with qos_value_ixn_step and
            qos_value_ixn_count.
            decr

            the value is decremented as specified with qos_value_ixn_step and
            qos_value_ixn_count.
            list

            Parameter -qos_value_ixn contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_VALUE_IXN_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_VALUE_IXN_MODE_CMD : opt})

    def traffic_config_qos_value_ixn_step(self, numeric):
        """
        This is the method the command: traffic_config option qos_value_ixn_step
        Description:Step value used to modify qos_value_ixn when qos_value_ixn_mode is incr
            or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_VALUE_IXN_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_VALUE_IXN_STEP_CMD : numeric})

    def traffic_config_qos_value_ixn_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option qos_value_ixn_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by qos_value_ixn
            1

            enable tracking by qos_value_ixn
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: QOS_VALUE_IXN_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QOS_VALUE_IXN_TRACKING_CMD : bool_opt})

    def traffic_config_queue_id(self, numeric):
        """
        This is the method the command: traffic_config option queue_id
        Description:This argument is used to specify the queue in which the stream should be
            created. The queue must already exist or, at least, be the next in line
            to be created. If, for example, the 1, 2 and 3 queues exist, a valid
            value for this option would be 1, 2, 3 or 4. This option has meaning
            only if the -multiple_queues option is enabled.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: QUEUE_ID_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.QUEUE_ID_CMD : numeric})

    def traffic_config_ramp_up_percentage(self, numeric):
        """
        This is the method the command: traffic_config option ramp_up_percentage
        Description:This argument can be used to specify how fast the objective value is to
            be ramped up. Valid only for traffic_generator ixnetwork, mode
            create/modify and circuit_endpoint_type ipv4_application_traffic or
            ipv6_application_traffic. The -enable_test_objective argument must be
            set to 1 in order for the value of this argument to be used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: RAMP_UP_PERCENTAGE_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RAMP_UP_PERCENTAGE_CMD : numeric})

    def traffic_config_range_per_spoke(self):
        """
        This is the method the command: traffic_config option range_per_spoke
        Description:This option can be used to specify the number of LAN static endpoints
            that are going to be connected through one ATM or Frame Relay
            endpoint.Valid only for traffic_generator ixnetwork when configuring
            L2VPN trafficand only if the -indirect option is enabled.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: RANGE_PER_SPOKE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RANGE_PER_SPOKE_CMD : ""})

    def traffic_config_rate_byteps(self):
        """
        This is the method the command: traffic_config option rate_byteps
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Traffic rate to send in bytes per sec.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_BYTEPS_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_BYTEPS_CMD : ""})

    def traffic_config_rate_kbps(self):
        """
        This is the method the command: traffic_config option rate_kbps
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Traffic rate to send in kbps.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_KBPS_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_KBPS_CMD : ""})

    def traffic_config_rate_kbyteps(self):
        """
        This is the method the command: traffic_config option rate_kbyteps
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Traffic rate to send in kbytes per sec.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_KBYTEPS_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_KBYTEPS_CMD : ""})

    def traffic_config_rate_mbps(self):
        """
        This is the method the command: traffic_config option rate_mbps
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Traffic rate to send in mbps.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_MBPS_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_MBPS_CMD : ""})

    def traffic_config_rate_mbyteps(self):
        """
        This is the method the command: traffic_config option rate_mbyteps
        Description:This parameter can be updated while the traffic is running with -mode
            'dynamic_update' and -stream_id . Traffic rate to send in mbytes per sec.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_MBYTEPS_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_MBYTEPS_CMD : ""})

    def traffic_config_rate_mode(self):
        """
        This is the method the command: traffic_config option rate_mode
        Description:This parameter denotes which rate parameter will be used.
            Valid options are:
            first_option_provided

            The first provided parameter will be used. The order in which the
            parameters are provided is the following: -rate_bps, -rate_kbps,
            -rate_mbps, -rate_byteps, -rate_kbyteps, -rate_mbyteps, -rate_percent,
            -rate_pps
            bps

            The -rate_bps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            kbps

            The -rate_kbps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            mbps

            The -rate_mbps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            byteps

            The -rate_byteps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            kbyteps

            The -rate_kbyteps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            mbyteps

            The -rate_mbyteps parameter will be used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            percent

            The -rate_percent parameter will used. If it doesn't exist, the first
            parameter from the list specified in the first_option_provided will be used.
            pps

            The -rate_pps percent parameter will used. If it doesn't exist, the
            first parameter from the list specified in the first_option_provided
            will be used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RATE_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RATE_MODE_CMD : ""})

    def traffic_config_return_to_id(self):
        """
        This is the method the command: traffic_config option return_to_id
        Description:When in packet mode, tells this stream to return to a specific stream it
            after it is sent
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: RETURN_TO_ID_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RETURN_TO_ID_CMD : ""})

    def traffic_config_rip_command(self, opt):
        """
        This is the method the command: traffic_config option rip_command
        Description:For option 'l4_protocol' set to 'rip', this option defines the RIP
            command for a particular stream. Valid options
            are:requestresponsetrace_ontrace_offreserved
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: RIP_COMMAND_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_COMMAND_CMD : opt})

    def traffic_config_rip_command_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_command_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -rip_command contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_COMMAND_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_COMMAND_MODE_CMD : opt})

    def traffic_config_rip_command_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_command_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_command
            1

            enable tracking by rip_command
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_COMMAND_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_COMMAND_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_addr_family_id(self, any):
        """
        This is the method the command: traffic_config option rip_rte_addr_family_id
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol set to
            rip. Configure 2 bytes HEX Routing Table Entry Address Family
            Identifier. To configure Address Family Identifier for multiple Routing
            Table Entries specify this parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_ADDR_FAMILY_ID_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_CMD : any})

    def traffic_config_rip_rte_addr_family_id_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_addr_family_id_count
        Description:Numeric value which configures the number of times the
            rip_rte_addr_family_id is incremeneted or decremented when
            rip_rte_addr_family_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_ADDR_FAMILY_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_COUNT_CMD : numeric})

    def traffic_config_rip_rte_addr_family_id_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_addr_family_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_addr_family_id_step
            and rip_rte_addr_family_id_count.
            decr

            the value is decremented as specified with rip_rte_addr_family_id_step
            and rip_rte_addr_family_id_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_ADDR_FAMILY_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_MODE_CMD : opt})

    def traffic_config_rip_rte_addr_family_id_step(self, any):
        """
        This is the method the command: traffic_config option rip_rte_addr_family_id_step
        Description:Step value used to modify rip_rte_addr_family_id when
            rip_rte_addr_family_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_ADDR_FAMILY_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_STEP_CMD : any})

    def traffic_config_rip_rte_addr_family_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_addr_family_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_addr_family_id
            1

            enable tracking by rip_rte_addr_family_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_ADDR_FAMILY_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_ipv4_addr(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_ipv4_addr
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol set to
            rip. Configure Routing Table Entry IPv4 Address field. To configure IPv4
            Address for multiple Routing Table Entries specify this parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_IPV4_ADDR_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_IPV4_ADDR_CMD : ip})

    def traffic_config_rip_rte_ipv4_addr_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_ipv4_addr_count
        Description:Numeric value which configures the number of times the rip_rte_ipv4_addr
            is incremeneted or decremented when rip_rte_ipv4_addr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_IPV4_ADDR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_IPV4_ADDR_COUNT_CMD : numeric})

    def traffic_config_rip_rte_ipv4_addr_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_ipv4_addr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_ipv4_addr_step and
            rip_rte_ipv4_addr_count.
            decr

            the value is decremented as specified with rip_rte_ipv4_addr_step and
            rip_rte_ipv4_addr_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_IPV4_ADDR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_IPV4_ADDR_MODE_CMD : opt})

    def traffic_config_rip_rte_ipv4_addr_step(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_ipv4_addr_step
        Description:Step value used to modify rip_rte_ipv4_addr when rip_rte_ipv4_addr_mode
            is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_IPV4_ADDR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_IPV4_ADDR_STEP_CMD : ip})

    def traffic_config_rip_rte_ipv4_addr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_ipv4_addr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_ipv4_addr
            1

            enable tracking by rip_rte_ipv4_addr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_IPV4_ADDR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_IPV4_ADDR_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_metric(self, range):
        """
        This is the method the command: traffic_config option rip_rte_metric
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol.
            Configure Routing Table Entry Metric field. To configure Metric for
            multiple Routing Table Entries specify this parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_METRIC_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_METRIC_CMD : range})

    def traffic_config_rip_rte_metric_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_metric_count
        Description:Numeric value which configures the number of times the rip_rte_metric is
            incremeneted or decremented when rip_rte_metric_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_METRIC_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_METRIC_COUNT_CMD : numeric})

    def traffic_config_rip_rte_metric_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_metric_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_metric_step and
            rip_rte_metric_count.
            decr

            the value is decremented as specified with rip_rte_metric_step and
            rip_rte_metric_count.
            list

            Parameter -rip_rte_metric contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_METRIC_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_METRIC_MODE_CMD : opt})

    def traffic_config_rip_rte_metric_step(self, range):
        """
        This is the method the command: traffic_config option rip_rte_metric_step
        Description:Step value used to modify rip_rte_metric when rip_rte_metric_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_METRIC_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_METRIC_STEP_CMD : range})

    def traffic_config_rip_rte_metric_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_metric_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_metric
            1

            enable tracking by rip_rte_metric
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_METRIC_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_METRIC_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v1_unused2(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused2
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol set to
            rip and and rip_version 1. Configure Routing Table Entry Unused2 field.
            To configure Unused2 for multiple Routing Table Entries specify this
            parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED2_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED2_CMD : range})

    def traffic_config_rip_rte_v1_unused2_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused2_count
        Description:Numeric value which configures the number of times the
            rip_rte_v1_unused2 is incremeneted or decremented when
            rip_rte_v1_unused2_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED2_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED2_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v1_unused2_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused2_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v1_unused2_step and
            rip_rte_v1_unused2_count.
            decr

            the value is decremented as specified with rip_rte_v1_unused2_step and
            rip_rte_v1_unused2_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED2_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED2_MODE_CMD : opt})

    def traffic_config_rip_rte_v1_unused2_step(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused2_step
        Description:Step value used to modify rip_rte_v1_unused2 when
            rip_rte_v1_unused2_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED2_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED2_STEP_CMD : range})

    def traffic_config_rip_rte_v1_unused2_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused2_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v1_unused2
            1

            enable tracking by rip_rte_v1_unused2
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED2_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED2_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v1_unused3(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused3
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol set to
            rip and and rip_version 1. Configure Routing Table Entry Unused3 field.
            To configure Unused3 for multiple Routing Table Entries specify this
            parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED3_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED3_CMD : range})

    def traffic_config_rip_rte_v1_unused3_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused3_count
        Description:Numeric value which configures the number of times the
            rip_rte_v1_unused3 is incremeneted or decremented when
            rip_rte_v1_unused3_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED3_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED3_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v1_unused3_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused3_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v1_unused3_step and
            rip_rte_v1_unused3_count.
            decr

            the value is decremented as specified with rip_rte_v1_unused3_step and
            rip_rte_v1_unused3_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED3_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED3_MODE_CMD : opt})

    def traffic_config_rip_rte_v1_unused3_step(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused3_step
        Description:Step value used to modify rip_rte_v1_unused3 when
            rip_rte_v1_unused3_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED3_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED3_STEP_CMD : range})

    def traffic_config_rip_rte_v1_unused3_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused3_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v1_unused3
            1

            enable tracking by rip_rte_v1_unused3
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED3_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED3_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v1_unused4(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused4
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol set to
            rip and and rip_version 1. Configure Routing Table Entry Unused4 field.
            To configure Unused4 for multiple Routing Table Entries specify this
            parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED4_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED4_CMD : range})

    def traffic_config_rip_rte_v1_unused4_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused4_count
        Description:Numeric value which configures the number of times the
            rip_rte_v1_unused4 is incremeneted or decremented when
            rip_rte_v1_unused4_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED4_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED4_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v1_unused4_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused4_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v1_unused4_step and
            rip_rte_v1_unused4_count.
            decr

            the value is decremented as specified with rip_rte_v1_unused4_step and
            rip_rte_v1_unused4_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED4_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED4_MODE_CMD : opt})

    def traffic_config_rip_rte_v1_unused4_step(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused4_step
        Description:Step value used to modify rip_rte_v1_unused4 when
            rip_rte_v1_unused4_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED4_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED4_STEP_CMD : range})

    def traffic_config_rip_rte_v1_unused4_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v1_unused4_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v1_unused4
            1

            enable tracking by rip_rte_v1_unused4
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V1_UNUSED4_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V1_UNUSED4_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v2_next_hop(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_v2_next_hop
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol rip and
            and rip_version 2. Configure Routing Table Entry Next Hop IP address. To
            configure Next Hop for multiple Routing Table Entries specify this
            parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_NEXT_HOP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_CMD : ip})

    def traffic_config_rip_rte_v2_next_hop_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v2_next_hop_count
        Description:Numeric value which configures the number of times the
            rip_rte_v2_next_hop is incremeneted or decremented when
            rip_rte_v2_next_hop_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_NEXT_HOP_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v2_next_hop_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_next_hop_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v2_next_hop_step and
            rip_rte_v2_next_hop_count.
            decr

            the value is decremented as specified with rip_rte_v2_next_hop_step and
            rip_rte_v2_next_hop_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_NEXT_HOP_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_MODE_CMD : opt})

    def traffic_config_rip_rte_v2_next_hop_step(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_v2_next_hop_step
        Description:Step value used to modify rip_rte_v2_next_hop when
            rip_rte_v2_next_hop_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_NEXT_HOP_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_STEP_CMD : ip})

    def traffic_config_rip_rte_v2_next_hop_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_next_hop_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v2_next_hop
            1

            enable tracking by rip_rte_v2_next_hop
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_NEXT_HOP_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v2_route_tag(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v2_route_tag
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol rip and
            and rip_version 2. Configure Routing Table Entry Route Tag. To configure
            Route Tag for multiple Routing Table Entries specify this parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_ROUTE_TAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_CMD : range})

    def traffic_config_rip_rte_v2_route_tag_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v2_route_tag_count
        Description:Numeric value which configures the number of times the
            rip_rte_v2_route_tag is incremeneted or decremented when
            rip_rte_v2_route_tag_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_ROUTE_TAG_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v2_route_tag_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_route_tag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v2_route_tag_step and
            rip_rte_v2_route_tag_count.
            decr

            the value is decremented as specified with rip_rte_v2_route_tag_step and
            rip_rte_v2_route_tag_count.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_ROUTE_TAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_MODE_CMD : opt})

    def traffic_config_rip_rte_v2_route_tag_step(self, range):
        """
        This is the method the command: traffic_config option rip_rte_v2_route_tag_step
        Description:Step value used to modify rip_rte_v2_route_tag when
            rip_rte_v2_route_tag_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_ROUTE_TAG_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_STEP_CMD : range})

    def traffic_config_rip_rte_v2_route_tag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_route_tag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v2_route_tag
            1

            enable tracking by rip_rte_v2_route_tag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_ROUTE_TAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_TRACKING_CMD : bool_opt})

    def traffic_config_rip_rte_v2_subnet_mask(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_v2_subnet_mask
        Description:Valid only for traffic_generator ixnetwork_540 and l4_protocol rip and
            and rip_version 2. Configure Routing Table Entry Subnet Mask. To
            configure Subnet Mask for multiple Routing Table Entries specify this
            parameter as list.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_SUBNET_MASK_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_CMD : ip})

    def traffic_config_rip_rte_v2_subnet_mask_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_rte_v2_subnet_mask_count
        Description:Numeric value which configures the number of times the
            rip_rte_v2_subnet_mask is incremeneted or decremented when
            rip_rte_v2_subnet_mask_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_SUBNET_MASK_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_COUNT_CMD : numeric})

    def traffic_config_rip_rte_v2_subnet_mask_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_subnet_mask_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_rte_v2_subnet_mask_step
            and rip_rte_v2_subnet_mask_count.
            decr

            the value is decremented as specified with rip_rte_v2_subnet_mask_step
            and rip_rte_v2_subnet_mask_count.
            list

            Parameter -rip_rte_v2_subnet_mask contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_SUBNET_MASK_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_MODE_CMD : opt})

    def traffic_config_rip_rte_v2_subnet_mask_step(self, ip):
        """
        This is the method the command: traffic_config option rip_rte_v2_subnet_mask_step
        Description:Step value used to modify rip_rte_v2_subnet_mask when
            rip_rte_v2_subnet_mask_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_SUBNET_MASK_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        ip --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_STEP_CMD : ip})

    def traffic_config_rip_rte_v2_subnet_mask_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_rte_v2_subnet_mask_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_rte_v2_subnet_mask
            1

            enable tracking by rip_rte_v2_subnet_mask
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_RTE_V2_SUBNET_MASK_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_TRACKING_CMD : bool_opt})

    def traffic_config_rip_unused(self, range):
        """
        This is the method the command: traffic_config option rip_unused
        Description:For option 'l4_protocol' set to 'rip', this option defines the RIP
            'Unused' field.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_UNUSED_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_UNUSED_CMD : range})

    def traffic_config_rip_unused_count(self, numeric):
        """
        This is the method the command: traffic_config option rip_unused_count
        Description:Numeric value which configures the number of times the rip_unused is
            incremeneted or decremented when rip_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_UNUSED_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_UNUSED_COUNT_CMD : numeric})

    def traffic_config_rip_unused_mode(self, opt):
        """
        This is the method the command: traffic_config option rip_unused_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with rip_unused_step and
            rip_unused_count.
            decr

            the value is decremented as specified with rip_unused_step and
            rip_unused_count.
            list

            Parameter -rip_unused contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_UNUSED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_UNUSED_MODE_CMD : opt})

    def traffic_config_rip_unused_step(self, range):
        """
        This is the method the command: traffic_config option rip_unused_step
        Description:Step value used to modify rip_unused when rip_unused_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_UNUSED_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_UNUSED_STEP_CMD : range})

    def traffic_config_rip_unused_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option rip_unused_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by rip_unused
            1

            enable tracking by rip_unused
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: RIP_UNUSED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_UNUSED_TRACKING_CMD : bool_opt})

    def traffic_config_rip_version(self, opt):
        """
        This is the method the command: traffic_config option rip_version
        Description:For option 'l4_protocol' set to 'rip', this option defines the RIP
            version for a particular stream. 1 - Version 1.2 - Version 2.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: RIP_VERSION_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.RIP_VERSION_CMD : opt})

    def traffic_config_route_mesh(self, opt):
        """
        This is the method the command: traffic_config option route_mesh
        Description:Specifies the mapping between source routes and destination routes.
            fully - full mesh, every source route is mapped to every destination
            route. This is the default when traffic_generator ixnetworkone_to_one -
            each source route is mapped with only one destination route. This is the
            default when traffic_generator ixnetwork_540
            DEFAULT

            fully
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
            'mode' | value= 'create reset' |
        Constants Available: ROUTE_MESH_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.ROUTE_MESH_CMD : opt})

    def traffic_config_session_aware_traffic(self, opt):
        """
        This is the method the command: traffic_config option session_aware_traffic
        Description:The session aware traffic field for a traffic item. The only available
            choice is ppp. When session_aware_traffic is set to ppp, the kill bit
            will be enabled. Also, when session_aware_traffic is set to ppp, the
            value of the dynamic_update_field parameter will be automatically set to
            ppp.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: SESSION_AWARE_TRAFFIC_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SESSION_AWARE_TRAFFIC_CMD : opt})

    def traffic_config_signature(self, any):
        """
        This is the method the command: traffic_config option signature
        Description:In the transmitted packet, the signature uniquely signs the transmitted
            packet as one destined for packet group filtering on the receive port.
            On the receive port, the signature is used to filter only those packets
            that have a matching signature and the minimum, maximum and average
            latencies are obtained for those packets.(DEFAULT = 'DE.AD.BE.EF')This
            parameter can take a list of values as follows: when traffic is
            configured bidirectional and this parameter has one value, this value
            will be set on both streams. When this parameter has a list of two
            values the first value will be assigned to the first stream and the
            second value to the second stream.If -enable_auto_detect_instrumentation
            is 1, then this option will represent a signature value of 12 hex bytes.
            This signature will be searched at receive side into the received
            packets and must by the same with the signature set on receive
            port.(DEFAULT = '87.73.67.49.42.87.11.80.08.71.18.05')
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: SIGNATURE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SIGNATURE_CMD : any})

    def traffic_config_signature_offset(self):
        """
        This is the method the command: traffic_config option signature_offset
        Description:The offset, within the packet, of the packet group signature. This
            parameter can take a list of values as follows: when traffic is
            configured bidirectional and this parameter has one value, this value
            will be set on both streams. When this parameter has a list of two
            values the first value will be assigned to the first stream and the
            second value to the second stream.If -enable_auto_detect_instrumentation
            is 1, will be ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: SIGNATURE_OFFSET_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SIGNATURE_OFFSET_CMD : ""})

    def traffic_config_site_id(self):
        """
        This is the method the command: traffic_config option site_id
        Description:This option is used to specify the site id value for the first LAN
            static endpoint range. It can take decimal values in the 0-4294967295
            range. Valid for traffic_generator ixnetwork when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: SITE_ID_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SITE_ID_CMD : ""})

    def traffic_config_site_id_enable(self):
        """
        This is the method the command: traffic_config option site_id_enable
        Description:This option is used to specify whether the site id will be configured
            for the LAN static endpoint range. Valid for traffic_generator ixnetwork
            when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: SITE_ID_ENABLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SITE_ID_ENABLE_CMD : ""})

    def traffic_config_site_id_step(self):
        """
        This is the method the command: traffic_config option site_id_step
        Description:This option is used to specify the step between the value of the site ip
            of each the LAN static endpoint range. It can take any numeric value.
            Valid for traffic_generator ixnetwork when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: SITE_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SITE_ID_STEP_CMD : ""})

    def traffic_config_skip_frame_size_validation(self, flag):
        """
        This is the method the command: traffic_config option skip_frame_size_validation
        Description:This flag is used to reduce the configuration time for the
            ixia::traffic_config by skipingthe computation of the frame_size.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: SKIP_FRAME_SIZE_VALIDATION_CMD
        Supported:IxNetwork
        Keyword arguments:
        flag --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SKIP_FRAME_SIZE_VALIDATION_CMD : flag})

    def traffic_config_source_filter(self, opt):
        """
        This is the method the command: traffic_config option source_filter
        Description:This parameter filter on the available source endpoints that can be
            provided with emulation_src_handle.
            Valid options are:
            all

            There are no filters applied
            ethernet

            Ethernet endpoints only (for raw trafic only)
            atm

            ATM endpoints only (for raw trafic only)
            framerelay

            Frame Relay endpoints only (for raw trafic only)
            hdlc

            HDLC endpoints only (for raw trafic only)
            ppp

            PPP endpoints only (for raw trafic only)
            none

            non MPLS endpoints only
            l2vpn

            L2VPN endpoints only
            l3vpn

            L3VPN endpoints only
            mpls

            MPLS endpoints only
            6pe

            6PE endpoints only
            6vpe

            6VPE endpoints only
            bgpvpls

            VPLS endpoints only
            mac_in_mac

            MAC in MAC endpoints only
            data_center_bridging

            Data Center and Bridging endpoints only
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: SOURCE_FILTER_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SOURCE_FILTER_CMD : opt})

    def traffic_config_src_dest_mesh(self, opt):
        """
        This is the method the command: traffic_config option src_dest_mesh
        Description:Specifies the mapping between source and destination. The choice 'fully'
            used along with traffic_generator ixnetwork is equivalent to the choice
            'many_to_many' used along with traffic_generator ixnetwork_540. Valid
            options are:
            Valid options are:
            none

            It acts as if there were no endpoints (for meshing purposes); all
            sources and all destinations are treated as one big endpoint.
            fully

            Full mesh, every source is combined with every destination. This is the
            default value when using traffic_generator ixnetwork.
            one_to_one

            One to one, each source has one destination. This is the default value
            when using traffic_generator ixnetwork_540.
            many_to_many

            Only for traffic_generator ixnetwork_540. many-to-many matching occurs
            between each Source Endpoints and all of the Destination Endpoints. One
            traffic flow is created for each Source/Destination pair. For
            example:First pair: First Source Endpoint and first Destination
            Endpoint.; Second pair: First Source Endpoint and second Destination
            Endpoint.; Third pair: First Source Endpoint and third Destination Endpoint.
            DEFAULT

            fully
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: SRC_DEST_MESH_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.SRC_DEST_MESH_CMD : opt})

    def traffic_config_stream_packing(self, opt):
        """
        This is the method the command: traffic_config option stream_packing
        Description:This argument can be used to specify the way the streams generated for a
            traffic item are packed. This parameter is deprecated for
            traffic_generator ixnetwork_540, use transmit_distribution instead. If
            traffic_generator is ixnetwork_540 and both parameters stream_packing
            will be ignored. Valid choices are: merge_destination_ranges combine
            alike destinations, such as route ranges, into one stream. With
            traffic_generator ixnetwork_540 this option will perform the same action
            as transmit_distribution 'endpoint_pair'.one_stream_per_endpoint_pairone
            stream will be created per source/destination endpoint pair. With
            traffic_generator ixnetwork_540 this option will perform the same action
            as transmit_distribution 'endpoint_pair'.optimal_packing each source
            endpoint and its destination ranges will be packed together into a
            single stream. With traffic_generator ixnetwork_540 this option will
            perform the same action as transmit_distribution 'none'.
            DEFAULT

            optimal_packing
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: STREAM_PACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.STREAM_PACKING_CMD : opt})

    def traffic_config_table_udf_column_name(self):
        """
        This is the method the command: traffic_config option table_udf_column_name
        Description:List of column names.For -mode create/modify, all table_udf_...
            parameters are required. If one of the parametersis not present, no
            configuration is performed.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: TABLE_UDF_COLUMN_NAME_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TABLE_UDF_COLUMN_NAME_CMD : ""})

    def traffic_config_table_udf_column_offset(self):
        """
        This is the method the command: traffic_config option table_udf_column_offset
        Description:List of column offsets in bytes from the beginning of the packet. If
            traffic_generator is ixnetwork_540, circuit_type must be configured to
            'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: TABLE_UDF_COLUMN_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TABLE_UDF_COLUMN_OFFSET_CMD : ""})

    def traffic_config_table_udf_column_size(self):
        """
        This is the method the command: traffic_config option table_udf_column_size
        Description:List of column sizes in bytes. If traffic_generator is ixnetwork_540,
            circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: TABLE_UDF_COLUMN_SIZE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TABLE_UDF_COLUMN_SIZE_CMD : ""})

    def traffic_config_table_udf_column_type(self, opt):
        """
        This is the method the command: traffic_config option table_udf_column_type
        Description:List of column types: hex ascii binary decimal mac ipv4 ipv6 and also a
            custom type. The custom type can be a combination of numbers and a,b,d,
            and x (eg: '8b,3d,16x') and is not valid with traffic_generator
            ixnetwork_540. a - ascii; b - binary; d - decimal; x - hex. If
            traffic_generator is ixnetwork_540, circuit_type must be configured to
            'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: TABLE_UDF_COLUMN_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TABLE_UDF_COLUMN_TYPE_CMD : opt})

    def traffic_config_table_udf_rows(self):
        """
        This is the method the command: traffic_config option table_udf_rows
        Description:A keyed list of rows that need to be added to the table UDF. The rows
            must respect column order, size and type. The keyed list should have the
            format below for n columns and m rows:{row_1 {column_value_11 ...
            column_value_1n}}{row_2 {column_value_21 ...
            column_value_2n}}...........................................{row_m
            {column_value_m1 ... column_value_mn}}If traffic_generator is
            ixnetwork_540, circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: TABLE_UDF_ROWS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TABLE_UDF_ROWS_CMD : ""})

    def traffic_config_tag_filter(self):
        """
        This is the method the command: traffic_config option tag_filter
        Description:This parameter specifies the filter regarding which tagged scenario
            items will be used to run traffic. Has the following format (for each
            endpoint set): tagname:id1,id2,id3 Eg. [list [list ip1:1,2 ip2:1] [list
            ip1:1,3 ip2:2]]
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TAG_FILTER_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TAG_FILTER_CMD : ""})

    def traffic_config_tcp_ack_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_ack_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_ack_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_ack_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ack_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_ack_flag
            1

            enable tracking by tcp_ack_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_ack_num_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_ack_num_count
        Description:Numeric value which configures the number of times the tcp_ack_num is
            incremeneted or decremented when tcp_ack_num_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_NUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_NUM_COUNT_CMD : numeric})

    def traffic_config_tcp_ack_num_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_ack_num_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_ack_num_step and
            tcp_ack_num_count.
            decr

            the value is decremented as specified with tcp_ack_num_step and
            tcp_ack_num_count.
            list

            Parameter -tcp_ack_num contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_NUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_NUM_MODE_CMD : opt})

    def traffic_config_tcp_ack_num_step(self, range):
        """
        This is the method the command: traffic_config option tcp_ack_num_step
        Description:Step value used to modify tcp_ack_num when tcp_ack_num_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_NUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_NUM_STEP_CMD : range})

    def traffic_config_tcp_ack_num_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ack_num_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_ack_num
            1

            enable tracking by tcp_ack_num
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ACK_NUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ACK_NUM_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_checksum(self, any):
        """
        This is the method the command: traffic_config option tcp_checksum
        Description:Configure the TCP Checksum field (2 bytes HEX).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CHECKSUM_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CHECKSUM_CMD : any})

    def traffic_config_tcp_checksum_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_checksum_count
        Description:Numeric value which configures the number of times the tcp_checksum is
            incremeneted or decremented when tcp_checksum_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CHECKSUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CHECKSUM_COUNT_CMD : numeric})

    def traffic_config_tcp_checksum_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_checksum_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_checksum_step and
            tcp_checksum_count.
            decr

            the value is decremented as specified with tcp_checksum_step and
            tcp_checksum_count.
            list

            Parameter -tcp_checksum contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CHECKSUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CHECKSUM_MODE_CMD : opt})

    def traffic_config_tcp_checksum_step(self, any):
        """
        This is the method the command: traffic_config option tcp_checksum_step
        Description:Step value used to modify tcp_checksum when tcp_checksum_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CHECKSUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CHECKSUM_STEP_CMD : any})

    def traffic_config_tcp_checksum_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_checksum_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_checksum
            1

            enable tracking by tcp_checksum
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CHECKSUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CHECKSUM_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_cwr_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_cwr_flag
        Description:Configure the TCP ECN CWR bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CWR_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CWR_FLAG_CMD : bool_opt})

    def traffic_config_tcp_cwr_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_cwr_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_cwr_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CWR_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CWR_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_cwr_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_cwr_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_cwr_flag
            1

            enable tracking by tcp_cwr_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_CWR_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_CWR_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_data_offset(self, range):
        """
        This is the method the command: traffic_config option tcp_data_offset
        Description:Configure the TCP Data Offset field (0-15).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DATA_OFFSET_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DATA_OFFSET_CMD : range})

    def traffic_config_tcp_data_offset_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_data_offset_count
        Description:Numeric value which configures the number of times the tcp_data_offset
            is incremeneted or decremented when tcp_data_offset_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DATA_OFFSET_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DATA_OFFSET_COUNT_CMD : numeric})

    def traffic_config_tcp_data_offset_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_data_offset_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_data_offset_step and
            tcp_data_offset_count.
            decr

            the value is decremented as specified with tcp_data_offset_step and
            tcp_data_offset_count.
            list

            Parameter -tcp_data_offset contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DATA_OFFSET_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DATA_OFFSET_MODE_CMD : opt})

    def traffic_config_tcp_data_offset_step(self, range):
        """
        This is the method the command: traffic_config option tcp_data_offset_step
        Description:Step value used to modify tcp_data_offset when tcp_data_offset_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DATA_OFFSET_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DATA_OFFSET_STEP_CMD : range})

    def traffic_config_tcp_data_offset_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_data_offset_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_data_offset
            1

            enable tracking by tcp_data_offset
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DATA_OFFSET_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DATA_OFFSET_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_dst_port_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_dst_port_count
        Description:Numeric value which configures the number of times the tcp_dst_port is
            incremeneted or decremented when tcp_dst_port_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DST_PORT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DST_PORT_COUNT_CMD : numeric})

    def traffic_config_tcp_dst_port_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_dst_port_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_dst_port_step and
            tcp_dst_port_count.
            decr

            the value is decremented as specified with tcp_dst_port_step and
            tcp_dst_port_count.
            list

            Parameter -tcp_dst_port contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DST_PORT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DST_PORT_MODE_CMD : opt})

    def traffic_config_tcp_dst_port_step(self, range):
        """
        This is the method the command: traffic_config option tcp_dst_port_step
        Description:Step value used to modify tcp_dst_port when tcp_dst_port_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DST_PORT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DST_PORT_STEP_CMD : range})

    def traffic_config_tcp_dst_port_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_dst_port_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_dst_port
            1

            enable tracking by tcp_dst_port
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_DST_PORT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_DST_PORT_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_ecn_echo_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ecn_echo_flag
        Description:Configure the TCP ECN Echo bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ECN_ECHO_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ECN_ECHO_FLAG_CMD : bool_opt})

    def traffic_config_tcp_ecn_echo_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_ecn_echo_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_ecn_echo_flag contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ECN_ECHO_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ECN_ECHO_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_ecn_echo_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ecn_echo_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_ecn_echo_flag
            1

            enable tracking by tcp_ecn_echo_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_ECN_ECHO_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_ECN_ECHO_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_fin_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_fin_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_fin_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_FIN_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_FIN_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_fin_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_fin_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_fin_flag
            1

            enable tracking by tcp_fin_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_FIN_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_FIN_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_ns_flag(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ns_flag
        Description:Configure the TCP ECN NS bit.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_NS_FLAG_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_NS_FLAG_CMD : bool_opt})

    def traffic_config_tcp_ns_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_ns_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_ns_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_NS_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_NS_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_ns_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_ns_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_ns_flag
            1

            enable tracking by tcp_ns_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_NS_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_NS_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_psh_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_psh_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_psh_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_PSH_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_PSH_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_psh_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_psh_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_psh_flag
            1

            enable tracking by tcp_psh_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_PSH_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_PSH_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_reserved_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_reserved_count
        Description:Numeric value which configures the number of times the tcp_reserved is
            incremeneted or decremented when tcp_reserved_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RESERVED_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RESERVED_COUNT_CMD : numeric})

    def traffic_config_tcp_reserved_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_reserved_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_reserved_step and
            tcp_reserved_count.
            decr

            the value is decremented as specified with tcp_reserved_step and
            tcp_reserved_count.
            list

            Parameter -tcp_reserved contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RESERVED_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RESERVED_MODE_CMD : opt})

    def traffic_config_tcp_reserved_step(self, range):
        """
        This is the method the command: traffic_config option tcp_reserved_step
        Description:Step value used to modify tcp_reserved when tcp_reserved_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RESERVED_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RESERVED_STEP_CMD : range})

    def traffic_config_tcp_reserved_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_reserved_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_reserved
            1

            enable tracking by tcp_reserved
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RESERVED_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RESERVED_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_rst_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_rst_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_rst_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RST_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RST_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_rst_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_rst_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_rst_flag
            1

            enable tracking by tcp_rst_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_RST_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_RST_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_seq_num_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_seq_num_count
        Description:Numeric value which configures the number of times the tcp_seq_num is
            incremeneted or decremented when tcp_seq_num_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SEQ_NUM_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SEQ_NUM_COUNT_CMD : numeric})

    def traffic_config_tcp_seq_num_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_seq_num_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_seq_num_step and
            tcp_seq_num_count.
            decr

            the value is decremented as specified with tcp_seq_num_step and
            tcp_seq_num_count.
            list

            Parameter -tcp_seq_num contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SEQ_NUM_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SEQ_NUM_MODE_CMD : opt})

    def traffic_config_tcp_seq_num_step(self, range):
        """
        This is the method the command: traffic_config option tcp_seq_num_step
        Description:Step value used to modify tcp_seq_num when tcp_seq_num_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SEQ_NUM_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SEQ_NUM_STEP_CMD : range})

    def traffic_config_tcp_seq_num_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_seq_num_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_seq_num
            1

            enable tracking by tcp_seq_num
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SEQ_NUM_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SEQ_NUM_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_src_port_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_src_port_count
        Description:Numeric value which configures the number of times the tcp_src_port is
            incremeneted or decremented when tcp_src_port_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SRC_PORT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SRC_PORT_COUNT_CMD : numeric})

    def traffic_config_tcp_src_port_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_src_port_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_src_port_step and
            tcp_src_port_count.
            decr

            the value is decremented as specified with tcp_src_port_step and
            tcp_src_port_count.
            list

            Parameter -tcp_src_port contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SRC_PORT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SRC_PORT_MODE_CMD : opt})

    def traffic_config_tcp_src_port_step(self, range):
        """
        This is the method the command: traffic_config option tcp_src_port_step
        Description:Step value used to modify tcp_src_port when tcp_src_port_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SRC_PORT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SRC_PORT_STEP_CMD : range})

    def traffic_config_tcp_src_port_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_src_port_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_src_port
            1

            enable tracking by tcp_src_port
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SRC_PORT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SRC_PORT_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_syn_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_syn_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_syn_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SYN_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SYN_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_syn_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_syn_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_syn_flag
            1

            enable tracking by tcp_syn_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_SYN_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_SYN_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_urg_flag_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_urg_flag_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            list

            Parameter -tcp_urg_flag contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URG_FLAG_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URG_FLAG_MODE_CMD : opt})

    def traffic_config_tcp_urg_flag_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_urg_flag_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_urg_flag
            1

            enable tracking by tcp_urg_flag
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URG_FLAG_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URG_FLAG_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_urgent_ptr_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_urgent_ptr_count
        Description:Numeric value which configures the number of times the tcp_urgent_ptr is
            incremeneted or decremented when tcp_urgent_ptr_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URGENT_PTR_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URGENT_PTR_COUNT_CMD : numeric})

    def traffic_config_tcp_urgent_ptr_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_urgent_ptr_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_urgent_ptr_step and
            tcp_urgent_ptr_count.
            decr

            the value is decremented as specified with tcp_urgent_ptr_step and
            tcp_urgent_ptr_count.
            list

            Parameter -tcp_urgent_ptr contains a list of values. Each packet will
            use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URGENT_PTR_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URGENT_PTR_MODE_CMD : opt})

    def traffic_config_tcp_urgent_ptr_step(self, range):
        """
        This is the method the command: traffic_config option tcp_urgent_ptr_step
        Description:Step value used to modify tcp_urgent_ptr when tcp_urgent_ptr_mode is
            incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URGENT_PTR_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URGENT_PTR_STEP_CMD : range})

    def traffic_config_tcp_urgent_ptr_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_urgent_ptr_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_urgent_ptr
            1

            enable tracking by tcp_urgent_ptr
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_URGENT_PTR_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_URGENT_PTR_TRACKING_CMD : bool_opt})

    def traffic_config_tcp_window_count(self, numeric):
        """
        This is the method the command: traffic_config option tcp_window_count
        Description:Numeric value which configures the number of times the tcp_window is
            incremeneted or decremented when tcp_window_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_WINDOW_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_WINDOW_COUNT_CMD : numeric})

    def traffic_config_tcp_window_mode(self, opt):
        """
        This is the method the command: traffic_config option tcp_window_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with tcp_window_step and
            tcp_window_count.
            decr

            the value is decremented as specified with tcp_window_step and
            tcp_window_count.
            list

            Parameter -tcp_window contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_WINDOW_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_WINDOW_MODE_CMD : opt})

    def traffic_config_tcp_window_step(self, range):
        """
        This is the method the command: traffic_config option tcp_window_step
        Description:Step value used to modify tcp_window when tcp_window_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_WINDOW_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_WINDOW_STEP_CMD : range})

    def traffic_config_tcp_window_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option tcp_window_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by tcp_window
            1

            enable tracking by tcp_window
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TCP_WINDOW_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TCP_WINDOW_TRACKING_CMD : bool_opt})

    def traffic_config_test_objective_value(self, numeric):
        """
        This is the method the command: traffic_config option test_objective_value
        Description:Valid only for traffic_generator ixnetwork, mode create/modify and
            circuit_endpoint_type ipv4_application_traffic ot
            ipv6_application_traffic. The -enable_test_objective argument must be
            set to 1 in order for the value of this argument to be used.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: TEST_OBJECTIVE_VALUE_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TEST_OBJECTIVE_VALUE_CMD : numeric})

    def traffic_config_track_by(self, opt):
        """
        This is the method the command: traffic_config option track_by
        Description:This argument can be used to specify the method of tracking the
            generated traffic in order to gather traffic statistics. With
            traffic_generator ixnetwork_540 the values specified with -track_by on
            mode modify will be appended to the existing track_by values of the
            traffic item. For traffic_generator ixnetwork_540 we support all
            available IxNetwork low level API choices. Valid choices are:
            assured_forwarding_phb - QoS assured forwarding PHB will be used as the
            tracking item. When traffic_generator is ixnetwork_540 this is valid
            only when qos_type_ixn is configured to af_class1_low_precedence or
            af_class2_low_precedence or af_class3_low_precedence or
            af_class4_low_precedence or af_class1_medium_precedence or
            af_class2_medium_precedence or af_class3_medium_precedence or
            af_class4_medium_precedence or af_class1_high_precedence or
            af_class2_high_precedence or af_class3_high_precedence or
            af_class4_high_precedence. With traffic_generator ixnetwork this can be
            also combined with usage of enable_override_value and
            override_value_list arguments. class_selector_phb - QoS class selector
            PHB will be used as the tracking item. When traffic_generator is
            ixnetwork_540 this is valid only when qos_type_ixn is configured to
            cs_precedence1 or cs_precedence2 or cs_precedence3 cs_precedence4 or
            cs_precedence5 or cs_precedence6 cs_precedence7. With traffic_generator
            ixnetwork this can be also combined with usage of enable_override_value
            and override_value_list arguments. default_phb - QoS default PHB will be
            used as the tracking item. When traffic_generator is ixnetwork_540 this
            is valid only when qos_type_ixn is configured to dscp_default or
            qos_type_ixn is not specified and ip_dscp is specified. With
            traffic_generator ixnetwork this can be also combined with usage of
            enable_override_value and override_value_list
            arguments.expedited_forwarding_phb - QoS expedited forwarding PHB will
            be used as the tracking item. When traffic_generator is ixnetwork_540
            this is valid only when qos_type_ixn is configured to 'ef'. With
            traffic_generator ixnetwork this can be also combined with usage of
            enable_override_value and override_value_list arguments. endpoint_pair -
            Tracking per source/destination endpoint pair. tos - IP header TOS
            values will be used as the tracking item. When traffic_generator is
            ixnetwork_540 this is valid only when qos_type_ixn is configured to
            'tos' or qos_type_ixn, qos_byte and ip_dscp are not specified and
            ip_precedence is configured. With traffic_generator ixnetwork this can
            be also combined with usage of enable_override_value and
            override_value_list arguments. dest_ip - The Destination IP address will
            be used as the tracking item. source_ip - The Source IP address will be
            used as the tracking item. ipv6_flow_label - The IPv6 flow label address
            will be used as the tracking item. mpls_label - Available only for
            traffic that uses MPLS labels. The MPLS label will be used as the
            tracking item. mpls_mpls_exp - Available only for traffic that uses MPLS
            labels. The MPLS Exp Bit will be used as the tracking item.
            mpls_flow_descriptor - Available only for traffic that uses MPLS labels.
            The MPLS flow descriptor will be used as the tracking item. inner_vlan -
            The VLAN ID will be used as the tracking item. This can be also combined
            with enable_override_value and override_value_list arguments. dst_mac -
            The Destination MAC address will be used as the tracking item. src_mac -
            The Source MAC address will be used as the tracking item. dlci - The
            FrameRelay DLCI address will be used as the tracking item. raw_priority
            - IP header raq qos values will be used as the tracking item. When
            traffic_generator is ixnetwork_540 this is valid only when qos_type_ixn
            is configured to 'custom' or qos_type_ixn is not specified and qos_byte
            is configured. With traffic_generator ixnetwork, custom, user-defined
            hex values can be inserted into the packets for tracking on the
            receiving side. This is also combined with usage of
            enable_override_value and override_value_list arguments. custom_8bit - A
            custom-defined 8bit value (or values) will be used as the tracking item.
            custom_16bit - A custom-defined 16bit value (or values) will be used as
            the tracking item custom_24bit - A custom-defined 24bit value (or
            values) will be used as the tracking item custom_32bit - A
            custom-defined 32bit value (or values) will be used as the tracking item
            b_src_mac - Valid when -circuit_type is mac_in_mac b_dest_mac - Valid
            when -circuit_type is mac_in_mac b_vlan - Valid when -circuit_type is
            mac_in_mac i_tag_isid - Valid when -circuit_type is mac_in_mac c_src_mac
            - Valid when -circuit_type is mac_in_mac c_dest_mac - Valid when
            -circuit_type is mac_in_mac s_vlan - Valid when -circuit_type is
            mac_in_mac c_vlan - Valid when -circuit_type is mac_in_mac none - No
            tracking will be implemented on the receiving port.Valid choices only
            for ixnetwork_540: - cisco_frame_relay_dlci_high_order_bits -
            cisco_frame_relay_dlci_low_order_bits - . dest_endpoint - dest_mac -
            dest_port - ethernet_ii_ether_type - ethernet_ii_pfc_queue - fcoe_cs_ctl
            - fcoe_dest_id - fcoe_ox_id - . fcoe_src_id - .
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            - fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_did -
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_ox_id -
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_sid -
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            - fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_did -
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_ox_id -
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_sid -
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            - fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_did -
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_ox_id -
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_sid -
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            - fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did
            -
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            - fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid
            -
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            - fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did
            -
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            - fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid
            -
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            -
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_did
            -
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            -
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_sid
            - frame_relay_dlci_high_order_bits - frame_relay_dlci_low_order_bits -
            ipv4_dest_ip - Same as dest_ip.ipv4_precedence - ipv4_source_ip - Same
            as source_ip.ipv6_dest_ip - ipv6_source_ip - ipv6_trafficclass -
            l2tpv2_data_message_tunnel_id - mac_in_mac_priority -
            mac_in_mac_v42_bdest_address - mac_in_mac_v42_bsrc_address -
            mac_in_mac_v42_btag_pcp - mac_in_mac_v42_cdest_address -
            mac_in_mac_v42_csrc_address - mac_in_mac_v42_isid -
            mac_in_mac_v42_priority - mac_in_mac_v42_stag_pcp -
            mac_in_mac_v42_stag_vlan_id - mac_in_mac_v42_vlan_id -
            b_vlan_user_priority - mac_in_mac_ether_type_i_tag -
            s_vlan_user_priority - c_vlan_user_priority - mpls_mpls_exp -
            pppoe_session_sessionid - source_dest_port_pair - source_dest_value_pair
            - source_endpoint - source_port - tcp_tcp_dst_prt - tcp_tcp_src_prt -
            traffic_group - udp_udp_dst_prt - udp_udp_src_prt -
            vlan_vlan_user_priority - traffic_item - .
            DEFAULT

            none
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: TRACK_BY_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TRACK_BY_CMD : opt})

    def traffic_config_traffic_generate(self, bool_opt):
        """
        This is the method the command: traffic_config option traffic_generate
        Description:If 1, the learned information (MAC addresses, MPLS labels) needed for
            configuring traffic is retrieved for each traffic item. This will make
            the process of configuring traffic items slower.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TRAFFIC_GENERATE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TRAFFIC_GENERATE_CMD : bool_opt})

    def traffic_config_traffic_generator(self, opt):
        """
        This is the method the command: traffic_config option traffic_generator
        Description:Selects the Ixia product that will be used for configuring traffic.Valid
            options are ixos, ixnetwork, ixnetwork_540.
            ixos - The traffic will be generated using IxOS.
            ixnetwork (DEPRECATED) - The traffic will be generated using IxNetwork.
            This choice is available only when using IxTclNetwork 5.30 or greater.
            The IxNetwork API is a higher level API, that will allow to configure
            traffic for protocol suites (OSPF, ISIS, BGP, LDP, RSVP, L3VPN,
            L2VPN/VPLS, MVPN, etc.) faster than before, just by specifying the
            protocol emulation handles for traffic source and destination (through
            parameters -emulation_src_handle and -emulation_dst_handle). The layer
            2,3 parameters will be configured automatically.
            ixnetwork_540 - This choice is available when using IxTclNetwork 5.40 or
            or greater. It provides backwards compatibility for almost all the
            parameters and traffic_generator values. It also brings many new
            features like -mode 'append_header', 'prepend_header', 'replace_header'
            which allows customization of the packet, -tracking by multiple fields
            from the packets, egress tracking at predefined offsets and many others.
            There are three ways in which traffic can be created.
            ixos backwards compatibility way (DEPRECATED) - use port_handle to
            confiure the originating port for the traffic. Optionally use
            port_handle2 to configure the destination port for the traffic. If
            port_handle2 is missing, the paremter -allow_self_destined is forced to
            '1' and the destination port will be the same with port_handle. The
            protocol headers that will be added to the packet are triggered by the
            port type (ethernet, atm), the atm_encapsulation, vlan, mpls, isl,
            l2_encap, l3_protocol, l4_protocol.
            ixaccess backwards compatibility way - use emulation_src_handle or
            emulation_dst_handle parameter to configure the src/dst pppox or l2tpox
            handle that will originate/terminate the traffic. Use
            ip_dst_addr/ip_src_addr parameters to configure the fixed IP addresses
            that will end/originate the traffic. When using emulation_src_handle
            port_handle2 parameter can be specified to configure the terminating
            port for the traffic. In this case an interface with ip_dst_addr IP
            address will be searched on that port to use. Similary for
            emulation_dst_handle and port_handle and ip_src_addr parameters.
            ixnetwork backwards compatibility way - use emulation_src_handle and
            emulation_dst_handle to configure the source and destination for the
            traffic pair.
            For all the configuration styles presented, the following applies: the
            parameters that configure packet fields (ip_src_addr, ethernet_type,
            tcp_port etc.) will override the fields with the values passed with the
            parameters.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: TRAFFIC_GENERATOR_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TRAFFIC_GENERATOR_CMD : opt})

    def traffic_config_transmit_distribution(self, opt):
        """
        This is the method the command: traffic_config option transmit_distribution
        Description:Valid only for traffic_generator ixnetwork_540 and -mode 'create'. It
            configures how many streams will be created to accommodate the traffic
            item. For example, if a traffic item configuration has 5 source mac
            addresses, and transmit_distribution is eth_ii_destination_address then
            the traffic item will have 5 streams. This parameter accepts a
            combination of choices. If -transmit_distribution is [list
            eth_ii_destination_address ip_src_addr] then the distribution of streams
            within the traffic item will take into account both criteria. For
            traffic_generator ixnetwork_540 we support all available IxNetwork low
            level API choices.
            Valid options are:
            none

            disable transmit distribution
            assured_forwarding_phb

            assured_forwarding_phb
            b_dest_mac

            b_dest_mac
            b_src_mac

            b_src_mac
            b_vlan

            b_vlan
            c_dest_mac

            c_dest_mac
            c_src_mac

            c_src_mac
            c_vlan

            c_vlan
            class_selector_phb

            class_selector_phb
            default_phb

            default_phb
            dest_ip

            dest_ip
            dest_mac

            dest_mac
            ethernet_ii_ether_type

            ethernet_ii_ether_type
            ethernet_ii_pfc_queue

            ethernet_ii_pfc_queue
            expedited_forwarding_phb

            expedited_forwarding_phb
            fcoe_cs_ctl

            fcoe_cs_ctl
            fcoe_dest_id

            fcoe_dest_id
            fcoe_ox_id

            fcoe_ox_id
            fcoe_src_id

            fcoe_src_id
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority

            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_did

            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_did
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_ox_id

            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_ox_id
            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_sid

            fip_flogi_ls_acc_fcf_fip_flogi_descriptor_fibre_channel_sid
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority

            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_did

            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_did
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_ox_id

            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_ox_id
            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_sid

            fip_flogi_ls_rjt_fcf_fip_flogi_descriptor_fibre_channel_sid
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_cs_ctl_priority

            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_cs_ctl_priority
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_did

            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_did
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_ox_id

            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_ox_id
            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_sid

            fip_flogi_request_enode_fip_flogi_descriptor_fibre_channel_sid
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority

            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did

            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id

            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid

            fip_npiv_fdisc_ls_acc_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority

            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did

            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_did
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id

            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid

            fip_npiv_fdisc_ls_rjt_fcf_fip_npiv_fdisc_descriptor_fibre_channel_sid
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority

            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_cs_ctl_priority
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_did

            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_did
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_ox_id

            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_ox_id
            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_sid

            fip_npiv_fdisc_request_enode_fip_npiv_fdisc_descriptor_fibre_channel_sid
            frame_size

            frame_size
            i_tag_isid

            i_tag_isid
            inner_vlan

            inner_vlan
            ipv4_dest_ip

            ipv4_dest_ip
            ipv4_precedence

            ipv4_precedence
            ipv4_source_ip

            ipv4_source_ip
            ipv6_dest_ip

            ipv6_dest_ip
            ipv6_flow_label

            ipv6_flow_label
            ipv6_flowlabel

            ipv6_flowlabel
            ipv6_source_ip

            ipv6_source_ip
            ipv6_trafficclass

            ipv6_trafficclass
            l2tpv2_data_message_tunnel_id

            l2tpv2_data_message_tunnel_id
            mac_in_mac_priority

            mac_in_mac_priority
            mac_in_mac_v42_bdest_address

            mac_in_mac_v42_bdest_address
            mac_in_mac_v42_bsrc_address

            mac_in_mac_v42_bsrc_address
            mac_in_mac_v42_btag_pcp

            mac_in_mac_v42_btag_pcp
            mac_in_mac_v42_cdest_address

            mac_in_mac_v42_cdest_address
            mac_in_mac_v42_csrc_address

            mac_in_mac_v42_csrc_address
            mac_in_mac_v42_isid

            mac_in_mac_v42_isid
            mac_in_mac_v42_priority

            mac_in_mac_v42_priority
            mac_in_mac_v42_stag_pcp

            mac_in_mac_v42_stag_pcp
            mac_in_mac_v42_stag_vlan_id

            mac_in_mac_v42_stag_vlan_id
            mac_in_mac_v42_vlan_id

            mac_in_mac_v42_vlan_id
            mac_in_mac_vlan_user_priority

            mac_in_mac_vlan_user_priority
            mpls_label

            mpls_label
            mpls_mpls_exp

            mpls_mpls_exp
            mpls_flow_descriptor

            mpls_flow_descriptor
            pppoe_session_sessionid

            pppoe_session_sessionid
            raw_priority

            raw_priority
            rx_port

            rx_port
            s_vlan

            s_vlan
            source_ip

            source_ip
            srcDestEndpointPair

            srcDestEndpointPair
            src_mac

            src_mac
            tcp_tcp_dst_prt

            tcp_tcp_dst_prt
            tcp_tcp_src_prt

            tcp_tcp_src_prt
            tos

            tos
            udp_udp_dst_prt

            udp_udp_dst_prt
            udp_udp_src_prt

            udp_udp_src_prt
            vlan_vlan_user_priority

            vlan_vlan_user_priority
            DEFAULT

            endpoint_pair
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TRANSMIT_DISTRIBUTION_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TRANSMIT_DISTRIBUTION_CMD : opt})

    def traffic_config_tx_delay(self, numeric):
        """
        This is the method the command: traffic_config option tx_delay
        Description:This argument can be used to specify the delay to the start of the
            scheduled stream.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: TX_DELAY_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TX_DELAY_CMD : numeric})

    def traffic_config_tx_delay_unit(self, opt):
        """
        This is the method the command: traffic_config option tx_delay_unit
        Description:This argument can be used to specify the delay unit for tx_delay
            Valid options are:
            bytes

            bytes.
            ns

            nano seconds.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TX_DELAY_UNIT_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TX_DELAY_UNIT_CMD : opt})

    def traffic_config_tx_mode(self, opt):
        """
        This is the method the command: traffic_config option tx_mode
        Description:Configure transmit mode of traffic item on -mode create and modify. If
            this parameter is not provided, the transmit mode of the traffic item
            will be configured to match the transmit mode of the first transmitting
            port of the traffic item. The port transmit mode is configured using
            procedure ::::interface_config with parameter -transmit_mode.
            Valid options are:
            advanced

            interleaved.
            stream

            sequential.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: TX_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.TX_MODE_CMD : opt})

    def traffic_config_udf1_cascade_type(self):
        """
        This is the method the command: traffic_config option udf1_cascade_type
        Description:Indicates the source of the initial value for the counter. The initial
            value for the first enabled stream always comes from the UDF
            counter_init_value option.
            Valid options are:
            none

            The initial value always comes from UDF counter_init_value option.
            from_previous

            The initial value is derived from the last executed stream which used
            this UDF number with UDF cascade_type set to from_previous. An initial
            increment/decrement/random operation is applied from the previous value.
            from_shelf

            The initial value is derived from the last value generated by this UDF
            with this stream. An initial increment/ decrement/random operation is
            applied from the previous value.
            DEFAULT

            none
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF1_CASCADE_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_CASCADE_TYPE_CMD : ""})

    def traffic_config_udf1_chain_from(self, opt):
        """
        This is the method the command: traffic_config option udf1_chain_from
        Description:Allows the user to select what UDF the current UDF should chain from.
            When this option is employed, the UDF will stay in its initial value
            until the UDF it is chained from reaches its terminating value. If
            traffic_generator is ixnetwork_540, circuit_type must be configured to
            'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_CHAIN_FROM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_CHAIN_FROM_CMD : opt})

    def traffic_config_udf1_counter_init_value(self):
        """
        This is the method the command: traffic_config option udf1_counter_init_value
        Description:The initial value of the counter. This field is a list of hex numbers
            for range_list mode; a hex number for all other modes.If
            traffic_generator is ixnetwork_540, circuit_type must be configured to
            'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_COUNTER_INIT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_INIT_VALUE_CMD : ""})

    def traffic_config_udf1_counter_mode(self):
        """
        This is the method the command: traffic_config option udf1_counter_mode
        Description:The counter will increment or decrement the bytes continuously or a
            number of repeat counts. The choices are: continuous or count.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF1_COUNTER_MODE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_MODE_CMD : ""})

    def traffic_config_udf1_counter_repeat_count(self):
        """
        This is the method the command: traffic_config option udf1_counter_repeat_count
        Description:The counter is incremented or decremented the number of times based on
            this option. If counter_mode is continuous, then this value is
            ignored.If traffic_generator is ixnetwork_540, circuit_type must be
            configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_COUNTER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf1_counter_step(self):
        """
        This is the method the command: traffic_config option udf1_counter_step
        Description:The step size for counter up/down. If traffic_generator is
            ixnetwork_540, circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_COUNTER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_STEP_CMD : ""})

    def traffic_config_udf1_counter_type(self):
        """
        This is the method the command: traffic_config option udf1_counter_type
        Description:Describes the size of the UDF field in bits. The choices are:8 16 24 32
            If traffic_generator is ixnetwork_540, circuit_type must be configured
            to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_COUNTER_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_TYPE_CMD : ""})

    def traffic_config_udf1_counter_up_down(self):
        """
        This is the method the command: traffic_config option udf1_counter_up_down
        Description:This option describes whether the UDF counters are to be incremented or
            decremented. choices are: up, down. If traffic_generator is
            ixnetwork_540, circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_COUNTER_UP_DOWN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_COUNTER_UP_DOWN_CMD : ""})

    def traffic_config_udf1_enable_cascade(self):
        """
        This is the method the command: traffic_config option udf1_enable_cascade
        Description:If this option is set to true (1), then the UDF counter will not be
            reset with the start of each stream, but will rather continue counting
            from the ending value of the previous stream.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF1_ENABLE_CASCADE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_ENABLE_CASCADE_CMD : ""})

    def traffic_config_udf1_inner_repeat_count(self):
        """
        This is the method the command: traffic_config option udf1_inner_repeat_count
        Description:The number of times the inner loop is repeated. Used when UDF mode is
            set to nested.If traffic_generator is ixnetwork_540, circuit_type must
            be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_INNER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_INNER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf1_inner_repeat_value(self):
        """
        This is the method the command: traffic_config option udf1_inner_repeat_value
        Description:The number of times each value in the inner loop is repeated. Used when
            UDF mode is set to nested.If traffic_generator is ixnetwork_540,
            circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_INNER_REPEAT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_INNER_REPEAT_VALUE_CMD : ""})

    def traffic_config_udf1_inner_step(self):
        """
        This is the method the command: traffic_config option udf1_inner_step
        Description:The steps size between inner loop values. Used when UDF mode is set to
            nested.If traffic_generator is ixnetwork_540, circuit_type must be
            configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_INNER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_INNER_STEP_CMD : ""})

    def traffic_config_udf1_mask_select(self):
        """
        This is the method the command: traffic_config option udf1_mask_select
        Description:This is a 32-bit mask that enables, on a bit-by-bit basis, use of the
            absolute counter value bits as defined by mask_val option. To be used
            for udf1_mode random. (DEFAULT = {00 00}) If traffic_generator is
            ixnetwork_540, circuit_type must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_MASK_SELECT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_MASK_SELECT_CMD : ""})

    def traffic_config_udf1_mask_val(self):
        """
        This is the method the command: traffic_config option udf1_mask_val
        Description:A 32-bit mask of absolute values for this UDF counter. It is used in
            association with the mask_select; bits must be set 'on' or the bits in
            mask_select will be ignored. To be used for udf1_mode random. (DEFAULT =
            {00 00}) If traffic_generator is ixnetwork_540, circuit_type must be
            configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_MASK_VAL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_MASK_VAL_CMD : ""})

    def traffic_config_udf1_mode(self, opt):
        """
        This is the method the command: traffic_config option udf1_mode
        Description:The mode of operation of the counter. If traffic_generator is
            ixnetwork_540, circuit_type must be configured to 'quick_flows'. Valid
            options are:
            Valid options are:
            counter

            Normal up-down counter as controlled by counter_mode, counter_type,
            counter_init_value, mask_select, mask_val, random, counter_repeat_count,
            counter_step, counter_up_down and cascade_type options.
            random

            Generates random values, based on the values in counter_type,
            mask_select and mask_val.
            value_list

            A list of distinct values, based on the values of counter_type,
            value_list and cascade_type.
            nested

            Two nested counters may be used to build complex sequences, based on the
            values of counter_type, counter_init_value, inner_repeat_count,
            inner_repeat_value, inner_step, counter_repeat_count, counter_step, and
            cascade_type options.
            range_list

            A list of value ranges, based on counter_type, cascade_type and ranges.
            Ranges are specified with counter_init_value, counter_repeat_count, and
            counter_step.
            ipv4

            A counter which facilitates generation of IPv4 addresses, based on
            counter_init_value, counter_repeat_count, counter_type,
            inner_repeat_value, inner_step, skip_zeros_and_ones, and skip_mask_bits
            options.
            DEFAULT

            counter
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_MODE_CMD : opt})

    def traffic_config_udf1_offset(self):
        """
        This is the method the command: traffic_config option udf1_offset
        Description:The absolute offset to insert this UDF into the frame. Note that DA and
            SA use the fixed offsets at 0 and 6, respectively. This option applies
            to all UDF modes.If traffic_generator is ixnetwork_540, circuit_type
            must be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_OFFSET_CMD : ""})

    def traffic_config_udf1_skip_mask_bits(self):
        """
        This is the method the command: traffic_config option udf1_skip_mask_bits
        Description:If UDF mode is ipv4 and skip_zeros_and_ones is set to true (1), this is
            the number of low order bits to check when looking for all 0s and all
            1s. This normally corresponds to network broadcast addresses.If
            traffic_generator is ixnetwork_540, circuit_type must be configured to
            'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_SKIP_MASK_BITS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_SKIP_MASK_BITS_CMD : ""})

    def traffic_config_udf1_skip_zeros_and_ones(self):
        """
        This is the method the command: traffic_config option udf1_skip_zeros_and_ones
        Description:If UDF mode is ipv4 and this option is set to true (1), then values of
            all 0s and all 1s as masked by skip_mask_bits will be skipped when
            generating values. This normally corresponds to network broadcast
            addresses.If traffic_generator is ixnetwork_540, circuit_type must be
            configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_SKIP_ZEROS_AND_ONES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_SKIP_ZEROS_AND_ONES_CMD : ""})

    def traffic_config_udf1_value_list(self):
        """
        This is the method the command: traffic_config option udf1_value_list
        Description:A list of hex numbers which holds the values to be used when mode is set
            to value_list. If traffic_generator is ixnetwork_540, circuit_type must
            be configured to 'quick_flows'.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF1_VALUE_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF1_VALUE_LIST_CMD : ""})

    def traffic_config_udf2_cascade_type(self):
        """
        This is the method the command: traffic_config option udf2_cascade_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF2_CASCADE_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_CASCADE_TYPE_CMD : ""})

    def traffic_config_udf2_chain_from(self, opt):
        """
        This is the method the command: traffic_config option udf2_chain_from
        Description:Allows the user to select what UDF the current UDF should chain from.
            When this option is employed, the UDF will stay in its initial value
            until the UDF it is chained from reaches its terminating value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_CHAIN_FROM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_CHAIN_FROM_CMD : opt})

    def traffic_config_udf2_counter_init_value(self):
        """
        This is the method the command: traffic_config option udf2_counter_init_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_COUNTER_INIT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_INIT_VALUE_CMD : ""})

    def traffic_config_udf2_counter_mode(self):
        """
        This is the method the command: traffic_config option udf2_counter_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF2_COUNTER_MODE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_MODE_CMD : ""})

    def traffic_config_udf2_counter_repeat_count(self):
        """
        This is the method the command: traffic_config option udf2_counter_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_COUNTER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf2_counter_step(self):
        """
        This is the method the command: traffic_config option udf2_counter_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_COUNTER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_STEP_CMD : ""})

    def traffic_config_udf2_counter_type(self):
        """
        This is the method the command: traffic_config option udf2_counter_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_COUNTER_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_TYPE_CMD : ""})

    def traffic_config_udf2_counter_up_down(self):
        """
        This is the method the command: traffic_config option udf2_counter_up_down
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_COUNTER_UP_DOWN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_COUNTER_UP_DOWN_CMD : ""})

    def traffic_config_udf2_enable_cascade(self):
        """
        This is the method the command: traffic_config option udf2_enable_cascade
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF2_ENABLE_CASCADE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_ENABLE_CASCADE_CMD : ""})

    def traffic_config_udf2_inner_repeat_count(self):
        """
        This is the method the command: traffic_config option udf2_inner_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_INNER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_INNER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf2_inner_repeat_value(self):
        """
        This is the method the command: traffic_config option udf2_inner_repeat_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_INNER_REPEAT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_INNER_REPEAT_VALUE_CMD : ""})

    def traffic_config_udf2_inner_step(self):
        """
        This is the method the command: traffic_config option udf2_inner_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_INNER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_INNER_STEP_CMD : ""})

    def traffic_config_udf2_mask_select(self):
        """
        This is the method the command: traffic_config option udf2_mask_select
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_MASK_SELECT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_MASK_SELECT_CMD : ""})

    def traffic_config_udf2_mask_val(self):
        """
        This is the method the command: traffic_config option udf2_mask_val
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_MASK_VAL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_MASK_VAL_CMD : ""})

    def traffic_config_udf2_mode(self):
        """
        This is the method the command: traffic_config option udf2_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_MODE_CMD : ""})

    def traffic_config_udf2_offset(self):
        """
        This is the method the command: traffic_config option udf2_offset
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_OFFSET_CMD : ""})

    def traffic_config_udf2_skip_mask_bits(self):
        """
        This is the method the command: traffic_config option udf2_skip_mask_bits
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_SKIP_MASK_BITS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_SKIP_MASK_BITS_CMD : ""})

    def traffic_config_udf2_skip_zeros_and_ones(self):
        """
        This is the method the command: traffic_config option udf2_skip_zeros_and_ones
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_SKIP_ZEROS_AND_ONES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_SKIP_ZEROS_AND_ONES_CMD : ""})

    def traffic_config_udf2_value_list(self):
        """
        This is the method the command: traffic_config option udf2_value_list
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF2_VALUE_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF2_VALUE_LIST_CMD : ""})

    def traffic_config_udf3_cascade_type(self):
        """
        This is the method the command: traffic_config option udf3_cascade_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF3_CASCADE_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_CASCADE_TYPE_CMD : ""})

    def traffic_config_udf3_chain_from(self, opt):
        """
        This is the method the command: traffic_config option udf3_chain_from
        Description:Allows the user to select what UDF the current UDF should chain from.
            When this option is employed, the UDF will stay in its initial value
            until the UDF it is chained from reaches its terminating value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_CHAIN_FROM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_CHAIN_FROM_CMD : opt})

    def traffic_config_udf3_counter_init_value(self):
        """
        This is the method the command: traffic_config option udf3_counter_init_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_COUNTER_INIT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_INIT_VALUE_CMD : ""})

    def traffic_config_udf3_counter_mode(self):
        """
        This is the method the command: traffic_config option udf3_counter_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF3_COUNTER_MODE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_MODE_CMD : ""})

    def traffic_config_udf3_counter_repeat_count(self):
        """
        This is the method the command: traffic_config option udf3_counter_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_COUNTER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf3_counter_step(self):
        """
        This is the method the command: traffic_config option udf3_counter_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_COUNTER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_STEP_CMD : ""})

    def traffic_config_udf3_counter_type(self):
        """
        This is the method the command: traffic_config option udf3_counter_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_COUNTER_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_TYPE_CMD : ""})

    def traffic_config_udf3_counter_up_down(self):
        """
        This is the method the command: traffic_config option udf3_counter_up_down
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_COUNTER_UP_DOWN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_COUNTER_UP_DOWN_CMD : ""})

    def traffic_config_udf3_enable_cascade(self):
        """
        This is the method the command: traffic_config option udf3_enable_cascade
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF3_ENABLE_CASCADE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_ENABLE_CASCADE_CMD : ""})

    def traffic_config_udf3_inner_repeat_count(self):
        """
        This is the method the command: traffic_config option udf3_inner_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_INNER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_INNER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf3_inner_repeat_value(self):
        """
        This is the method the command: traffic_config option udf3_inner_repeat_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_INNER_REPEAT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_INNER_REPEAT_VALUE_CMD : ""})

    def traffic_config_udf3_inner_step(self):
        """
        This is the method the command: traffic_config option udf3_inner_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_INNER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_INNER_STEP_CMD : ""})

    def traffic_config_udf3_mask_select(self):
        """
        This is the method the command: traffic_config option udf3_mask_select
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_MASK_SELECT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_MASK_SELECT_CMD : ""})

    def traffic_config_udf3_mask_val(self):
        """
        This is the method the command: traffic_config option udf3_mask_val
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_MASK_VAL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_MASK_VAL_CMD : ""})

    def traffic_config_udf3_mode(self):
        """
        This is the method the command: traffic_config option udf3_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_MODE_CMD : ""})

    def traffic_config_udf3_offset(self):
        """
        This is the method the command: traffic_config option udf3_offset
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_OFFSET_CMD : ""})

    def traffic_config_udf3_skip_mask_bits(self):
        """
        This is the method the command: traffic_config option udf3_skip_mask_bits
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_SKIP_MASK_BITS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_SKIP_MASK_BITS_CMD : ""})

    def traffic_config_udf3_skip_zeros_and_ones(self):
        """
        This is the method the command: traffic_config option udf3_skip_zeros_and_ones
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_SKIP_ZEROS_AND_ONES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_SKIP_ZEROS_AND_ONES_CMD : ""})

    def traffic_config_udf3_value_list(self):
        """
        This is the method the command: traffic_config option udf3_value_list
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF3_VALUE_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF3_VALUE_LIST_CMD : ""})

    def traffic_config_udf4_cascade_type(self):
        """
        This is the method the command: traffic_config option udf4_cascade_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF4_CASCADE_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_CASCADE_TYPE_CMD : ""})

    def traffic_config_udf4_chain_from(self, opt):
        """
        This is the method the command: traffic_config option udf4_chain_from
        Description:Allows the user to select what UDF the current UDF should chain from.
            When this option is employed, the UDF will stay in its initial value
            until the UDF it is chained from reaches its terminating value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_CHAIN_FROM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_CHAIN_FROM_CMD : opt})

    def traffic_config_udf4_counter_init_value(self):
        """
        This is the method the command: traffic_config option udf4_counter_init_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_COUNTER_INIT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_INIT_VALUE_CMD : ""})

    def traffic_config_udf4_counter_mode(self):
        """
        This is the method the command: traffic_config option udf4_counter_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF4_COUNTER_MODE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_MODE_CMD : ""})

    def traffic_config_udf4_counter_repeat_count(self):
        """
        This is the method the command: traffic_config option udf4_counter_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_COUNTER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf4_counter_step(self):
        """
        This is the method the command: traffic_config option udf4_counter_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_COUNTER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_STEP_CMD : ""})

    def traffic_config_udf4_counter_type(self):
        """
        This is the method the command: traffic_config option udf4_counter_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_COUNTER_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_TYPE_CMD : ""})

    def traffic_config_udf4_counter_up_down(self):
        """
        This is the method the command: traffic_config option udf4_counter_up_down
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_COUNTER_UP_DOWN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_COUNTER_UP_DOWN_CMD : ""})

    def traffic_config_udf4_enable_cascade(self):
        """
        This is the method the command: traffic_config option udf4_enable_cascade
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF4_ENABLE_CASCADE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_ENABLE_CASCADE_CMD : ""})

    def traffic_config_udf4_inner_repeat_count(self):
        """
        This is the method the command: traffic_config option udf4_inner_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_INNER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_INNER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf4_inner_repeat_value(self):
        """
        This is the method the command: traffic_config option udf4_inner_repeat_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_INNER_REPEAT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_INNER_REPEAT_VALUE_CMD : ""})

    def traffic_config_udf4_inner_step(self):
        """
        This is the method the command: traffic_config option udf4_inner_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_INNER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_INNER_STEP_CMD : ""})

    def traffic_config_udf4_mask_select(self):
        """
        This is the method the command: traffic_config option udf4_mask_select
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_MASK_SELECT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_MASK_SELECT_CMD : ""})

    def traffic_config_udf4_mask_val(self):
        """
        This is the method the command: traffic_config option udf4_mask_val
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_MASK_VAL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_MASK_VAL_CMD : ""})

    def traffic_config_udf4_mode(self):
        """
        This is the method the command: traffic_config option udf4_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_MODE_CMD : ""})

    def traffic_config_udf4_offset(self):
        """
        This is the method the command: traffic_config option udf4_offset
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_OFFSET_CMD : ""})

    def traffic_config_udf4_skip_mask_bits(self):
        """
        This is the method the command: traffic_config option udf4_skip_mask_bits
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_SKIP_MASK_BITS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_SKIP_MASK_BITS_CMD : ""})

    def traffic_config_udf4_skip_zeros_and_ones(self):
        """
        This is the method the command: traffic_config option udf4_skip_zeros_and_ones
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_SKIP_ZEROS_AND_ONES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_SKIP_ZEROS_AND_ONES_CMD : ""})

    def traffic_config_udf4_value_list(self):
        """
        This is the method the command: traffic_config option udf4_value_list
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF4_VALUE_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF4_VALUE_LIST_CMD : ""})

    def traffic_config_udf5_cascade_type(self):
        """
        This is the method the command: traffic_config option udf5_cascade_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF5_CASCADE_TYPE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_CASCADE_TYPE_CMD : ""})

    def traffic_config_udf5_chain_from(self, opt):
        """
        This is the method the command: traffic_config option udf5_chain_from
        Description:Allows the user to select what UDF the current UDF should chain from.
            When this option is employed, the UDF will stay in its initial value
            until the UDF it is chained from reaches its terminating value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_CHAIN_FROM_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_CHAIN_FROM_CMD : opt})

    def traffic_config_udf5_counter_init_value(self):
        """
        This is the method the command: traffic_config option udf5_counter_init_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_COUNTER_INIT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_INIT_VALUE_CMD : ""})

    def traffic_config_udf5_counter_mode(self):
        """
        This is the method the command: traffic_config option udf5_counter_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF5_COUNTER_MODE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_MODE_CMD : ""})

    def traffic_config_udf5_counter_repeat_count(self):
        """
        This is the method the command: traffic_config option udf5_counter_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_COUNTER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf5_counter_step(self):
        """
        This is the method the command: traffic_config option udf5_counter_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_COUNTER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_STEP_CMD : ""})

    def traffic_config_udf5_counter_type(self):
        """
        This is the method the command: traffic_config option udf5_counter_type
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_COUNTER_TYPE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_TYPE_CMD : ""})

    def traffic_config_udf5_counter_up_down(self):
        """
        This is the method the command: traffic_config option udf5_counter_up_down
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_COUNTER_UP_DOWN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_COUNTER_UP_DOWN_CMD : ""})

    def traffic_config_udf5_enable_cascade(self):
        """
        This is the method the command: traffic_config option udf5_enable_cascade
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos' |
        Constants Available: UDF5_ENABLE_CASCADE_CMD
        Supported:IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_ENABLE_CASCADE_CMD : ""})

    def traffic_config_udf5_inner_repeat_count(self):
        """
        This is the method the command: traffic_config option udf5_inner_repeat_count
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_INNER_REPEAT_COUNT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_INNER_REPEAT_COUNT_CMD : ""})

    def traffic_config_udf5_inner_repeat_value(self):
        """
        This is the method the command: traffic_config option udf5_inner_repeat_value
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_INNER_REPEAT_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_INNER_REPEAT_VALUE_CMD : ""})

    def traffic_config_udf5_inner_step(self):
        """
        This is the method the command: traffic_config option udf5_inner_step
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_INNER_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_INNER_STEP_CMD : ""})

    def traffic_config_udf5_mask_select(self):
        """
        This is the method the command: traffic_config option udf5_mask_select
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_MASK_SELECT_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_MASK_SELECT_CMD : ""})

    def traffic_config_udf5_mask_val(self):
        """
        This is the method the command: traffic_config option udf5_mask_val
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_MASK_VAL_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_MASK_VAL_CMD : ""})

    def traffic_config_udf5_mode(self):
        """
        This is the method the command: traffic_config option udf5_mode
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_MODE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_MODE_CMD : ""})

    def traffic_config_udf5_offset(self):
        """
        This is the method the command: traffic_config option udf5_offset
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_OFFSET_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_OFFSET_CMD : ""})

    def traffic_config_udf5_skip_mask_bits(self):
        """
        This is the method the command: traffic_config option udf5_skip_mask_bits
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_SKIP_MASK_BITS_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_SKIP_MASK_BITS_CMD : ""})

    def traffic_config_udf5_skip_zeros_and_ones(self):
        """
        This is the method the command: traffic_config option udf5_skip_zeros_and_ones
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_SKIP_ZEROS_AND_ONES_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_SKIP_ZEROS_AND_ONES_CMD : ""})

    def traffic_config_udf5_value_list(self):
        """
        This is the method the command: traffic_config option udf5_value_list
        Description:See description for this item same as udf1
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDF5_VALUE_LIST_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDF5_VALUE_LIST_CMD : ""})

    def traffic_config_udp_checksum_value(self, hexhex):
        """
        This is the method the command: traffic_config option udp_checksum_value
        Description:Value to be set for UDP checksum if '-udp_checksum 0' is specified.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: UDP_CHECKSUM_VALUE_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        hexhex --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_CHECKSUM_VALUE_CMD : hexhex})

    def traffic_config_udp_checksum_value_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option udp_checksum_value_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by udp_checksum_value
            1

            enable tracking by udp_checksum_value
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_CHECKSUM_VALUE_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_CHECKSUM_VALUE_TRACKING_CMD : bool_opt})

    def traffic_config_udp_dst_port_count(self, numeric):
        """
        This is the method the command: traffic_config option udp_dst_port_count
        Description:Numeric value which configures the number of times the udp_dst_port is
            incremeneted or decremented when udp_dst_port_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_DST_PORT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_DST_PORT_COUNT_CMD : numeric})

    def traffic_config_udp_dst_port_mode(self, opt):
        """
        This is the method the command: traffic_config option udp_dst_port_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with udp_dst_port_step and
            udp_dst_port_count.
            decr

            the value is decremented as specified with udp_dst_port_step and
            udp_dst_port_count.
            list

            Parameter -udp_dst_port contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_DST_PORT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_DST_PORT_MODE_CMD : opt})

    def traffic_config_udp_dst_port_step(self, range):
        """
        This is the method the command: traffic_config option udp_dst_port_step
        Description:Step value used to modify udp_dst_port when udp_dst_port_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_DST_PORT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_DST_PORT_STEP_CMD : range})

    def traffic_config_udp_dst_port_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option udp_dst_port_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by udp_dst_port
            1

            enable tracking by udp_dst_port
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_DST_PORT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_DST_PORT_TRACKING_CMD : bool_opt})

    def traffic_config_udp_length(self, range):
        """
        This is the method the command: traffic_config option udp_length
        Description:Valid only for traffic_generator ixnetwork_540 and when -l4_protocol is
            udp. Configure the Length field of the UDP header.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_LENGTH_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_LENGTH_CMD : range})

    def traffic_config_udp_length_count(self, numeric):
        """
        This is the method the command: traffic_config option udp_length_count
        Description:Numeric value which configures the number of times the udp_length is
            incremeneted or decremented when udp_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_LENGTH_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_LENGTH_COUNT_CMD : numeric})

    def traffic_config_udp_length_mode(self, opt):
        """
        This is the method the command: traffic_config option udp_length_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with udp_length_step and
            udp_length_count.
            decr

            the value is decremented as specified with udp_length_step and
            udp_length_count.
            list

            Parameter -udp_length contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_LENGTH_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_LENGTH_MODE_CMD : opt})

    def traffic_config_udp_length_step(self, range):
        """
        This is the method the command: traffic_config option udp_length_step
        Description:Step value used to modify udp_length when udp_length_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_LENGTH_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_LENGTH_STEP_CMD : range})

    def traffic_config_udp_length_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option udp_length_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by udp_length
            1

            enable tracking by udp_length
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_LENGTH_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_LENGTH_TRACKING_CMD : bool_opt})

    def traffic_config_udp_src_port_count(self, numeric):
        """
        This is the method the command: traffic_config option udp_src_port_count
        Description:Numeric value which configures the number of times the udp_src_port is
            incremeneted or decremented when udp_src_port_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_SRC_PORT_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_SRC_PORT_COUNT_CMD : numeric})

    def traffic_config_udp_src_port_mode(self, opt):
        """
        This is the method the command: traffic_config option udp_src_port_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with udp_src_port_step and
            udp_src_port_count.
            decr

            the value is decremented as specified with udp_src_port_step and
            udp_src_port_count.
            list

            Parameter -udp_src_port contains a list of values. Each packet will use
            one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_SRC_PORT_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_SRC_PORT_MODE_CMD : opt})

    def traffic_config_udp_src_port_step(self, range):
        """
        This is the method the command: traffic_config option udp_src_port_step
        Description:Step value used to modify udp_src_port when udp_src_port_mode is incr or
            decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_SRC_PORT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_SRC_PORT_STEP_CMD : range})

    def traffic_config_udp_src_port_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option udp_src_port_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by udp_src_port
            1

            enable tracking by udp_src_port
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: UDP_SRC_PORT_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.UDP_SRC_PORT_TRACKING_CMD : bool_opt})

    def traffic_config_use_all_ip_subnets(self, bool_opt):
        """
        This is the method the command: traffic_config option use_all_ip_subnets
        Description:This argument can be used to enable the use of all advertised subnets
            will be used to simulate application traffic when the profile objective
            is rate-based, -enable_test_objective argument must be set to 1 in order
            for the value of this argument to be used.Valid only for
            traffic_generator ixnetwork, mode create/modify, circuit_endpoint_type
            ipv4_application_traffic or ipv6_application_traffic.
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: USE_ALL_IP_SUBNETS_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.USE_ALL_IP_SUBNETS_CMD : bool_opt})

    def traffic_config_use_cp_rate(self, bool_opt):
        """
        This is the method the command: traffic_config option use_cp_rate
        Description:If enabled, the traffic item will use control plane's rate (if available).
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: USE_CP_RATE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.USE_CP_RATE_CMD : bool_opt})

    def traffic_config_use_cp_size(self, bool_opt):
        """
        This is the method the command: traffic_config option use_cp_size
        Description:If enabled, the traffic item will use control plane's size (if available).
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: USE_CP_SIZE_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.USE_CP_SIZE_CMD : bool_opt})

    def traffic_config_vci_increment(self):
        """
        This is the method the command: traffic_config option vci_increment
        Description:This option is used to specify the VCI increment of the first ATM static
            endpoint range. It can take any value in the 0-4294967295 range. Valid
            only for traffic_generator ixnetwork when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: VCI_INCREMENT_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VCI_INCREMENT_CMD : ""})

    def traffic_config_vci_increment_step(self):
        """
        This is the method the command: traffic_config option vci_increment_step
        Description:This option is used to specify the step between the VCI increment of
            each ATM static endpoint range. It can take any numeric value.Valid only
            for traffic_generator ixnetwork when configuring L2VPN traffic.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork' |
        Constants Available: VCI_INCREMENT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VCI_INCREMENT_STEP_CMD : ""})

    def traffic_config_vlan(self, opt):
        """
        This is the method the command: traffic_config option vlan
        Description:This option will enable/disable VLAN and stacked VLAN (QinQ)on the
            interface to be configured. If vlan is disable and vlan_id or other vlan
            options are provided then these options will be ignored.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: VLAN_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_CMD : opt})

    def traffic_config_vlan_cfi_count(self, numeric):
        """
        This is the method the command: traffic_config option vlan_cfi_count
        Description:Numeric value which configures the number of times the vlan_cfi is
            incremeneted or decremented when vlan_cfi_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_CFI_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_CFI_COUNT_CMD : numeric})

    def traffic_config_vlan_cfi_mode(self, opt):
        """
        This is the method the command: traffic_config option vlan_cfi_mode
        Description:This parameter configures
            Valid options are:
            Not defined
            incr

            the value is incremented as specified with vlan_cfi_step and vlan_cfi_count.
            decr

            the value is decremented as specified with vlan_cfi_step and vlan_cfi_count.
            list

            Parameter -vlan_cfi contains a list of values. Each packet will use one
            of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_CFI_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_CFI_MODE_CMD : opt})

    def traffic_config_vlan_cfi_step(self, bool_opt):
        """
        This is the method the command: traffic_config option vlan_cfi_step
        Description:Step value used to modify vlan_cfi when vlan_cfi_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_CFI_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_CFI_STEP_CMD : bool_opt})

    def traffic_config_vlan_cfi_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option vlan_cfi_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by vlan_cfi
            1

            enable tracking by vlan_cfi
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_CFI_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_CFI_TRACKING_CMD : bool_opt})

    def traffic_config_vlan_enable(self):
        """
        This is the method the command: traffic_config option vlan_enable
        Description:This option is used to specify whether the VLAN id will be configured
            for the LAN static endpoint range.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: VLAN_ENABLE_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_ENABLE_CMD : ""})

    def traffic_config_vlan_id_step(self, numeric):
        """
        This is the method the command: traffic_config option vlan_id_step
        Description:The step value for a VLAN ID when the mode is increment or decrement For
            stacked VLAN (QinQ) this parameter will be provided as a list of values,
            each of them representing the step value for each VLAN ID from the
            stack.Example: {2 4 6 1}. For traffic_generator ixnetwork is used only
            for L2VPN traffic, but is not supported in this release.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork ixnetwork_540' |
        Constants Available: VLAN_ID_STEP_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_ID_STEP_CMD : numeric})

    def traffic_config_vlan_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option vlan_id_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by vlan_id
            1

            enable tracking by vlan_id
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_ID_TRACKING_CMD : bool_opt})

    def traffic_config_vlan_protocol_tag_id(self, any):
        """
        This is the method the command: traffic_config option vlan_protocol_tag_id
        Description:The protocol ID field of the VLAN tag. It can be any 4 digit hex number.
            Example: 8100, 9100, 9200. For stacked VLAN (QinQ) this parameter will
            be provided as a list of values, each of them representing the protocol
            ID field of the VLAN tagExample: {8100 9100 9200 9100}Valid only for
            traffic_generator ixos and ixnetwork_540.When configuring traffic over
            PPP sessions this parameter is considered to be the VLAN protocol tag ID
            for the downstream (the traffic from network port to access port).
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixos ixnetwork_540' |
        Constants Available: VLAN_PROTOCOL_TAG_ID_CMD
        Supported:IxNetwork, IxOS/IxNetwork-FT
        Keyword arguments:
        any --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_CMD : any})

    def traffic_config_vlan_protocol_tag_id_count(self, numeric):
        """
        This is the method the command: traffic_config option vlan_protocol_tag_id_count
        Description:Numeric value which configures the number of times the
            vlan_protocol_tag_id is incremeneted or decremented when
            vlan_protocol_tag_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_PROTOCOL_TAG_ID_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_COUNT_CMD : numeric})

    def traffic_config_vlan_protocol_tag_id_mode(self, opt):
        """
        This is the method the command: traffic_config option vlan_protocol_tag_id_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with vlan_protocol_tag_id_step and
            vlan_protocol_tag_id_count.
            decr

            the value is decremented as specified with vlan_protocol_tag_id_step and
            vlan_protocol_tag_id_count.
            list

            Parameter -vlan_protocol_tag_id contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_PROTOCOL_TAG_ID_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_MODE_CMD : opt})

    def traffic_config_vlan_protocol_tag_id_step(self, hexdefault0x01):
        """
        This is the method the command: traffic_config option vlan_protocol_tag_id_step
        Description:Hex step value used to modify vlan_protocol_tag_id when
            vlan_protocol_tag_id_mode is incr or decr.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_PROTOCOL_TAG_ID_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        hexdefault0x01 --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_STEP_CMD : hexdefault0x01})

    def traffic_config_vlan_protocol_tag_id_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option vlan_protocol_tag_id_tracking
        Description:Not defined
            Valid options are:
            Not defined
            1

            enable tracking by vlan_protocol_tag_id
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_PROTOCOL_TAG_ID_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_TRACKING_CMD : bool_opt})

    def traffic_config_vlan_user_priority_count(self, numeric):
        """
        This is the method the command: traffic_config option vlan_user_priority_count
        Description:Numeric value which configures the number of times the
            vlan_user_priority is incremeneted or decremented when
            vlan_user_priority_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_USER_PRIORITY_COUNT_CMD
        Supported:IxNetwork
        Keyword arguments:
        numeric --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_USER_PRIORITY_COUNT_CMD : numeric})

    def traffic_config_vlan_user_priority_mode(self, opt):
        """
        This is the method the command: traffic_config option vlan_user_priority_mode
        Description:This parameter configures
            Valid options are:
            fixed

            the value is left unchanged for all packets.
            incr

            the value is incremented as specified with vlan_user_priority_step and
            vlan_user_priority_count.
            decr

            the value is decremented as specified with vlan_user_priority_step and
            vlan_user_priority_count.
            list

            Parameter -vlan_user_priority contains a list of values. Each packet
            will use one of the values from the list.
            DEFAULT

            fixed
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_USER_PRIORITY_MODE_CMD
        Supported:IxNetwork
        Keyword arguments:
        opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_USER_PRIORITY_MODE_CMD : opt})

    def traffic_config_vlan_user_priority_step(self, range):
        """
        This is the method the command: traffic_config option vlan_user_priority_step
        Description:Step value used to modify vlan_user_priority when
            vlan_user_priority_mode is incr or decr.
            DEFAULT

            1
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_USER_PRIORITY_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        range --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_USER_PRIORITY_STEP_CMD : range})

    def traffic_config_vlan_user_priority_tracking(self, bool_opt):
        """
        This is the method the command: traffic_config option vlan_user_priority_tracking
        Description:Not defined
            Valid options are:
            0

            disable tracking by vlan_user_priority
            1

            enable tracking by vlan_user_priority
            DEFAULT

            0
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork_540' |
        Constants Available: VLAN_USER_PRIORITY_TRACKING_CMD
        Supported:IxNetwork
        Keyword arguments:
        bool_opt --
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VLAN_USER_PRIORITY_TRACKING_CMD : bool_opt})

    def traffic_config_vpi_increment(self):
        """
        This is the method the command: traffic_config option vpi_increment
        Description:This option is used to specify the VPI increment of the first ATM static
            endpoint range. It can take any value in the 0-4294967295 range.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: VPI_INCREMENT_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VPI_INCREMENT_CMD : ""})

    def traffic_config_vpi_increment_step(self):
        """
        This is the method the command: traffic_config option vpi_increment_step
        Description:This option is used to specify the step between the VPI increment of
            each ATM static endpoint range. It can take any numeric value.
            DEFAULT
                None
            DEPENDENCIES

            Valid in combination with parameter(s)
            'traffic_generator' | value= 'ixnetwork ixnetwork_540' |
        Constants Available: VPI_INCREMENT_STEP_CMD
        Supported:IxNetwork
        Keyword arguments:
        return -- pass/fail
        """
        return self.traffic_config({TrafficConfigConstants.VPI_INCREMENT_STEP_CMD : ""})


    supportedIxiaHltapiCommands = {TrafficConfigConstants.ADJUST_RATE_CMD, TrafficConfigConstants.ALLOW_SELF_DESTINED_CMD, TrafficConfigConstants.APP_PROFILE_TYPE_CMD, TrafficConfigConstants.ARP_DST_HW_ADDR_CMD, TrafficConfigConstants.ARP_DST_HW_COUNT_CMD, TrafficConfigConstants.ARP_DST_HW_MODE_CMD, TrafficConfigConstants.ARP_DST_HW_STEP_CMD, TrafficConfigConstants.ARP_DST_HW_TRACKING_CMD, TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_CMD, TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_COUNT_CMD, TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_MODE_CMD, TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_STEP_CMD, TrafficConfigConstants.ARP_HW_ADDRESS_LENGTH_TRACKING_CMD, TrafficConfigConstants.ARP_HW_TYPE_CMD, TrafficConfigConstants.ARP_HW_TYPE_COUNT_CMD, TrafficConfigConstants.ARP_HW_TYPE_MODE_CMD, TrafficConfigConstants.ARP_HW_TYPE_STEP_CMD, TrafficConfigConstants.ARP_HW_TYPE_TRACKING_CMD, TrafficConfigConstants.ARP_OPERATION_CMD, TrafficConfigConstants.ARP_OPERATION_MODE_CMD, TrafficConfigConstants.ARP_OPERATION_TRACKING_CMD, TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_CMD, TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_COUNT_CMD, TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_MODE_CMD, TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_STEP_CMD, TrafficConfigConstants.ARP_PROTOCOL_ADDR_LENGTH_TRACKING_CMD, TrafficConfigConstants.ARP_PROTOCOL_TYPE_CMD, TrafficConfigConstants.ARP_PROTOCOL_TYPE_COUNT_CMD, TrafficConfigConstants.ARP_PROTOCOL_TYPE_MODE_CMD, TrafficConfigConstants.ARP_PROTOCOL_TYPE_STEP_CMD, TrafficConfigConstants.ARP_PROTOCOL_TYPE_TRACKING_CMD, TrafficConfigConstants.ARP_SRC_HW_ADDR_CMD, TrafficConfigConstants.ARP_SRC_HW_COUNT_CMD, TrafficConfigConstants.ARP_SRC_HW_MODE_CMD, TrafficConfigConstants.ARP_SRC_HW_STEP_CMD, TrafficConfigConstants.ARP_SRC_HW_TRACKING_CMD, TrafficConfigConstants.ATM_COUNTER_VCI_DATA_ITEM_LIST_CMD, TrafficConfigConstants.ATM_COUNTER_VCI_MASK_SELECT_CMD, TrafficConfigConstants.ATM_COUNTER_VCI_MASK_VALUE_CMD, TrafficConfigConstants.ATM_COUNTER_VCI_MODE_CMD, TrafficConfigConstants.ATM_COUNTER_VCI_TYPE_CMD, TrafficConfigConstants.ATM_COUNTER_VPI_DATA_ITEM_LIST_CMD, TrafficConfigConstants.ATM_COUNTER_VPI_MASK_SELECT_CMD, TrafficConfigConstants.ATM_COUNTER_VPI_MASK_VALUE_CMD, TrafficConfigConstants.ATM_COUNTER_VPI_MODE_CMD, TrafficConfigConstants.ATM_COUNTER_VPI_TYPE_CMD, TrafficConfigConstants.ATM_HEADER_AAL5ERROR_CMD, TrafficConfigConstants.ATM_HEADER_CELL_LOSS_PRIORITY_CMD, TrafficConfigConstants.ATM_HEADER_CPCS_LENGTH_CMD, TrafficConfigConstants.ATM_HEADER_ENABLE_AUTO_VPI_VCI_CMD, TrafficConfigConstants.ATM_HEADER_ENABLE_CL_CMD, TrafficConfigConstants.ATM_HEADER_ENABLE_CPCS_LENGTH_CMD, TrafficConfigConstants.ATM_HEADER_ENCAPSULATION_CMD, TrafficConfigConstants.ATM_HEADER_GENERIC_FLOW_CTRL_CMD, TrafficConfigConstants.ATM_HEADER_HEC_ERRORS_CMD, TrafficConfigConstants.ATM_RANGE_COUNT_CMD, TrafficConfigConstants.BECN_CMD, TrafficConfigConstants.BIDIRECTIONAL_CMD, TrafficConfigConstants.BURST_LOOP_COUNT_CMD, TrafficConfigConstants.CIRCUIT_ENDPOINT_TYPE_CMD, TrafficConfigConstants.CIRCUIT_TYPE_CMD, TrafficConfigConstants.COMMAND_RESPONSE_CMD, TrafficConfigConstants.CONVERT_TO_RAW_CMD, TrafficConfigConstants.CSRC_LIST_CMD, TrafficConfigConstants.CUSTOM_OFFSET_CMD, TrafficConfigConstants.CUSTOM_VALUES_CMD, TrafficConfigConstants.DATA_PATTERN_CMD, TrafficConfigConstants.DATA_PATTERN_MODE_CMD, TrafficConfigConstants.DATA_TOS_CMD, TrafficConfigConstants.DATA_TOS_COUNT_CMD, TrafficConfigConstants.DATA_TOS_MODE_CMD, TrafficConfigConstants.DATA_TOS_STEP_CMD, TrafficConfigConstants.DATA_TOS_TRACKING_CMD, TrafficConfigConstants.DESTINATION_FILTER_CMD, TrafficConfigConstants.DHCP_BOOT_FILENAME_CMD, TrafficConfigConstants.DHCP_BOOT_FILENAME_TRACKING_CMD, TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_CMD, TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_COUNT_CMD, TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_MODE_CMD, TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_STEP_CMD, TrafficConfigConstants.DHCP_CLIENT_HW_ADDR_TRACKING_CMD, TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_CMD, TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_COUNT_CMD, TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_MODE_CMD, TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_STEP_CMD, TrafficConfigConstants.DHCP_CLIENT_IP_ADDR_TRACKING_CMD, TrafficConfigConstants.DHCP_FLAGS_CMD, TrafficConfigConstants.DHCP_FLAGS_MODE_CMD, TrafficConfigConstants.DHCP_FLAGS_TRACKING_CMD, TrafficConfigConstants.DHCP_HOPS_CMD, TrafficConfigConstants.DHCP_HOPS_COUNT_CMD, TrafficConfigConstants.DHCP_HOPS_MODE_CMD, TrafficConfigConstants.DHCP_HOPS_STEP_CMD, TrafficConfigConstants.DHCP_HOPS_TRACKING_CMD, TrafficConfigConstants.DHCP_HW_LEN_CMD, TrafficConfigConstants.DHCP_HW_LEN_COUNT_CMD, TrafficConfigConstants.DHCP_HW_LEN_MODE_CMD, TrafficConfigConstants.DHCP_HW_LEN_STEP_CMD, TrafficConfigConstants.DHCP_HW_LEN_TRACKING_CMD, TrafficConfigConstants.DHCP_HW_TYPE_CMD, TrafficConfigConstants.DHCP_HW_TYPE_COUNT_CMD, TrafficConfigConstants.DHCP_HW_TYPE_MODE_CMD, TrafficConfigConstants.DHCP_HW_TYPE_STEP_CMD, TrafficConfigConstants.DHCP_HW_TYPE_TRACKING_CMD, TrafficConfigConstants.DHCP_MAGIC_COOKIE_CMD, TrafficConfigConstants.DHCP_MAGIC_COOKIE_COUNT_CMD, TrafficConfigConstants.DHCP_MAGIC_COOKIE_MODE_CMD, TrafficConfigConstants.DHCP_MAGIC_COOKIE_STEP_CMD, TrafficConfigConstants.DHCP_MAGIC_COOKIE_TRACKING_CMD, TrafficConfigConstants.DHCP_OPERATION_CODE_CMD, TrafficConfigConstants.DHCP_OPERATION_CODE_MODE_CMD, TrafficConfigConstants.DHCP_OPERATION_CODE_TRACKING_CMD, TrafficConfigConstants.DHCP_OPTION_CMD, TrafficConfigConstants.DHCP_OPTION_DATA_CMD, TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_CMD, TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_COUNT_CMD, TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_MODE_CMD, TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_STEP_CMD, TrafficConfigConstants.DHCP_RELAY_AGENT_IP_ADDR_TRACKING_CMD, TrafficConfigConstants.DHCP_SECONDS_CMD, TrafficConfigConstants.DHCP_SECONDS_COUNT_CMD, TrafficConfigConstants.DHCP_SECONDS_MODE_CMD, TrafficConfigConstants.DHCP_SECONDS_STEP_CMD, TrafficConfigConstants.DHCP_SECONDS_TRACKING_CMD, TrafficConfigConstants.DHCP_SERVER_HOST_NAME_CMD, TrafficConfigConstants.DHCP_SERVER_HOST_NAME_TRACKING_CMD, TrafficConfigConstants.DHCP_SERVER_IP_ADDR_CMD, TrafficConfigConstants.DHCP_SERVER_IP_ADDR_COUNT_CMD, TrafficConfigConstants.DHCP_SERVER_IP_ADDR_MODE_CMD, TrafficConfigConstants.DHCP_SERVER_IP_ADDR_STEP_CMD, TrafficConfigConstants.DHCP_SERVER_IP_ADDR_TRACKING_CMD, TrafficConfigConstants.DHCP_TRANSACTION_ID_CMD, TrafficConfigConstants.DHCP_TRANSACTION_ID_COUNT_CMD, TrafficConfigConstants.DHCP_TRANSACTION_ID_MODE_CMD, TrafficConfigConstants.DHCP_TRANSACTION_ID_STEP_CMD, TrafficConfigConstants.DHCP_TRANSACTION_ID_TRACKING_CMD, TrafficConfigConstants.DHCP_YOUR_IP_ADDR_CMD, TrafficConfigConstants.DHCP_YOUR_IP_ADDR_COUNT_CMD, TrafficConfigConstants.DHCP_YOUR_IP_ADDR_MODE_CMD, TrafficConfigConstants.DHCP_YOUR_IP_ADDR_STEP_CMD, TrafficConfigConstants.DHCP_YOUR_IP_ADDR_TRACKING_CMD, TrafficConfigConstants.DISCARD_ELIGIBLE_CMD, TrafficConfigConstants.DLCI_CORE_ENABLE_CMD, TrafficConfigConstants.DLCI_CORE_VALUE_CMD, TrafficConfigConstants.DLCI_COUNT_MODE_CMD, TrafficConfigConstants.DLCI_EXTENDED_ADDRESS0_CMD, TrafficConfigConstants.DLCI_EXTENDED_ADDRESS1_CMD, TrafficConfigConstants.DLCI_EXTENDED_ADDRESS2_CMD, TrafficConfigConstants.DLCI_EXTENDED_ADDRESS3_CMD, TrafficConfigConstants.DLCI_MASK_SELECT_CMD, TrafficConfigConstants.DLCI_MASK_VALUE_CMD, TrafficConfigConstants.DLCI_REPEAT_COUNT_CMD, TrafficConfigConstants.DLCI_REPEAT_COUNT_STEP_CMD, TrafficConfigConstants.DLCI_SIZE_CMD, TrafficConfigConstants.DLCI_VALUE_CMD, TrafficConfigConstants.DLCI_VALUE_STEP_CMD, TrafficConfigConstants.DURATION_CMD, TrafficConfigConstants.DYNAMIC_UPDATE_FIELDS_CMD, TrafficConfigConstants.EGRESS_CUSTOM_FIELD_OFFSET_CMD, TrafficConfigConstants.EGRESS_CUSTOM_OFFSET_CMD, TrafficConfigConstants.EGRESS_CUSTOM_WIDTH_CMD, TrafficConfigConstants.EGRESS_TRACKING_CMD, TrafficConfigConstants.EGRESS_TRACKING_ENCAP_CMD, TrafficConfigConstants.EMULATION_DST_HANDLE_CMD, TrafficConfigConstants.EMULATION_DST_VLAN_PROTOCOL_TAG_ID_CMD, TrafficConfigConstants.EMULATION_MULTICAST_DST_HANDLE_CMD, TrafficConfigConstants.EMULATION_MULTICAST_DST_HANDLE_TYPE_CMD, TrafficConfigConstants.EMULATION_MULTICAST_RCVR_HANDLE_CMD, TrafficConfigConstants.EMULATION_MULTICAST_RCVR_HOST_INDEX_CMD, TrafficConfigConstants.EMULATION_MULTICAST_RCVR_MCAST_INDEX_CMD, TrafficConfigConstants.EMULATION_MULTICAST_RCVR_PORT_INDEX_CMD, TrafficConfigConstants.EMULATION_OVERRIDE_PPP_IP_ADDR_CMD, TrafficConfigConstants.EMULATION_SCALABLE_DST_HANDLE_CMD, TrafficConfigConstants.EMULATION_SCALABLE_DST_INTF_COUNT_CMD, TrafficConfigConstants.EMULATION_SCALABLE_DST_INTF_START_CMD, TrafficConfigConstants.EMULATION_SCALABLE_DST_PORT_COUNT_CMD, TrafficConfigConstants.EMULATION_SCALABLE_DST_PORT_START_CMD, TrafficConfigConstants.EMULATION_SCALABLE_SRC_HANDLE_CMD, TrafficConfigConstants.EMULATION_SCALABLE_SRC_INTF_COUNT_CMD, TrafficConfigConstants.EMULATION_SCALABLE_SRC_INTF_START_CMD, TrafficConfigConstants.EMULATION_SCALABLE_SRC_PORT_COUNT_CMD, TrafficConfigConstants.EMULATION_SCALABLE_SRC_PORT_START_CMD, TrafficConfigConstants.EMULATION_SRC_HANDLE_CMD, TrafficConfigConstants.EMULATION_SRC_VLAN_PROTOCOL_TAG_ID_CMD, TrafficConfigConstants.ENABLE_AUTO_DETECT_INSTRUMENTATION_CMD, TrafficConfigConstants.ENABLE_CE_TO_PE_TRAFFIC_CMD, TrafficConfigConstants.ENABLE_DATA_INTEGRITY_CMD, TrafficConfigConstants.ENABLE_DYNAMIC_MPLS_LABELS_CMD, TrafficConfigConstants.ENABLE_OVERRIDE_VALUE_CMD, TrafficConfigConstants.ENABLE_PGID_CMD, TrafficConfigConstants.ENABLE_TEST_OBJECTIVE_CMD, TrafficConfigConstants.ENABLE_TIME_STAMP_CMD, TrafficConfigConstants.ENABLE_UDF1_CMD, TrafficConfigConstants.ENABLE_UDF2_CMD, TrafficConfigConstants.ENABLE_UDF3_CMD, TrafficConfigConstants.ENABLE_UDF4_CMD, TrafficConfigConstants.ENABLE_UDF5_CMD, TrafficConfigConstants.ENDPOINTSET_COUNT_CMD, TrafficConfigConstants.ENFORCE_MIN_GAP_CMD, TrafficConfigConstants.ETHERNET_TYPE_CMD, TrafficConfigConstants.ETHERNET_VALUE_CMD, TrafficConfigConstants.ETHERNET_VALUE_COUNT_CMD, TrafficConfigConstants.ETHERNET_VALUE_MODE_CMD, TrafficConfigConstants.ETHERNET_VALUE_STEP_CMD, TrafficConfigConstants.ETHERNET_VALUE_TRACKING_CMD, TrafficConfigConstants.FCS_CMD, TrafficConfigConstants.FCS_TYPE_CMD, TrafficConfigConstants.FECN_CMD, TrafficConfigConstants.FIELD_ACTIVEFIELDCHOICE_CMD, TrafficConfigConstants.FIELD_AUTO_CMD, TrafficConfigConstants.FIELD_COUNTVALUE_CMD, TrafficConfigConstants.FIELD_FIELDVALUE_CMD, TrafficConfigConstants.FIELD_FULLMESH_CMD, TrafficConfigConstants.FIELD_HANDLE_CMD, TrafficConfigConstants.FIELD_LINKED_CMD, TrafficConfigConstants.FIELD_LINKED_TO_CMD, TrafficConfigConstants.FIELD_OPTIONALENABLED_CMD, TrafficConfigConstants.FIELD_SINGLEVALUE_CMD, TrafficConfigConstants.FIELD_STARTVALUE_CMD, TrafficConfigConstants.FIELD_STEPVALUE_CMD, TrafficConfigConstants.FIELD_TRACKINGENABLED_CMD, TrafficConfigConstants.FIELD_VALUELIST_CMD, TrafficConfigConstants.FIELD_VALUETYPE_CMD, TrafficConfigConstants.FR_RANGE_COUNT_CMD, TrafficConfigConstants.FRAME_RATE_DISTRIBUTION_PORT_CMD, TrafficConfigConstants.FRAME_RATE_DISTRIBUTION_STREAM_CMD, TrafficConfigConstants.FRAME_SEQUENCING_CMD, TrafficConfigConstants.FRAME_SEQUENCING_MODE_CMD, TrafficConfigConstants.FRAME_SEQUENCING_OFFSET_CMD, TrafficConfigConstants.FRAME_SIZE_CMD, TrafficConfigConstants.FRAME_SIZE_DISTRIBUTION_CMD, TrafficConfigConstants.FRAME_SIZE_GAUSS_CMD, TrafficConfigConstants.FRAME_SIZE_IMIX_CMD, TrafficConfigConstants.FRAME_SIZE_MAX_CMD, TrafficConfigConstants.FRAME_SIZE_MIN_CMD, TrafficConfigConstants.FRAME_SIZE_STEP_CMD, TrafficConfigConstants.GLOBAL_DEST_MAC_RETRY_COUNT_CMD, TrafficConfigConstants.GLOBAL_DEST_MAC_RETRY_DELAY_CMD, TrafficConfigConstants.GLOBAL_DISPLAY_MPLS_CURRENT_LABEL_VALUE_CMD, TrafficConfigConstants.GLOBAL_ENABLE_DEST_MAC_RETRY_CMD, TrafficConfigConstants.GLOBAL_ENABLE_MAC_CHANGE_ON_FLY_CMD, TrafficConfigConstants.GLOBAL_ENABLE_MIN_FRAME_SIZE_CMD, TrafficConfigConstants.GLOBAL_ENABLE_STAGGERED_TRANSMIT_CMD, TrafficConfigConstants.GLOBAL_ENABLE_STREAM_ORDERING_CMD, TrafficConfigConstants.GLOBAL_FRAME_ORDERING_CMD, TrafficConfigConstants.GLOBAL_LARGE_ERROR_THRESHHOLD_CMD, TrafficConfigConstants.GLOBAL_MAX_TRAFFIC_GENERATION_QUERIES_CMD, TrafficConfigConstants.GLOBAL_MPLS_LABEL_LEARNING_TIMEOUT_CMD, TrafficConfigConstants.GLOBAL_PEAK_LOADING_REPLICATION_COUNT_CMD, TrafficConfigConstants.GLOBAL_REFRESH_LEARNED_INFO_BEFORE_APPLY_CMD, TrafficConfigConstants.GLOBAL_STREAM_CONTROL_CMD, TrafficConfigConstants.GLOBAL_STREAM_CONTROL_ITERATIONS_CMD, TrafficConfigConstants.GLOBAL_USE_TX_RX_SYNC_CMD, TrafficConfigConstants.GLOBAL_WAIT_TIME_CMD, TrafficConfigConstants.GRE_CHECKSUM_CMD, TrafficConfigConstants.GRE_CHECKSUM_COUNT_CMD, TrafficConfigConstants.GRE_CHECKSUM_ENABLE_CMD, TrafficConfigConstants.GRE_CHECKSUM_ENABLE_MODE_CMD, TrafficConfigConstants.GRE_CHECKSUM_ENABLE_TRACKING_CMD, TrafficConfigConstants.GRE_CHECKSUM_MODE_CMD, TrafficConfigConstants.GRE_CHECKSUM_STEP_CMD, TrafficConfigConstants.GRE_CHECKSUM_TRACKING_CMD, TrafficConfigConstants.GRE_KEY_CMD, TrafficConfigConstants.GRE_KEY_COUNT_CMD, TrafficConfigConstants.GRE_KEY_ENABLE_CMD, TrafficConfigConstants.GRE_KEY_ENABLE_MODE_CMD, TrafficConfigConstants.GRE_KEY_ENABLE_TRACKING_CMD, TrafficConfigConstants.GRE_KEY_MODE_CMD, TrafficConfigConstants.GRE_KEY_STEP_CMD, TrafficConfigConstants.GRE_KEY_TRACKING_CMD, TrafficConfigConstants.GRE_RESERVED0_CMD, TrafficConfigConstants.GRE_RESERVED0_COUNT_CMD, TrafficConfigConstants.GRE_RESERVED0_MODE_CMD, TrafficConfigConstants.GRE_RESERVED0_STEP_CMD, TrafficConfigConstants.GRE_RESERVED0_TRACKING_CMD, TrafficConfigConstants.GRE_RESERVED1_CMD, TrafficConfigConstants.GRE_RESERVED1_COUNT_CMD, TrafficConfigConstants.GRE_RESERVED1_MODE_CMD, TrafficConfigConstants.GRE_RESERVED1_STEP_CMD, TrafficConfigConstants.GRE_RESERVED1_TRACKING_CMD, TrafficConfigConstants.GRE_SEQ_ENABLE_CMD, TrafficConfigConstants.GRE_SEQ_ENABLE_MODE_CMD, TrafficConfigConstants.GRE_SEQ_ENABLE_TRACKING_CMD, TrafficConfigConstants.GRE_SEQ_NUMBER_CMD, TrafficConfigConstants.GRE_SEQ_NUMBER_COUNT_CMD, TrafficConfigConstants.GRE_SEQ_NUMBER_MODE_CMD, TrafficConfigConstants.GRE_SEQ_NUMBER_STEP_CMD, TrafficConfigConstants.GRE_SEQ_NUMBER_TRACKING_CMD, TrafficConfigConstants.GRE_VALID_CHECKSUM_ENABLE_CMD, TrafficConfigConstants.GRE_VERSION_CMD, TrafficConfigConstants.GRE_VERSION_COUNT_CMD, TrafficConfigConstants.GRE_VERSION_MODE_CMD, TrafficConfigConstants.GRE_VERSION_STEP_CMD, TrafficConfigConstants.GRE_VERSION_TRACKING_CMD, TrafficConfigConstants.HEADER_HANDLE_CMD, TrafficConfigConstants.HOSTS_PER_NET_CMD, TrafficConfigConstants.ICMP_CHECKSUM_CMD, TrafficConfigConstants.ICMP_CHECKSUM_COUNT_CMD, TrafficConfigConstants.ICMP_CHECKSUM_MODE_CMD, TrafficConfigConstants.ICMP_CHECKSUM_STEP_CMD, TrafficConfigConstants.ICMP_CHECKSUM_TRACKING_CMD, TrafficConfigConstants.ICMP_CODE_CMD, TrafficConfigConstants.ICMP_CODE_COUNT_CMD, TrafficConfigConstants.ICMP_CODE_MODE_CMD, TrafficConfigConstants.ICMP_CODE_STEP_CMD, TrafficConfigConstants.ICMP_CODE_TRACKING_CMD, TrafficConfigConstants.ICMP_ID_CMD, TrafficConfigConstants.ICMP_ID_COUNT_CMD, TrafficConfigConstants.ICMP_ID_MODE_CMD, TrafficConfigConstants.ICMP_ID_STEP_CMD, TrafficConfigConstants.ICMP_ID_TRACKING_CMD, TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_CMD, TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_COUNT_CMD, TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_MODE_CMD, TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_STEP_CMD, TrafficConfigConstants.ICMP_MAX_RESPONSE_DELAY_MS_TRACKING_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_COUNT_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_MODE_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_STEP_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_INTERVAL_CODE_TRACKING_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_COUNT_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_MODE_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_STEP_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_ROBUSTNESS_VAR_TRACKING_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_MC_QUERY_V2_S_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_MODE_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_M_BIT_TRACKING_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_MODE_CMD, TrafficConfigConstants.ICMP_MOBILE_PAM_O_BIT_TRACKING_CMD, TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_CMD, TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_COUNT_CMD, TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_MODE_CMD, TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_STEP_CMD, TrafficConfigConstants.ICMP_MULTICAST_ADDRESS_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_NAM_O_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_NAM_R_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_NAM_S_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_H_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_CMD, TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_COUNT_CMD, TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_STEP_CMD, TrafficConfigConstants.ICMP_NDP_RAM_HOP_LIMIT_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_M_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_CMD, TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_O_FLAG_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_CMD, TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_COUNT_CMD, TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_STEP_CMD, TrafficConfigConstants.ICMP_NDP_RAM_REACHABLE_TIME_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_CMD, TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_COUNT_CMD, TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_STEP_CMD, TrafficConfigConstants.ICMP_NDP_RAM_RETRANSMIT_TIMER_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_CMD, TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_COUNT_CMD, TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_STEP_CMD, TrafficConfigConstants.ICMP_NDP_RAM_ROUTER_LIFETIME_TRACKING_CMD, TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_CMD, TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_COUNT_CMD, TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_MODE_CMD, TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_STEP_CMD, TrafficConfigConstants.ICMP_NDP_RM_DEST_ADDR_TRACKING_CMD, TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_CMD, TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_COUNT_CMD, TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_MODE_CMD, TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_STEP_CMD, TrafficConfigConstants.ICMP_PARAM_PROBLEM_MESSAGE_POINTER_TRACKING_CMD, TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_CMD, TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_COUNT_CMD, TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_MODE_CMD, TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_STEP_CMD, TrafficConfigConstants.ICMP_PKT_TOO_BIG_MTU_TRACKING_CMD, TrafficConfigConstants.ICMP_SEQ_CMD, TrafficConfigConstants.ICMP_SEQ_COUNT_CMD, TrafficConfigConstants.ICMP_SEQ_MODE_CMD, TrafficConfigConstants.ICMP_SEQ_STEP_CMD, TrafficConfigConstants.ICMP_SEQ_TRACKING_CMD, TrafficConfigConstants.ICMP_TARGET_ADDR_CMD, TrafficConfigConstants.ICMP_TARGET_ADDR_COUNT_CMD, TrafficConfigConstants.ICMP_TARGET_ADDR_MODE_CMD, TrafficConfigConstants.ICMP_TARGET_ADDR_STEP_CMD, TrafficConfigConstants.ICMP_TARGET_ADDR_TRACKING_CMD, TrafficConfigConstants.ICMP_TYPE_CMD, TrafficConfigConstants.ICMP_TYPE_COUNT_CMD, TrafficConfigConstants.ICMP_TYPE_MODE_CMD, TrafficConfigConstants.ICMP_TYPE_STEP_CMD, TrafficConfigConstants.ICMP_TYPE_TRACKING_CMD, TrafficConfigConstants.ICMP_UNUSED_CMD, TrafficConfigConstants.ICMP_UNUSED_COUNT_CMD, TrafficConfigConstants.ICMP_UNUSED_MODE_CMD, TrafficConfigConstants.ICMP_UNUSED_STEP_CMD, TrafficConfigConstants.ICMP_UNUSED_TRACKING_CMD, TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_CMD, TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_COUNT_CMD, TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_MODE_CMD, TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_STEP_CMD, TrafficConfigConstants.IGMP_AUX_DATA_LENGTH_TRACKING_CMD, TrafficConfigConstants.IGMP_CHECKSUM_CMD, TrafficConfigConstants.IGMP_CHECKSUM_COUNT_CMD, TrafficConfigConstants.IGMP_CHECKSUM_MODE_CMD, TrafficConfigConstants.IGMP_CHECKSUM_STEP_CMD, TrafficConfigConstants.IGMP_CHECKSUM_TRACKING_CMD, TrafficConfigConstants.IGMP_DATA_V3R_CMD, TrafficConfigConstants.IGMP_DATA_V3R_COUNT_CMD, TrafficConfigConstants.IGMP_DATA_V3R_MODE_CMD, TrafficConfigConstants.IGMP_DATA_V3R_STEP_CMD, TrafficConfigConstants.IGMP_DATA_V3R_TRACKING_CMD, TrafficConfigConstants.IGMP_GROUP_ADDR_CMD, TrafficConfigConstants.IGMP_GROUP_COUNT_CMD, TrafficConfigConstants.IGMP_GROUP_MODE_CMD, TrafficConfigConstants.IGMP_GROUP_STEP_CMD, TrafficConfigConstants.IGMP_GROUP_TRACKING_CMD, TrafficConfigConstants.IGMP_LENGTH_V3R_CMD, TrafficConfigConstants.IGMP_LENGTH_V3R_COUNT_CMD, TrafficConfigConstants.IGMP_LENGTH_V3R_MODE_CMD, TrafficConfigConstants.IGMP_LENGTH_V3R_STEP_CMD, TrafficConfigConstants.IGMP_LENGTH_V3R_TRACKING_CMD, TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_CMD, TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_COUNT_CMD, TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_MODE_CMD, TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_STEP_CMD, TrafficConfigConstants.IGMP_MAX_RESPONSE_TIME_TRACKING_CMD, TrafficConfigConstants.IGMP_MSG_TYPE_CMD, TrafficConfigConstants.IGMP_MSG_TYPE_TRACKING_CMD, TrafficConfigConstants.IGMP_MULTICAST_SRC_CMD, TrafficConfigConstants.IGMP_MULTICAST_SRC_COUNT_CMD, TrafficConfigConstants.IGMP_MULTICAST_SRC_MODE_CMD, TrafficConfigConstants.IGMP_MULTICAST_SRC_STEP_CMD, TrafficConfigConstants.IGMP_MULTICAST_SRC_TRACKING_CMD, TrafficConfigConstants.IGMP_QQIC_CMD, TrafficConfigConstants.IGMP_QQIC_COUNT_CMD, TrafficConfigConstants.IGMP_QQIC_MODE_CMD, TrafficConfigConstants.IGMP_QQIC_STEP_CMD, TrafficConfigConstants.IGMP_QQIC_TRACKING_CMD, TrafficConfigConstants.IGMP_QRV_CMD, TrafficConfigConstants.IGMP_QRV_COUNT_CMD, TrafficConfigConstants.IGMP_QRV_MODE_CMD, TrafficConfigConstants.IGMP_QRV_STEP_CMD, TrafficConfigConstants.IGMP_QRV_TRACKING_CMD, TrafficConfigConstants.IGMP_RECORD_TYPE_CMD, TrafficConfigConstants.IGMP_RECORD_TYPE_MODE_CMD, TrafficConfigConstants.IGMP_RECORD_TYPE_TRACKING_CMD, TrafficConfigConstants.IGMP_RESERVED_V3Q_CMD, TrafficConfigConstants.IGMP_RESERVED_V3Q_COUNT_CMD, TrafficConfigConstants.IGMP_RESERVED_V3Q_MODE_CMD, TrafficConfigConstants.IGMP_RESERVED_V3Q_STEP_CMD, TrafficConfigConstants.IGMP_RESERVED_V3Q_TRACKING_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R1_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R1_COUNT_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R1_MODE_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R1_STEP_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R1_TRACKING_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R2_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R2_COUNT_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R2_MODE_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R2_STEP_CMD, TrafficConfigConstants.IGMP_RESERVED_V3R2_TRACKING_CMD, TrafficConfigConstants.IGMP_S_FLAG_CMD, TrafficConfigConstants.IGMP_S_FLAG_MODE_CMD, TrafficConfigConstants.IGMP_S_FLAG_TRACKING_CMD, TrafficConfigConstants.IGMP_TYPE_CMD, TrafficConfigConstants.IGMP_UNUSED_CMD, TrafficConfigConstants.IGMP_UNUSED_COUNT_CMD, TrafficConfigConstants.IGMP_UNUSED_MODE_CMD, TrafficConfigConstants.IGMP_UNUSED_STEP_CMD, TrafficConfigConstants.IGMP_UNUSED_TRACKING_CMD, TrafficConfigConstants.IGMP_VALID_CHECKSUM_CMD, TrafficConfigConstants.IGMP_VERSION_CMD, TrafficConfigConstants.INDIRECT_CMD, TrafficConfigConstants.INNER_IP_DST_ADDR_CMD, TrafficConfigConstants.INNER_IP_DST_COUNT_CMD, TrafficConfigConstants.INNER_IP_DST_MODE_CMD, TrafficConfigConstants.INNER_IP_DST_STEP_CMD, TrafficConfigConstants.INNER_IP_DST_TRACKING_CMD, TrafficConfigConstants.INNER_IP_SRC_ADDR_CMD, TrafficConfigConstants.INNER_IP_SRC_COUNT_CMD, TrafficConfigConstants.INNER_IP_SRC_MODE_CMD, TrafficConfigConstants.INNER_IP_SRC_STEP_CMD, TrafficConfigConstants.INNER_IP_SRC_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_DST_ADDR_CMD, TrafficConfigConstants.INNER_IPV6_DST_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_DST_MASK_CMD, TrafficConfigConstants.INNER_IPV6_DST_MODE_CMD, TrafficConfigConstants.INNER_IPV6_DST_STEP_CMD, TrafficConfigConstants.INNER_IPV6_DST_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_CMD, TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_MODE_CMD, TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_STEP_CMD, TrafficConfigConstants.INNER_IPV6_FLOW_LABEL_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_ID_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_ID_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_ID_MODE_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_ID_STEP_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_ID_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_MODE_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_MORE_FLAG_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_MODE_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_STEP_CMD, TrafficConfigConstants.INNER_IPV6_FRAG_OFFSET_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_CMD, TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_MODE_CMD, TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_STEP_CMD, TrafficConfigConstants.INNER_IPV6_HOP_LIMIT_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_SRC_ADDR_CMD, TrafficConfigConstants.INNER_IPV6_SRC_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_SRC_MASK_CMD, TrafficConfigConstants.INNER_IPV6_SRC_MODE_CMD, TrafficConfigConstants.INNER_IPV6_SRC_STEP_CMD, TrafficConfigConstants.INNER_IPV6_SRC_TRACKING_CMD, TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_CMD, TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_COUNT_CMD, TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_MODE_CMD, TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_STEP_CMD, TrafficConfigConstants.INNER_IPV6_TRAFFIC_CLASS_TRACKING_CMD, TrafficConfigConstants.INNER_PROTOCOL_CMD, TrafficConfigConstants.INNER_PROTOCOL_COUNT_CMD, TrafficConfigConstants.INNER_PROTOCOL_MODE_CMD, TrafficConfigConstants.INNER_PROTOCOL_STEP_CMD, TrafficConfigConstants.INNER_PROTOCOL_TRACKING_CMD, TrafficConfigConstants.INTEGRITY_SIGNATURE_CMD, TrafficConfigConstants.INTEGRITY_SIGNATURE_OFFSET_CMD, TrafficConfigConstants.INTER_BURST_GAP_CMD, TrafficConfigConstants.INTER_FRAME_GAP_CMD, TrafficConfigConstants.INTER_FRAME_GAP_UNIT_CMD, TrafficConfigConstants.INTER_STREAM_GAP_CMD, TrafficConfigConstants.INTF_HANDLE_CMD, TrafficConfigConstants.IP_BIT_FLAGS_CMD, TrafficConfigConstants.IP_CHECKSUM_CMD, TrafficConfigConstants.IP_CHECKSUM_COUNT_CMD, TrafficConfigConstants.IP_CHECKSUM_MODE_CMD, TrafficConfigConstants.IP_CHECKSUM_STEP_CMD, TrafficConfigConstants.IP_CHECKSUM_TRACKING_CMD, TrafficConfigConstants.IP_COST_CMD, TrafficConfigConstants.IP_COST_MODE_CMD, TrafficConfigConstants.IP_COST_TRACKING_CMD, TrafficConfigConstants.IP_CU_CMD, TrafficConfigConstants.IP_CU_COUNT_CMD, TrafficConfigConstants.IP_CU_MODE_CMD, TrafficConfigConstants.IP_CU_STEP_CMD, TrafficConfigConstants.IP_CU_TRACKING_CMD, TrafficConfigConstants.IP_DELAY_CMD, TrafficConfigConstants.IP_DELAY_MODE_CMD, TrafficConfigConstants.IP_DELAY_TRACKING_CMD, TrafficConfigConstants.IP_DSCP_CMD, TrafficConfigConstants.IP_DSCP_COUNT_CMD, TrafficConfigConstants.IP_DSCP_MODE_CMD, TrafficConfigConstants.IP_DSCP_STEP_CMD, TrafficConfigConstants.IP_DSCP_TRACKING_CMD, TrafficConfigConstants.IP_DST_ADDR_CMD, TrafficConfigConstants.IP_DST_COUNT_CMD, TrafficConfigConstants.IP_DST_COUNT_STEP_CMD, TrafficConfigConstants.IP_DST_INCREMENT_CMD, TrafficConfigConstants.IP_DST_INCREMENT_STEP_CMD, TrafficConfigConstants.IP_DST_MODE_CMD, TrafficConfigConstants.IP_DST_PREFIX_LEN_CMD, TrafficConfigConstants.IP_DST_PREFIX_LEN_STEP_CMD, TrafficConfigConstants.IP_DST_RANGE_STEP_CMD, TrafficConfigConstants.IP_DST_SKIP_BROADCAST_CMD, TrafficConfigConstants.IP_DST_SKIP_MULTICAST_CMD, TrafficConfigConstants.IP_DST_STEP_CMD, TrafficConfigConstants.IP_DST_TRACKING_CMD, TrafficConfigConstants.IP_FRAGMENT_CMD, TrafficConfigConstants.IP_FRAGMENT_LAST_CMD, TrafficConfigConstants.IP_FRAGMENT_LAST_MODE_CMD, TrafficConfigConstants.IP_FRAGMENT_LAST_TRACKING_CMD, TrafficConfigConstants.IP_FRAGMENT_MODE_CMD, TrafficConfigConstants.IP_FRAGMENT_OFFSET_CMD, TrafficConfigConstants.IP_FRAGMENT_OFFSET_COUNT_CMD, TrafficConfigConstants.IP_FRAGMENT_OFFSET_MODE_CMD, TrafficConfigConstants.IP_FRAGMENT_OFFSET_STEP_CMD, TrafficConfigConstants.IP_FRAGMENT_OFFSET_TRACKING_CMD, TrafficConfigConstants.IP_FRAGMENT_TRACKING_CMD, TrafficConfigConstants.IP_HDR_LENGTH_CMD, TrafficConfigConstants.IP_HDR_LENGTH_COUNT_CMD, TrafficConfigConstants.IP_HDR_LENGTH_MODE_CMD, TrafficConfigConstants.IP_HDR_LENGTH_STEP_CMD, TrafficConfigConstants.IP_HDR_LENGTH_TRACKING_CMD, TrafficConfigConstants.IP_ID_CMD, TrafficConfigConstants.IP_ID_COUNT_CMD, TrafficConfigConstants.IP_ID_MODE_CMD, TrafficConfigConstants.IP_ID_STEP_CMD, TrafficConfigConstants.IP_ID_TRACKING_CMD, TrafficConfigConstants.IP_LENGTH_OVERRIDE_CMD, TrafficConfigConstants.IP_LENGTH_OVERRIDE_MODE_CMD, TrafficConfigConstants.IP_LENGTH_OVERRIDE_TRACKING_CMD, TrafficConfigConstants.IP_MBZ_CMD, TrafficConfigConstants.IP_OPT_LOOSE_ROUTING_CMD, TrafficConfigConstants.IP_OPT_SECURITY_CMD, TrafficConfigConstants.IP_OPT_STRICT_ROUTING_CMD, TrafficConfigConstants.IP_OPT_TIMESTAMP_CMD, TrafficConfigConstants.IP_PRECEDENCE_CMD, TrafficConfigConstants.IP_PRECEDENCE_COUNT_CMD, TrafficConfigConstants.IP_PRECEDENCE_MODE_CMD, TrafficConfigConstants.IP_PRECEDENCE_STEP_CMD, TrafficConfigConstants.IP_PRECEDENCE_TRACKING_CMD, TrafficConfigConstants.IP_PROTOCOL_CMD, TrafficConfigConstants.IP_PROTOCOL_COUNT_CMD, TrafficConfigConstants.IP_PROTOCOL_MODE_CMD, TrafficConfigConstants.IP_PROTOCOL_STEP_CMD, TrafficConfigConstants.IP_PROTOCOL_TRACKING_CMD, TrafficConfigConstants.IP_RANGE_COUNT_CMD, TrafficConfigConstants.IP_RELIABILITY_CMD, TrafficConfigConstants.IP_RELIABILITY_MODE_CMD, TrafficConfigConstants.IP_RELIABILITY_TRACKING_CMD, TrafficConfigConstants.IP_RESERVED_CMD, TrafficConfigConstants.IP_RESERVED_MODE_CMD, TrafficConfigConstants.IP_RESERVED_TRACKING_CMD, TrafficConfigConstants.IP_SRC_ADDR_CMD, TrafficConfigConstants.IP_SRC_COUNT_CMD, TrafficConfigConstants.IP_SRC_MODE_CMD, TrafficConfigConstants.IP_SRC_SKIP_BROADCAST_CMD, TrafficConfigConstants.IP_SRC_SKIP_MULTICAST_CMD, TrafficConfigConstants.IP_SRC_STEP_CMD, TrafficConfigConstants.IP_SRC_TRACKING_CMD, TrafficConfigConstants.IP_THROUGHPUT_CMD, TrafficConfigConstants.IP_THROUGHPUT_MODE_CMD, TrafficConfigConstants.IP_THROUGHPUT_TRACKING_CMD, TrafficConfigConstants.IP_TOS_COUNT_CMD, TrafficConfigConstants.IP_TOS_FIELD_CMD, TrafficConfigConstants.IP_TOS_STEP_CMD, TrafficConfigConstants.IP_TOTAL_LENGTH_CMD, TrafficConfigConstants.IP_TOTAL_LENGTH_COUNT_CMD, TrafficConfigConstants.IP_TOTAL_LENGTH_MODE_CMD, TrafficConfigConstants.IP_TOTAL_LENGTH_STEP_CMD, TrafficConfigConstants.IP_TOTAL_LENGTH_TRACKING_CMD, TrafficConfigConstants.IP_TTL_CMD, TrafficConfigConstants.IP_TTL_COUNT_CMD, TrafficConfigConstants.IP_TTL_MODE_CMD, TrafficConfigConstants.IP_TTL_STEP_CMD, TrafficConfigConstants.IP_TTL_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_CMD, TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_MD5SHA1_STRING_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_CMD, TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_NEXT_HEADER_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_PADDING_CMD,TrafficConfigConstants.IPV6_AUTH_PADDING_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_PADDING_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_PADDING_STEP_CMD,TrafficConfigConstants.IPV6_AUTH_PADDING_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_CMD, TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_PAYLOAD_LEN_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_RESERVED_CMD, TrafficConfigConstants.IPV6_AUTH_RESERVED_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_RESERVED_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_RESERVED_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_RESERVED_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_CMD, TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_SEQ_NUM_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_SPI_CMD, TrafficConfigConstants.IPV6_AUTH_SPI_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_SPI_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_SPI_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_SPI_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_STRING_CMD, TrafficConfigConstants.IPV6_AUTH_STRING_COUNT_CMD, TrafficConfigConstants.IPV6_AUTH_STRING_MODE_CMD, TrafficConfigConstants.IPV6_AUTH_STRING_STEP_CMD, TrafficConfigConstants.IPV6_AUTH_STRING_TRACKING_CMD, TrafficConfigConstants.IPV6_AUTH_TYPE_CMD, TrafficConfigConstants.IPV6_CHECKSUM_CMD, TrafficConfigConstants.IPV6_DST_ADDR_CMD, TrafficConfigConstants.IPV6_DST_COUNT_CMD, TrafficConfigConstants.IPV6_DST_MASK_CMD, TrafficConfigConstants.IPV6_DST_MODE_CMD, TrafficConfigConstants.IPV6_DST_STEP_CMD, TrafficConfigConstants.IPV6_DST_TRACKING_CMD, TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_CMD, TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_COUNT_CMD, TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_MODE_CMD, TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_STEP_CMD, TrafficConfigConstants.IPV6_ENCAP_SEQ_NUMBER_TRACKING_CMD, TrafficConfigConstants.IPV6_ENCAP_SPI_CMD, TrafficConfigConstants.IPV6_ENCAP_SPI_COUNT_CMD, TrafficConfigConstants.IPV6_ENCAP_SPI_MODE_CMD, TrafficConfigConstants.IPV6_ENCAP_SPI_STEP_CMD, TrafficConfigConstants.IPV6_ENCAP_SPI_TRACKING_CMD, TrafficConfigConstants.IPV6_EXTENSION_HEADER_CMD, TrafficConfigConstants.IPV6_FLOW_LABEL_CMD, TrafficConfigConstants.IPV6_FLOW_LABEL_COUNT_CMD, TrafficConfigConstants.IPV6_FLOW_LABEL_MODE_CMD, TrafficConfigConstants.IPV6_FLOW_LABEL_STEP_CMD, TrafficConfigConstants.IPV6_FLOW_LABEL_TRACKING_CMD, TrafficConfigConstants.IPV6_FLOW_VERSION_CMD, TrafficConfigConstants.IPV6_FLOW_VERSION_COUNT_CMD, TrafficConfigConstants.IPV6_FLOW_VERSION_MODE_CMD, TrafficConfigConstants.IPV6_FLOW_VERSION_STEP_CMD, TrafficConfigConstants.IPV6_FLOW_VERSION_TRACKING_CMD, TrafficConfigConstants.IPV6_FRAG_ID_CMD, TrafficConfigConstants.IPV6_FRAG_ID_COUNT_CMD, TrafficConfigConstants.IPV6_FRAG_ID_MODE_CMD, TrafficConfigConstants.IPV6_FRAG_ID_STEP_CMD, TrafficConfigConstants.IPV6_FRAG_ID_TRACKING_CMD, TrafficConfigConstants.IPV6_FRAG_MORE_FLAG_CMD, TrafficConfigConstants.IPV6_FRAG_MORE_FLAG_MODE_CMD, TrafficConfigConstants.IPV6_FRAG_MORE_FLAG_TRACKING_CMD, TrafficConfigConstants.IPV6_FRAG_NEXT_HEADER_CMD, TrafficConfigConstants.IPV6_FRAG_OFFSET_CMD, TrafficConfigConstants.IPV6_FRAG_OFFSET_COUNT_CMD, TrafficConfigConstants.IPV6_FRAG_OFFSET_MODE_CMD, TrafficConfigConstants.IPV6_FRAG_OFFSET_STEP_CMD, TrafficConfigConstants.IPV6_FRAG_OFFSET_TRACKING_CMD, TrafficConfigConstants.IPV6_FRAG_RES_2BIT_CMD, TrafficConfigConstants.IPV6_FRAG_RES_2BIT_COUNT_CMD, TrafficConfigConstants.IPV6_FRAG_RES_2BIT_MODE_CMD, TrafficConfigConstants.IPV6_FRAG_RES_2BIT_STEP_CMD, TrafficConfigConstants.IPV6_FRAG_RES_2BIT_TRACKING_CMD, TrafficConfigConstants.IPV6_FRAG_RES_8BIT_CMD, TrafficConfigConstants.IPV6_FRAG_RES_8BIT_COUNT_CMD, TrafficConfigConstants.IPV6_FRAG_RES_8BIT_MODE_CMD, TrafficConfigConstants.IPV6_FRAG_RES_8BIT_STEP_CMD, TrafficConfigConstants.IPV6_FRAG_RES_8BIT_TRACKING_CMD, TrafficConfigConstants.IPV6_HOP_BY_HOP_OPTIONS_CMD, TrafficConfigConstants.IPV6_HOP_LIMIT_CMD, TrafficConfigConstants.IPV6_HOP_LIMIT_COUNT_CMD, TrafficConfigConstants.IPV6_HOP_LIMIT_MODE_CMD, TrafficConfigConstants.IPV6_HOP_LIMIT_STEP_CMD, TrafficConfigConstants.IPV6_HOP_LIMIT_TRACKING_CMD, TrafficConfigConstants.IPV6_LENGTH_CMD, TrafficConfigConstants.IPV6_NEXT_HEADER_CMD, TrafficConfigConstants.IPV6_NEXT_HEADER_COUNT_CMD, TrafficConfigConstants.IPV6_NEXT_HEADER_MODE_CMD, TrafficConfigConstants.IPV6_NEXT_HEADER_STEP_CMD, TrafficConfigConstants.IPV6_NEXT_HEADER_TRACKING_CMD, TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_CMD, TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_COUNT_CMD, TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_MODE_CMD, TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_STEP_CMD, TrafficConfigConstants.IPV6_PSEUDO_DST_ADDR_TRACKING_CMD, TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_CMD, TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_COUNT_CMD, TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_MODE_CMD, TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_STEP_CMD, TrafficConfigConstants.IPV6_PSEUDO_SRC_ADDR_TRACKING_CMD, TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_CMD, TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_COUNT_CMD, TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_MODE_CMD, TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_STEP_CMD, TrafficConfigConstants.IPV6_PSEUDO_UPPPER_LAYER_PKT_LENGTH_TRACKING_CMD, TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_CMD, TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_COUNT_CMD, TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_MODE_CMD, TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_STEP_CMD, TrafficConfigConstants.IPV6_PSEUDO_ZERO_NUMBER_TRACKING_CMD, TrafficConfigConstants.IPV6_ROUTING_NODE_LIST_CMD, TrafficConfigConstants.IPV6_ROUTING_RES_CMD, TrafficConfigConstants.IPV6_ROUTING_RES_COUNT_CMD, TrafficConfigConstants.IPV6_ROUTING_RES_MODE_CMD, TrafficConfigConstants.IPV6_ROUTING_RES_STEP_CMD, TrafficConfigConstants.IPV6_ROUTING_RES_TRACKING_CMD, TrafficConfigConstants.IPV6_ROUTING_TYPE_CMD, TrafficConfigConstants.IPV6_ROUTING_TYPE_COUNT_CMD, TrafficConfigConstants.IPV6_ROUTING_TYPE_MODE_CMD, TrafficConfigConstants.IPV6_ROUTING_TYPE_STEP_CMD, TrafficConfigConstants.IPV6_ROUTING_TYPE_TRACKING_CMD, TrafficConfigConstants.IPV6_SRC_ADDR_CMD, TrafficConfigConstants.IPV6_SRC_COUNT_CMD, TrafficConfigConstants.IPV6_SRC_MASK_CMD, TrafficConfigConstants.IPV6_SRC_MODE_CMD, TrafficConfigConstants.IPV6_SRC_STEP_CMD, TrafficConfigConstants.IPV6_SRC_TRACKING_CMD, TrafficConfigConstants.IPV6_TRAFFIC_CLASS_CMD, TrafficConfigConstants.IPV6_TRAFFIC_CLASS_COUNT_CMD, TrafficConfigConstants.IPV6_TRAFFIC_CLASS_MODE_CMD, TrafficConfigConstants.IPV6_TRAFFIC_CLASS_STEP_CMD, TrafficConfigConstants.IPV6_TRAFFIC_CLASS_TRACKING_CMD, TrafficConfigConstants.ISL_CMD, TrafficConfigConstants.ISL_BPDU_CMD, TrafficConfigConstants.ISL_BPDU_COUNT_CMD, TrafficConfigConstants.ISL_BPDU_MODE_CMD, TrafficConfigConstants.ISL_BPDU_STEP_CMD, TrafficConfigConstants.ISL_BPDU_TRACKING_CMD, TrafficConfigConstants.ISL_FRAME_TYPE_CMD, TrafficConfigConstants.ISL_FRAME_TYPE_MODE_CMD, TrafficConfigConstants.ISL_FRAME_TYPE_TRACKING_CMD, TrafficConfigConstants.ISL_INDEX_CMD, TrafficConfigConstants.ISL_INDEX_COUNT_CMD, TrafficConfigConstants.ISL_INDEX_MODE_CMD, TrafficConfigConstants.ISL_INDEX_STEP_CMD, TrafficConfigConstants.ISL_INDEX_TRACKING_CMD, TrafficConfigConstants.ISL_MAC_DST_CMD, TrafficConfigConstants.ISL_MAC_DST_COUNT_CMD, TrafficConfigConstants.ISL_MAC_DST_MODE_CMD, TrafficConfigConstants.ISL_MAC_DST_STEP_CMD, TrafficConfigConstants.ISL_MAC_DST_TRACKING_CMD, TrafficConfigConstants.ISL_MAC_SRC_HIGH_CMD, TrafficConfigConstants.ISL_MAC_SRC_HIGH_COUNT_CMD, TrafficConfigConstants.ISL_MAC_SRC_HIGH_MODE_CMD, TrafficConfigConstants.ISL_MAC_SRC_HIGH_STEP_CMD, TrafficConfigConstants.ISL_MAC_SRC_HIGH_TRACKING_CMD, TrafficConfigConstants.ISL_MAC_SRC_LOW_CMD, TrafficConfigConstants.ISL_MAC_SRC_LOW_COUNT_CMD, TrafficConfigConstants.ISL_MAC_SRC_LOW_MODE_CMD, TrafficConfigConstants.ISL_MAC_SRC_LOW_STEP_CMD, TrafficConfigConstants.ISL_MAC_SRC_LOW_TRACKING_CMD, TrafficConfigConstants.ISL_USER_PRIORITY_CMD, TrafficConfigConstants.ISL_USER_PRIORITY_COUNT_CMD, TrafficConfigConstants.ISL_USER_PRIORITY_MODE_CMD, TrafficConfigConstants.ISL_USER_PRIORITY_STEP_CMD, TrafficConfigConstants.ISL_USER_PRIORITY_TRACKING_CMD, TrafficConfigConstants.ISL_VLAN_ID_CMD, TrafficConfigConstants.ISL_VLAN_ID_COUNT_CMD, TrafficConfigConstants.ISL_VLAN_ID_MODE_CMD, TrafficConfigConstants.ISL_VLAN_ID_STEP_CMD, TrafficConfigConstants.ISL_VLAN_ID_TRACKING_CMD, TrafficConfigConstants.L2_ENCAP_CMD, TrafficConfigConstants.L3_GAUS1_AVG_CMD, TrafficConfigConstants.L3_GAUS1_HALFBW_CMD, TrafficConfigConstants.L3_GAUS1_WEIGHT_CMD, TrafficConfigConstants.L3_GAUS2_AVG_CMD, TrafficConfigConstants.L3_GAUS2_HALFBW_CMD, TrafficConfigConstants.L3_GAUS2_WEIGHT_CMD, TrafficConfigConstants.L3_GAUS3_AVG_CMD, TrafficConfigConstants.L3_GAUS3_HALFBW_CMD, TrafficConfigConstants.L3_GAUS3_WEIGHT_CMD, TrafficConfigConstants.L3_GAUS4_AVG_CMD, TrafficConfigConstants.L3_GAUS4_HALFBW_CMD, TrafficConfigConstants.L3_GAUS4_WEIGHT_CMD, TrafficConfigConstants.L3_IMIX1_RATIO_CMD, TrafficConfigConstants.L3_IMIX1_SIZE_CMD, TrafficConfigConstants.L3_IMIX2_RATIO_CMD, TrafficConfigConstants.L3_IMIX2_SIZE_CMD, TrafficConfigConstants.L3_IMIX3_RATIO_CMD, TrafficConfigConstants.L3_IMIX3_SIZE_CMD, TrafficConfigConstants.L3_IMIX4_RATIO_CMD, TrafficConfigConstants.L3_IMIX4_SIZE_CMD, TrafficConfigConstants.L3_LENGTH_CMD, TrafficConfigConstants.L3_LENGTH_MAX_CMD, TrafficConfigConstants.L3_LENGTH_MIN_CMD, TrafficConfigConstants.L3_LENGTH_STEP_CMD, TrafficConfigConstants.L3_PROTOCOL_CMD, TrafficConfigConstants.L4_PROTOCOL_CMD, TrafficConfigConstants.LAN_RANGE_COUNT_CMD, TrafficConfigConstants.LATENCY_BINS_CMD, TrafficConfigConstants.LATENCY_BINS_ENABLE_CMD, TrafficConfigConstants.LATENCY_VALUES_CMD, TrafficConfigConstants.LENGTH_MODE_CMD, TrafficConfigConstants.LOOP_COUNT_CMD, TrafficConfigConstants.MAC_DISCOVERY_GW_CMD, TrafficConfigConstants.MAC_DST_CMD, TrafficConfigConstants.MAC_DST2_CMD, TrafficConfigConstants.MAC_DST2_COUNT_CMD, TrafficConfigConstants.MAC_DST2_MODE_CMD, TrafficConfigConstants.MAC_DST2_STEP_CMD, TrafficConfigConstants.MAC_DST_COUNT_CMD, TrafficConfigConstants.MAC_DST_COUNT_STEP_CMD, TrafficConfigConstants.MAC_DST_MASK_CMD, TrafficConfigConstants.MAC_DST_MODE_CMD, TrafficConfigConstants.MAC_DST_SEED_CMD, TrafficConfigConstants.MAC_DST_STEP_CMD, TrafficConfigConstants.MAC_DST_TRACKING_CMD, TrafficConfigConstants.MAC_SRC_CMD, TrafficConfigConstants.MAC_SRC2_CMD, TrafficConfigConstants.MAC_SRC2_COUNT_CMD, TrafficConfigConstants.MAC_SRC2_MODE_CMD, TrafficConfigConstants.MAC_SRC2_STEP_CMD, TrafficConfigConstants.MAC_SRC_COUNT_CMD, TrafficConfigConstants.MAC_SRC_MASK_CMD, TrafficConfigConstants.MAC_SRC_MODE_CMD, TrafficConfigConstants.MAC_SRC_SEED_CMD, TrafficConfigConstants.MAC_SRC_STEP_CMD, TrafficConfigConstants.MAC_SRC_TRACKING_CMD, TrafficConfigConstants.MERGE_DESTINATIONS_CMD, TrafficConfigConstants.MIN_GAP_BYTES_CMD, TrafficConfigConstants.MODE_CMD, TrafficConfigConstants.MPLS_CMD, TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_CMD, TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_COUNT_CMD, TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_MODE_CMD, TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_STEP_CMD, TrafficConfigConstants.MPLS_BOTTOM_STACK_BIT_TRACKING_CMD, TrafficConfigConstants.MPLS_EXP_BIT_CMD, TrafficConfigConstants.MPLS_EXP_BIT_COUNT_CMD, TrafficConfigConstants.MPLS_EXP_BIT_MODE_CMD, TrafficConfigConstants.MPLS_EXP_BIT_STEP_CMD, TrafficConfigConstants.MPLS_EXP_BIT_TRACKING_CMD, TrafficConfigConstants.MPLS_LABELS_CMD, TrafficConfigConstants.MPLS_LABELS_COUNT_CMD, TrafficConfigConstants.MPLS_LABELS_MODE_CMD, TrafficConfigConstants.MPLS_LABELS_STEP_CMD, TrafficConfigConstants.MPLS_LABELS_TRACKING_CMD, TrafficConfigConstants.MPLS_TTL_CMD, TrafficConfigConstants.MPLS_TTL_COUNT_CMD, TrafficConfigConstants.MPLS_TTL_MODE_CMD, TrafficConfigConstants.MPLS_TTL_STEP_CMD, TrafficConfigConstants.MPLS_TTL_TRACKING_CMD, TrafficConfigConstants.MPLS_TYPE_CMD, TrafficConfigConstants.MULTIPLE_QUEUES_CMD, TrafficConfigConstants.NAME_CMD, TrafficConfigConstants.NO_WRITE_CMD, TrafficConfigConstants.NUM_DST_PORTS_CMD, TrafficConfigConstants.NUMBER_OF_PACKETS_PER_STREAM_CMD, TrafficConfigConstants.NUMBER_OF_PACKETS_TX_CMD, TrafficConfigConstants.OVERRIDE_VALUE_LIST_CMD, TrafficConfigConstants.PAUSE_CONTROL_TIME_CMD, TrafficConfigConstants.PENDING_OPERATIONS_TIMEOUT_CMD, TrafficConfigConstants.PGID_OFFSET_CMD, TrafficConfigConstants.PGID_VALUE_CMD, TrafficConfigConstants.PKTS_PER_BURST_CMD, TrafficConfigConstants.PORT_HANDLE_CMD, TrafficConfigConstants.PORT_HANDLE2_CMD, TrafficConfigConstants.PPP_SESSION_ID_CMD, TrafficConfigConstants.PREAMBLE_CUSTOM_SIZE_CMD, TrafficConfigConstants.PREAMBLE_SIZE_MODE_CMD, TrafficConfigConstants.PT_HANDLE_CMD, TrafficConfigConstants.PUBLIC_PORT_IP_CMD, TrafficConfigConstants.PVC_COUNT_CMD, TrafficConfigConstants.PVC_COUNT_STEP_CMD, TrafficConfigConstants.QOS_BYTE_CMD, TrafficConfigConstants.QOS_BYTE_COUNT_CMD, TrafficConfigConstants.QOS_BYTE_MODE_CMD, TrafficConfigConstants.QOS_BYTE_STEP_CMD, TrafficConfigConstants.QOS_BYTE_TRACKING_CMD, TrafficConfigConstants.QOS_IPV6_FLOW_LABEL_CMD, TrafficConfigConstants.QOS_IPV6_TRAFFIC_CLASS_CMD, TrafficConfigConstants.QOS_TYPE_IXN_CMD, TrafficConfigConstants.QOS_VALUE_IXN_CMD, TrafficConfigConstants.QOS_VALUE_IXN_COUNT_CMD, TrafficConfigConstants.QOS_VALUE_IXN_MODE_CMD, TrafficConfigConstants.QOS_VALUE_IXN_STEP_CMD, TrafficConfigConstants.QOS_VALUE_IXN_TRACKING_CMD, TrafficConfigConstants.QUEUE_ID_CMD, TrafficConfigConstants.RAMP_UP_PERCENTAGE_CMD, TrafficConfigConstants.RANGE_PER_SPOKE_CMD, TrafficConfigConstants.RATE_BPS_CMD, TrafficConfigConstants.RATE_BYTEPS_CMD, TrafficConfigConstants.RATE_FRAME_GAP_CMD, TrafficConfigConstants.RATE_KBPS_CMD, TrafficConfigConstants.RATE_KBYTEPS_CMD, TrafficConfigConstants.RATE_MBPS_CMD, TrafficConfigConstants.RATE_MBYTEPS_CMD, TrafficConfigConstants.RATE_MODE_CMD, TrafficConfigConstants.RATE_PERCENT_CMD, TrafficConfigConstants.RATE_PPS_CMD, TrafficConfigConstants.RETURN_TO_ID_CMD, TrafficConfigConstants.RIP_COMMAND_CMD, TrafficConfigConstants.RIP_COMMAND_MODE_CMD, TrafficConfigConstants.RIP_COMMAND_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_CMD, TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_COUNT_CMD, TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_MODE_CMD, TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_STEP_CMD, TrafficConfigConstants.RIP_RTE_ADDR_FAMILY_ID_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_IPV4_ADDR_CMD, TrafficConfigConstants.RIP_RTE_IPV4_ADDR_COUNT_CMD, TrafficConfigConstants.RIP_RTE_IPV4_ADDR_MODE_CMD, TrafficConfigConstants.RIP_RTE_IPV4_ADDR_STEP_CMD, TrafficConfigConstants.RIP_RTE_IPV4_ADDR_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_METRIC_CMD, TrafficConfigConstants.RIP_RTE_METRIC_COUNT_CMD, TrafficConfigConstants.RIP_RTE_METRIC_MODE_CMD, TrafficConfigConstants.RIP_RTE_METRIC_STEP_CMD, TrafficConfigConstants.RIP_RTE_METRIC_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED2_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED2_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED2_MODE_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED2_STEP_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED2_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED3_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED3_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED3_MODE_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED3_STEP_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED3_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED4_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED4_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED4_MODE_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED4_STEP_CMD, TrafficConfigConstants.RIP_RTE_V1_UNUSED4_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_CMD, TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_MODE_CMD, TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_STEP_CMD, TrafficConfigConstants.RIP_RTE_V2_NEXT_HOP_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_CMD, TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_MODE_CMD, TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_STEP_CMD, TrafficConfigConstants.RIP_RTE_V2_ROUTE_TAG_TRACKING_CMD, TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_CMD, TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_COUNT_CMD, TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_MODE_CMD, TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_STEP_CMD, TrafficConfigConstants.RIP_RTE_V2_SUBNET_MASK_TRACKING_CMD, TrafficConfigConstants.RIP_UNUSED_CMD, TrafficConfigConstants.RIP_UNUSED_COUNT_CMD, TrafficConfigConstants.RIP_UNUSED_MODE_CMD, TrafficConfigConstants.RIP_UNUSED_STEP_CMD, TrafficConfigConstants.RIP_UNUSED_TRACKING_CMD, TrafficConfigConstants.RIP_VERSION_CMD, TrafficConfigConstants.ROUTE_MESH_CMD, TrafficConfigConstants.RTP_CSRC_COUNT_CMD, TrafficConfigConstants.RTP_PAYLOAD_TYPE_CMD, TrafficConfigConstants.SESSION_AWARE_TRAFFIC_CMD, TrafficConfigConstants.SIGNATURE_CMD, TrafficConfigConstants.SIGNATURE_OFFSET_CMD, TrafficConfigConstants.SITE_ID_CMD, TrafficConfigConstants.SITE_ID_ENABLE_CMD, TrafficConfigConstants.SITE_ID_STEP_CMD, TrafficConfigConstants.SKIP_FRAME_SIZE_VALIDATION_CMD, TrafficConfigConstants.SOURCE_FILTER_CMD, TrafficConfigConstants.SRC_DEST_MESH_CMD, TrafficConfigConstants.SSRC_CMD, TrafficConfigConstants.STACK_INDEX_CMD, TrafficConfigConstants.STREAM_ID_CMD, TrafficConfigConstants.STREAM_PACKING_CMD, TrafficConfigConstants.TABLE_UDF_COLUMN_NAME_CMD, TrafficConfigConstants.TABLE_UDF_COLUMN_OFFSET_CMD, TrafficConfigConstants.TABLE_UDF_COLUMN_SIZE_CMD, TrafficConfigConstants.TABLE_UDF_COLUMN_TYPE_CMD, TrafficConfigConstants.TABLE_UDF_ROWS_CMD, TrafficConfigConstants.TAG_FILTER_CMD, TrafficConfigConstants.TCP_ACK_FLAG_CMD, TrafficConfigConstants.TCP_ACK_FLAG_MODE_CMD, TrafficConfigConstants.TCP_ACK_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_ACK_NUM_CMD, TrafficConfigConstants.TCP_ACK_NUM_COUNT_CMD, TrafficConfigConstants.TCP_ACK_NUM_MODE_CMD, TrafficConfigConstants.TCP_ACK_NUM_STEP_CMD, TrafficConfigConstants.TCP_ACK_NUM_TRACKING_CMD, TrafficConfigConstants.TCP_CHECKSUM_CMD, TrafficConfigConstants.TCP_CHECKSUM_COUNT_CMD, TrafficConfigConstants.TCP_CHECKSUM_MODE_CMD, TrafficConfigConstants.TCP_CHECKSUM_STEP_CMD, TrafficConfigConstants.TCP_CHECKSUM_TRACKING_CMD, TrafficConfigConstants.TCP_CWR_FLAG_CMD, TrafficConfigConstants.TCP_CWR_FLAG_MODE_CMD, TrafficConfigConstants.TCP_CWR_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_DATA_OFFSET_CMD, TrafficConfigConstants.TCP_DATA_OFFSET_COUNT_CMD, TrafficConfigConstants.TCP_DATA_OFFSET_MODE_CMD, TrafficConfigConstants.TCP_DATA_OFFSET_STEP_CMD, TrafficConfigConstants.TCP_DATA_OFFSET_TRACKING_CMD, TrafficConfigConstants.TCP_DST_PORT_CMD, TrafficConfigConstants.TCP_DST_PORT_COUNT_CMD, TrafficConfigConstants.TCP_DST_PORT_MODE_CMD, TrafficConfigConstants.TCP_DST_PORT_STEP_CMD, TrafficConfigConstants.TCP_DST_PORT_TRACKING_CMD, TrafficConfigConstants.TCP_ECN_ECHO_FLAG_CMD, TrafficConfigConstants.TCP_ECN_ECHO_FLAG_MODE_CMD, TrafficConfigConstants.TCP_ECN_ECHO_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_FIN_FLAG_CMD, TrafficConfigConstants.TCP_FIN_FLAG_MODE_CMD, TrafficConfigConstants.TCP_FIN_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_NS_FLAG_CMD, TrafficConfigConstants.TCP_NS_FLAG_MODE_CMD, TrafficConfigConstants.TCP_NS_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_PSH_FLAG_CMD, TrafficConfigConstants.TCP_PSH_FLAG_MODE_CMD, TrafficConfigConstants.TCP_PSH_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_RESERVED_CMD, TrafficConfigConstants.TCP_RESERVED_COUNT_CMD, TrafficConfigConstants.TCP_RESERVED_MODE_CMD, TrafficConfigConstants.TCP_RESERVED_STEP_CMD, TrafficConfigConstants.TCP_RESERVED_TRACKING_CMD, TrafficConfigConstants.TCP_RST_FLAG_CMD, TrafficConfigConstants.TCP_RST_FLAG_MODE_CMD, TrafficConfigConstants.TCP_RST_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_SEQ_NUM_CMD, TrafficConfigConstants.TCP_SEQ_NUM_COUNT_CMD, TrafficConfigConstants.TCP_SEQ_NUM_MODE_CMD, TrafficConfigConstants.TCP_SEQ_NUM_STEP_CMD, TrafficConfigConstants.TCP_SEQ_NUM_TRACKING_CMD, TrafficConfigConstants.TCP_SRC_PORT_CMD, TrafficConfigConstants.TCP_SRC_PORT_COUNT_CMD, TrafficConfigConstants.TCP_SRC_PORT_MODE_CMD, TrafficConfigConstants.TCP_SRC_PORT_STEP_CMD, TrafficConfigConstants.TCP_SRC_PORT_TRACKING_CMD, TrafficConfigConstants.TCP_SYN_FLAG_CMD, TrafficConfigConstants.TCP_SYN_FLAG_MODE_CMD, TrafficConfigConstants.TCP_SYN_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_URG_FLAG_CMD, TrafficConfigConstants.TCP_URG_FLAG_MODE_CMD, TrafficConfigConstants.TCP_URG_FLAG_TRACKING_CMD, TrafficConfigConstants.TCP_URGENT_PTR_CMD, TrafficConfigConstants.TCP_URGENT_PTR_COUNT_CMD, TrafficConfigConstants.TCP_URGENT_PTR_MODE_CMD, TrafficConfigConstants.TCP_URGENT_PTR_STEP_CMD, TrafficConfigConstants.TCP_URGENT_PTR_TRACKING_CMD, TrafficConfigConstants.TCP_WINDOW_CMD, TrafficConfigConstants.TCP_WINDOW_COUNT_CMD, TrafficConfigConstants.TCP_WINDOW_MODE_CMD, TrafficConfigConstants.TCP_WINDOW_STEP_CMD, TrafficConfigConstants.TCP_WINDOW_TRACKING_CMD, TrafficConfigConstants.TEST_OBJECTIVE_VALUE_CMD, TrafficConfigConstants.TIMESTAMP_INITIAL_VALUE_CMD, TrafficConfigConstants.TRACK_BY_CMD, TrafficConfigConstants.TRAFFIC_GENERATE_CMD, TrafficConfigConstants.TRAFFIC_GENERATOR_CMD, TrafficConfigConstants.TRANSMIT_DISTRIBUTION_CMD, TrafficConfigConstants.TRANSMIT_MODE_CMD, TrafficConfigConstants.TX_DELAY_CMD, TrafficConfigConstants.TX_DELAY_UNIT_CMD, TrafficConfigConstants.TX_MODE_CMD, TrafficConfigConstants.UDF1_CASCADE_TYPE_CMD, TrafficConfigConstants.UDF1_CHAIN_FROM_CMD, TrafficConfigConstants.UDF1_COUNTER_INIT_VALUE_CMD, TrafficConfigConstants.UDF1_COUNTER_MODE_CMD, TrafficConfigConstants.UDF1_COUNTER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF1_COUNTER_STEP_CMD, TrafficConfigConstants.UDF1_COUNTER_TYPE_CMD, TrafficConfigConstants.UDF1_COUNTER_UP_DOWN_CMD, TrafficConfigConstants.UDF1_ENABLE_CASCADE_CMD, TrafficConfigConstants.UDF1_INNER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF1_INNER_REPEAT_VALUE_CMD, TrafficConfigConstants.UDF1_INNER_STEP_CMD, TrafficConfigConstants.UDF1_MASK_SELECT_CMD, TrafficConfigConstants.UDF1_MASK_VAL_CMD, TrafficConfigConstants.UDF1_MODE_CMD, TrafficConfigConstants.UDF1_OFFSET_CMD, TrafficConfigConstants.UDF1_SKIP_MASK_BITS_CMD, TrafficConfigConstants.UDF1_SKIP_ZEROS_AND_ONES_CMD, TrafficConfigConstants.UDF1_VALUE_LIST_CMD, TrafficConfigConstants.UDF2_CASCADE_TYPE_CMD, TrafficConfigConstants.UDF2_CHAIN_FROM_CMD, TrafficConfigConstants.UDF2_COUNTER_INIT_VALUE_CMD, TrafficConfigConstants.UDF2_COUNTER_MODE_CMD, TrafficConfigConstants.UDF2_COUNTER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF2_COUNTER_STEP_CMD, TrafficConfigConstants.UDF2_COUNTER_TYPE_CMD, TrafficConfigConstants.UDF2_COUNTER_UP_DOWN_CMD, TrafficConfigConstants.UDF2_ENABLE_CASCADE_CMD, TrafficConfigConstants.UDF2_INNER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF2_INNER_REPEAT_VALUE_CMD, TrafficConfigConstants.UDF2_INNER_STEP_CMD, TrafficConfigConstants.UDF2_MASK_SELECT_CMD, TrafficConfigConstants.UDF2_MASK_VAL_CMD, TrafficConfigConstants.UDF2_MODE_CMD, TrafficConfigConstants.UDF2_OFFSET_CMD, TrafficConfigConstants.UDF2_SKIP_MASK_BITS_CMD, TrafficConfigConstants.UDF2_SKIP_ZEROS_AND_ONES_CMD, TrafficConfigConstants.UDF2_VALUE_LIST_CMD, TrafficConfigConstants.UDF3_CASCADE_TYPE_CMD, TrafficConfigConstants.UDF3_CHAIN_FROM_CMD, TrafficConfigConstants.UDF3_COUNTER_INIT_VALUE_CMD, TrafficConfigConstants.UDF3_COUNTER_MODE_CMD, TrafficConfigConstants.UDF3_COUNTER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF3_COUNTER_STEP_CMD, TrafficConfigConstants.UDF3_COUNTER_TYPE_CMD, TrafficConfigConstants.UDF3_COUNTER_UP_DOWN_CMD, TrafficConfigConstants.UDF3_ENABLE_CASCADE_CMD, TrafficConfigConstants.UDF3_INNER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF3_INNER_REPEAT_VALUE_CMD, TrafficConfigConstants.UDF3_INNER_STEP_CMD, TrafficConfigConstants.UDF3_MASK_SELECT_CMD, TrafficConfigConstants.UDF3_MASK_VAL_CMD, TrafficConfigConstants.UDF3_MODE_CMD, TrafficConfigConstants.UDF3_OFFSET_CMD, TrafficConfigConstants.UDF3_SKIP_MASK_BITS_CMD, TrafficConfigConstants.UDF3_SKIP_ZEROS_AND_ONES_CMD, TrafficConfigConstants.UDF3_VALUE_LIST_CMD, TrafficConfigConstants.UDF4_CASCADE_TYPE_CMD, TrafficConfigConstants.UDF4_CHAIN_FROM_CMD, TrafficConfigConstants.UDF4_COUNTER_INIT_VALUE_CMD, TrafficConfigConstants.UDF4_COUNTER_MODE_CMD, TrafficConfigConstants.UDF4_COUNTER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF4_COUNTER_STEP_CMD, TrafficConfigConstants.UDF4_COUNTER_TYPE_CMD, TrafficConfigConstants.UDF4_COUNTER_UP_DOWN_CMD, TrafficConfigConstants.UDF4_ENABLE_CASCADE_CMD, TrafficConfigConstants.UDF4_INNER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF4_INNER_REPEAT_VALUE_CMD, TrafficConfigConstants.UDF4_INNER_STEP_CMD, TrafficConfigConstants.UDF4_MASK_SELECT_CMD, TrafficConfigConstants.UDF4_MASK_VAL_CMD, TrafficConfigConstants.UDF4_MODE_CMD, TrafficConfigConstants.UDF4_OFFSET_CMD, TrafficConfigConstants.UDF4_SKIP_MASK_BITS_CMD, TrafficConfigConstants.UDF4_SKIP_ZEROS_AND_ONES_CMD, TrafficConfigConstants.UDF4_VALUE_LIST_CMD, TrafficConfigConstants.UDF5_CASCADE_TYPE_CMD, TrafficConfigConstants.UDF5_CHAIN_FROM_CMD, TrafficConfigConstants.UDF5_COUNTER_INIT_VALUE_CMD, TrafficConfigConstants.UDF5_COUNTER_MODE_CMD, TrafficConfigConstants.UDF5_COUNTER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF5_COUNTER_STEP_CMD, TrafficConfigConstants.UDF5_COUNTER_TYPE_CMD, TrafficConfigConstants.UDF5_COUNTER_UP_DOWN_CMD, TrafficConfigConstants.UDF5_ENABLE_CASCADE_CMD, TrafficConfigConstants.UDF5_INNER_REPEAT_COUNT_CMD, TrafficConfigConstants.UDF5_INNER_REPEAT_VALUE_CMD, TrafficConfigConstants.UDF5_INNER_STEP_CMD, TrafficConfigConstants.UDF5_MASK_SELECT_CMD, TrafficConfigConstants.UDF5_MASK_VAL_CMD, TrafficConfigConstants.UDF5_MODE_CMD, TrafficConfigConstants.UDF5_OFFSET_CMD, TrafficConfigConstants.UDF5_SKIP_MASK_BITS_CMD, TrafficConfigConstants.UDF5_SKIP_ZEROS_AND_ONES_CMD, TrafficConfigConstants.UDF5_VALUE_LIST_CMD, TrafficConfigConstants.UDP_CHECKSUM_CMD, TrafficConfigConstants.UDP_CHECKSUM_VALUE_CMD, TrafficConfigConstants.UDP_CHECKSUM_VALUE_TRACKING_CMD, TrafficConfigConstants.UDP_DST_PORT_CMD, TrafficConfigConstants.UDP_DST_PORT_COUNT_CMD, TrafficConfigConstants.UDP_DST_PORT_MODE_CMD, TrafficConfigConstants.UDP_DST_PORT_STEP_CMD, TrafficConfigConstants.UDP_DST_PORT_TRACKING_CMD, TrafficConfigConstants.UDP_LENGTH_CMD, TrafficConfigConstants.UDP_LENGTH_COUNT_CMD, TrafficConfigConstants.UDP_LENGTH_MODE_CMD, TrafficConfigConstants.UDP_LENGTH_STEP_CMD, TrafficConfigConstants.UDP_LENGTH_TRACKING_CMD, TrafficConfigConstants.UDP_SRC_PORT_CMD, TrafficConfigConstants.UDP_SRC_PORT_COUNT_CMD, TrafficConfigConstants.UDP_SRC_PORT_MODE_CMD, TrafficConfigConstants.UDP_SRC_PORT_STEP_CMD, TrafficConfigConstants.UDP_SRC_PORT_TRACKING_CMD, TrafficConfigConstants.USE_ALL_IP_SUBNETS_CMD, TrafficConfigConstants.USE_CP_RATE_CMD, TrafficConfigConstants.USE_CP_SIZE_CMD, TrafficConfigConstants.VCI_CMD, TrafficConfigConstants.VCI_COUNT_CMD, TrafficConfigConstants.VCI_INCREMENT_CMD, TrafficConfigConstants.VCI_INCREMENT_STEP_CMD, TrafficConfigConstants.VCI_STEP_CMD, TrafficConfigConstants.VLAN_CMD, TrafficConfigConstants.VLAN_CFI_CMD, TrafficConfigConstants.VLAN_CFI_COUNT_CMD, TrafficConfigConstants.VLAN_CFI_MODE_CMD, TrafficConfigConstants.VLAN_CFI_STEP_CMD, TrafficConfigConstants.VLAN_CFI_TRACKING_CMD, TrafficConfigConstants.VLAN_ENABLE_CMD, TrafficConfigConstants.VLAN_ID_CMD, TrafficConfigConstants.VLAN_ID_COUNT_CMD, TrafficConfigConstants.VLAN_ID_MODE_CMD, TrafficConfigConstants.VLAN_ID_STEP_CMD, TrafficConfigConstants.VLAN_ID_TRACKING_CMD, TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_CMD, TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_COUNT_CMD, TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_MODE_CMD, TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_STEP_CMD, TrafficConfigConstants.VLAN_PROTOCOL_TAG_ID_TRACKING_CMD, TrafficConfigConstants.VLAN_USER_PRIORITY_CMD,TrafficConfigConstants.VLAN_USER_PRIORITY_COUNT_CMD, TrafficConfigConstants.VLAN_USER_PRIORITY_MODE_CMD, TrafficConfigConstants.VLAN_USER_PRIORITY_STEP_CMD, TrafficConfigConstants.VLAN_USER_PRIORITY_TRACKING_CMD, TrafficConfigConstants.VPI_CMD, TrafficConfigConstants.VPI_COUNT_CMD, TrafficConfigConstants.VPI_INCREMENT_CMD, TrafficConfigConstants.VPI_INCREMENT_STEP_CMD, TrafficConfigConstants.VPI_STEP_CMD}
